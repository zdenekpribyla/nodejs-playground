[
  {
    "id": 160263,
    "date": "2017-09-27T08:00:57",
    "date_gmt": "2017-09-27T15:00:57",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160263"
    },
    "modified": "2017-09-26T22:51:35",
    "modified_gmt": "2017-09-27T05:51:35",
    "slug": "design-highly-memorable-experiences",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/design-highly-memorable-experiences\/",
    "title": {
      "rendered": "How to Design Highly Memorable Experiences, and Why"
    },
    "content": {
      "rendered": "<p><strong>According to Gartner, by 2017, <a href=\"https:\/\/www.gartner.com\/marketing\/customer-experience\">89% of marketers expect customer experience to be their primary differentiator<\/a>. In order to create terrific customer experiences that set our apps and websites apart, we need to learn a bit more about how our brains work, and how we can create experiences that are memorable.<\/strong><\/p>\n\n<p><em>Fact: human brains are lazy. We love a shortcut.<\/em><\/p>\n<p>Let&#8217;s take a look at how that impacts on the way we design user experiences, and how we can design for lazy brains.<\/p>\n<h2 id=\"thepeakendrule\">The Peak\u2014end Rule<\/h2>\n<p>Nobel Prize winner Daniel Kahneman suggested that modern-day humans employ a a <em>psychological heuristic<\/em> (basically, a mental shortcut) called the <strong>peak\u2014end rule<\/strong>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Peak%E2%80%93end_rule\">which states<\/a>:<\/p>\n<blockquote>\n<p>People judge an experience largely based on how they felt <strong>at its peak<\/strong> (i.e., its most intense point) <strong>and at its end<\/strong>, rather than based on the total sum or average of every moment of the experience. The effect occurs regardless of whether the experience is pleasant or unpleasant.<\/p>\n<\/blockquote>\n<p>Let&#8217;s think about that for a second. It&#8217;s a big deal.<\/p>\n<p>When we remember experiences, we tend to recall only snapshots of the key events that happened. This means that we might easily recall a singular negative event (like a rude customer service representative) and forget the better but smaller aspects of the experience (like a well-designed website). Or, vice versa, we might dislike an experience overall (bad website UX), but what we&#8217;ll remember later is the terrific customer service received.<\/p>\n<h2 id=\"thepeakendruleaneverydayexample\">The Peak-end Rule: an Everyday Example<\/h2>\n<p>An everyday example of this is <em>movies<\/em>. Have you ever watched a brilliant movie, only for it to be spoiled by a disappointing ending? Two hours of spellbinding suspense can be rendered useless with a bad ending, much like an exciting online shopping experience can be ruined by a confusing\/frustrating checkout.<\/p>\n<p>Even if the middle of the experience was faultless, that&#8217;s not the aspect of the experience that users will remember.<\/p>\n<h2 id=\"boostpeakmomentswithfriction\">Boost Peak Moments with Friction<\/h2>\n<p>So we know that our brains like shortcuts. We know they remember the end and the most intense moments of an experience more than any other moment. In addition to that, we should also remember that our memories are <em>faulty<\/em>; they aren&#8217;t always <em>correct<\/em>. People won&#8217;t always remember what you said to them, <em>but<\/em> <strong>they&#8217;ll remember how you made them feel<\/strong>.<\/p>\n<p>So, with that in mind, we can then make changes to the experience to ensure that users forget negative moments, and remember <em>positive<\/em> ones. Some menial tasks, such as filling out a form, users won&#8217;t <em>want<\/em> to remember. By simplifying the experience and removing friction, users can breeze through this step. We don&#8217;t want the <em>peak<\/em> moment to be a horrendous one.<\/p>\n<h3 id=\"airbnbexample\">Airbnb Example<\/h3>\n<p>The same applies to <em>positive<\/em> experiences. Let&#8217;s say you&#8217;ve booked an apartment on Airbnb. That&#8217;s pretty exciting, right? Of course it is: you&#8217;re going on holiday! To ensure the possibly frustrating search experience doesn&#8217;t overshadow the excitement of your booking, Airbnb adds friction to keep you excited for a little longer. Here&#8217;s what Airbnb does:<\/p>\n<ul>\n<li>shows you things to do in the area<\/li>\n<li>lets you read the house manual<\/li>\n<li>lets you send the itinerary to your travel buddies<\/li>\n<li>helps you find directions to the address<\/li>\n<li>sends you an exciting &#8220;You&#8217;re going away!&#8221; message<\/li>\n<\/ul>\n<p>Not only does this often overshadow the somewhat long\/boring search for an Airbnb, but it improves the user experience towards the <strong>end<\/strong> as well. Now, when the user remembers Airbnb, they&#8217;ll remember how exciting it all was. Even though Airbnb bothers us with sending itineraries and recommendations, this is the sort of friction we&#8217;re happy to engage in.<\/p>\n<p><strong>In short: stretch out <em>positive<\/em> moments, and relieve the user of <em>negative pain points<\/em> quickly by removing friction.<\/strong><\/p>\n<h3 id=\"uberexample\">Uber Example<\/h3>\n<p>Remember taxis? Remember arriving at your destination and then fiddling around for cash? Yeah, this can be awkward. You realize you don&#8217;t have the right change, so you pay with credit card; the card machine isn&#8217;t working, so you have to drive to the ATM.<\/p>\n<p>It&#8217;s a rather awful, frustrating, embarrassing experience.<\/p>\n<p>Your Uber account is linked to your bank card. Once you&#8217;ve arrived at your destination, you hop out of the car and you&#8217;re <em>done<\/em>. Fiddling around for cash is not necessary; that <em>pain point<\/em> has been removed, and so the user walks away with their final experience with Uber being one of delight.<\/p>\n<h2 id=\"embraceflatmoments\">Embrace &#8220;Flat&#8221; Moments<\/h2>\n<p>Flat moments are moments that are neither fun nor boring.<\/p>\n<p>An excellent example of a &#8220;flat moment turned memorable&#8221; might be from way back in the early 2000s, from an e-commerce website called CD Baby. Typically, when you make a purchase online, you receive an email confirmation to notify you that your purchase went through smoothly. This is fairly standard, and important.<\/p>\n<p>Derek Sivers at CD Baby knew how flat this experience would be, and didn&#8217;t want to end it with something that wasn&#8217;t memorable, so he thought he&#8217;d have some fun. He put on his best copywriting mitts and came up with the following confirmation email:<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506489304cd-baby-email.png\" alt=\"CD Baby email\" width=\"584\" height=\"474\" class=\"aligncenter size-full wp-image-160266\" \/><\/p>\n<p>People loved it. It went viral. Derek had turned a boring aspect of the experience into an unexpected delight. People were suddenly purchasing from CD Baby just to see the email (<em>remember, this was the early 2000s!<\/em>). If we map out the customer journey, we&#8217;ll find that the email had become a <em>peak moment<\/em>, and a surefire way to create a memorable experience as the user &#8212; hopefully temporarily &#8212; departs from CD Baby.<\/p>\n<h2 id=\"creatingunexpectedmomentsofdelight\">Creating Unexpected Moments of Delight<\/h2>\n<p>The project management tool Asana springs to mind when I think of unexpected delight. When you complete a task, sometimes, <em>just sometimes<\/em>, you&#8217;ll see a unicorn fly across the screen.<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506491031unicorn-1024x551.jpg\" alt=\"A unicorn flies across the Asana screen\" width=\"1024\" height=\"551\" class=\"aligncenter size-large wp-image-160272\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">A screen shot of a unicorn flying across the screen. (See the original animated GIF on the <a href=\"https:\/\/blog.asana.com\/wp-content\/post-images\/Unicorn_1.gif\">Asana Blog<\/a>.)<\/p>\n<\/div>\n<p>It was first introduced as an April Fools Day Prank by Asana, but users loved it so much that it received an update and <a href=\"https:\/\/blog.asana.com\/2016\/03\/new-celebrations\/\">even some new friends<\/a> when they redesigned in 2016!<\/p>\n<h2 id=\"improvingvsflatteningapeakmoment\">Improving vs Flattening a Peak Moment<\/h2>\n<p>A quick thought experiment: <em>what would you prefer, a 45-minute train commute or a 55-minute train commute?<\/em><\/p>\n<p>If you decided upon the 45-minute commute, consider this: the 45-minute commute is <strong>without Wi-Fi<\/strong>, but the 55-minute commute has exceptional Wi-Fi. Which is better now?<\/p>\n<p>If I were on the train for business, I&#8217;d be frustrated at losing an hour of my day where I could be doing work. With Wi-Fi, the time matters not. If I were on holiday and the train travels down a beautiful coastline, then a longer journey is actually <em>better<\/em>, whether there&#8217;s Wi-Fi or not. Context matters.<\/p>\n<ul>\n<li>Can a negative experience be improved?<\/li>\n<li>If not, can it be shortened or flattened?<\/li>\n<li>Which would have the best result overall?<\/li>\n<\/ul>\n<h2 id=\"conclusion\">Conclusion<\/h2>\n<p>We&#8217;re <em>not<\/em> rational beings. We&#8217;re lazy, we&#8217;re forgetful, we&#8217;re impatient. Our brains like shortcuts. All of these facts come into play when we&#8217;re designing UX, and we should be thinking about these flaws in human psychology every step of the way.<\/p>\n<p>Activities like <a href=\"https:\/\/www.sitepoint.com\/how-to-improve-user-experience-with-customer-journey-optimization\/\">journey mapping<\/a> help us not only to build empathy for users, but really examine the journey that users take as they navigate our digital interfaces and the emotional roller coaster that can be.<\/p>\n<p>So how can we succeed? We can be consciously aware of the &#8220;big moments&#8221; in the experiences we create, reducing friction at tricky moments, boosting friction at delightful moments, and <em>ending the overall experiences on a highly positive note<\/em>.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong>According to Gartner, by 2017, <a href=\"https:\/\/www.gartner.com\/marketing\/customer-experience\">89% of marketers expect customer experience to be their primary differentiator<\/a>. In order to create terrific customer experiences that set our apps and websites apart, we need to learn a bit more about how our brains work, and how we can create experiences that are memorable.<\/strong><\/p>\n<p><em>Fact: human brains are lazy. We love a shortcut.<\/em><\/p>\n<p>Let&#8217;s take a look at how that impacts on the way we design user experiences, and how we can design for lazy brains.<\/p>\n<h2 id=\"thepeakendrule\">The Peak\u2014end Rule<\/h2>\n<p>Nobel Prize winner Daniel Kahneman suggested that modern-day humans employ a a <em>psychological heuristic<\/em> (basically, a mental shortcut) called the <strong>peak\u2014end rule<\/strong>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Peak%E2%80%93end_rule\">which states<\/a>:<\/p>\n<blockquote>\n<p>People judge an experience largely based on how they felt <strong>at its peak<\/strong> (i.e., its most intense point) <strong>and at its end<\/strong>, rather than based on the total sum or average of every moment of the experience. The effect occurs regardless of whether the experience is pleasant or unpleasant.<\/p>\n<\/blockquote>\n<p>Let&#8217;s think about that for a second. It&#8217;s a big deal.<\/p>\n<p>When we remember experiences, we tend to recall only snapshots of the key events that happened. This means that we might easily recall a singular negative event (like a rude customer service representative) and forget the better but smaller aspects of the experience (like a well-designed website). Or, vice versa, we might dislike an experience overall (bad website UX), but what we&#8217;ll remember later is the terrific customer service received.<\/p>\n<h2 id=\"thepeakendruleaneverydayexample\">The Peak-end Rule: an Everyday Example<\/h2>\n<p>An everyday example of this is <em>movies<\/em>. Have you ever watched a brilliant movie, only for it to be spoiled by a disappointing ending? Two hours of spellbinding suspense can be rendered useless with a bad ending, much like an exciting online shopping experience can be ruined by a confusing\/frustrating checkout.<\/p>\n<p>Even if the middle of the experience was faultless, that&#8217;s not the aspect of the experience that users will remember.<\/p>\n<h2 id=\"boostpeakmomentswithfriction\">Boost Peak Moments with Friction<\/h2>\n<p>So we know that our brains like shortcuts. We know they remember the end and the most intense moments of an experience more than any other moment. In addition to that, we should also remember that our memories are <em>faulty<\/em>; they aren&#8217;t always <em>correct<\/em>. People won&#8217;t always remember what you said to them, <em>but<\/em> <strong>they&#8217;ll remember how you made them feel<\/strong>.<\/p>\n<p>So, with that in mind, we can then make changes to the experience to ensure that users forget negative moments, and remember <em>positive<\/em> ones. Some menial tasks, such as filling out a form, users won&#8217;t <em>want<\/em> to remember. By simplifying the experience and removing friction, users can breeze through this step. We don&#8217;t want the <em>peak<\/em> moment to be a horrendous one.<\/p>\n<h3 id=\"airbnbexample\">Airbnb Example<\/h3>\n<p>The same applies to <em>positive<\/em> experiences. Let&#8217;s say you&#8217;ve booked an apartment on Airbnb. That&#8217;s pretty exciting, right? Of course it is: you&#8217;re going on holiday! To ensure the possibly frustrating search experience doesn&#8217;t overshadow the excitement of your booking, Airbnb adds friction to keep you excited for a little longer. Here&#8217;s what Airbnb does:<\/p>\n<ul>\n<li>shows you things to do in the area<\/li>\n<li>lets you read the house manual<\/li>\n<li>lets you send the itinerary to your travel buddies<\/li>\n<li>helps you find directions to the address<\/li>\n<li>sends you an exciting &#8220;You&#8217;re going away!&#8221; message<\/li>\n<\/ul>\n<p>Not only does this often overshadow the somewhat long\/boring search for an Airbnb, but it improves the user experience towards the <strong>end<\/strong> as well. Now, when the user remembers Airbnb, they&#8217;ll remember how exciting it all was. Even though Airbnb bothers us with sending itineraries and recommendations, this is the sort of friction we&#8217;re happy to engage in.<\/p>\n<p><strong>In short: stretch out <em>positive<\/em> moments, and relieve the user of <em>negative pain points<\/em> quickly by removing friction.<\/strong><\/p>\n<h3 id=\"uberexample\">Uber Example<\/h3>\n<p>Remember taxis? Remember arriving at your destination and then fiddling around for cash? Yeah, this can be awkward. You realize you don&#8217;t have the right change, so you pay with credit card; the card machine isn&#8217;t working, so you have to drive to the ATM.<\/p>\n<p>It&#8217;s a rather awful, frustrating, embarrassing experience.<\/p>\n<p>Your Uber account is linked to your bank card. Once you&#8217;ve arrived at your destination, you hop out of the car and you&#8217;re <em>done<\/em>. Fiddling around for cash is not necessary; that <em>pain point<\/em> has been removed, and so the user walks away with their final experience with Uber being one of delight.<\/p>\n<h2 id=\"embraceflatmoments\">Embrace &#8220;Flat&#8221; Moments<\/h2>\n<p>Flat moments are moments that are neither fun nor boring.<\/p>\n<p>An excellent example of a &#8220;flat moment turned memorable&#8221; might be from way back in the early 2000s, from an e-commerce website called CD Baby. Typically, when you make a purchase online, you receive an email confirmation to notify you that your purchase went through smoothly. This is fairly standard, and important.<\/p>\n<p>Derek Sivers at CD Baby knew how flat this experience would be, and didn&#8217;t want to end it with something that wasn&#8217;t memorable, so he thought he&#8217;d have some fun. He put on his best copywriting mitts and came up with the following confirmation email:<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506489304cd-baby-email.png\" alt=\"CD Baby email\" width=\"584\" height=\"474\" class=\"aligncenter size-full wp-image-160266\" \/><\/p>\n<p>People loved it. It went viral. Derek had turned a boring aspect of the experience into an unexpected delight. People were suddenly purchasing from CD Baby just to see the email (<em>remember, this was the early 2000s!<\/em>). If we map out the customer journey, we&#8217;ll find that the email had become a <em>peak moment<\/em>, and a surefire way to create a memorable experience as the user &#8212; hopefully temporarily &#8212; departs from CD Baby.<\/p>\n",
      "protected": false
    },
    "author": 72591,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      8572
    ],
    "tags": [
      11205,
      7829,
      1287,
      9506,
      1097
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160263"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72591"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160263"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160263\/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160263"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160263"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160263"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160204,
    "date": "2017-09-26T10:00:02",
    "date_gmt": "2017-09-26T17:00:02",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160204"
    },
    "modified": "2017-09-27T05:46:20",
    "modified_gmt": "2017-09-27T12:46:20",
    "slug": "react-router-v4-complete-guide",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/react-router-v4-complete-guide\/",
    "title": {
      "rendered": "React Router v4: The Complete Guide"
    },
    "content": {
      "rendered": "<p><em>For a high-quality, in-depth introduction to React, you can\u2019t go past Canadian full-stack developer Wes Bos. <a href=\"https:\/\/ReactForBeginners.com\/friend\/SITEPOINT\">Try his course here<\/a>, and use the code<strong> SITEPOINT<\/strong> to get <strong>25% off <\/strong>and to help support SitePoint.<\/em><\/p>\n<p><strong><a href=\"https:\/\/reacttraining.com\/react-router\/\">React Router<\/a> is the de facto standard routing library for React. When you need to navigate through a React application with multiple views, you&#8217;ll need a router to manage the URLs. React Router takes care of that, keeping your application UI and the URL in sync.<\/strong><\/p>\n\n<p>This tutorial introduces you to React Router v4 and a whole lot of things you can do with it.<\/p>\n<h2 id=\"introduction\">Introduction<\/h2>\n<p>React is a popular library for creating single-page applications (SPAs) that are rendered on the client side. An SPA might have multiple <strong>views<\/strong> (aka <strong>pages<\/strong>), and unlike the conventional multi-page apps, navigating through these views shouldn&#8217;t result in the entire page being reloaded. Instead, we want the views to be rendered inline within the current page. The end user, who&#8217;s accustomed to multi-page apps, expects the following features to be present in an SPA:<\/p>\n<ul>\n<li>Each view in an application should have a URL that uniquely specifies that view. This is so that the user can bookmark the URL for reference at a later time &#8212; e.g. <code>www.example.com\/products<\/code>.<\/li>\n<li>The browser&#8217;s back and forward button should work as expected.<\/li>\n<li>The dynamically generated nested views should preferably have a URL of their own too &#8212; e.g. <code>example.com\/products\/shoes\/101<\/code>, where 101 is the product id.<\/li>\n<\/ul>\n<p><strong>Routing<\/strong> is the process of keeping the browser URL in sync with what&#8217;s being rendered on the page. React Router lets you handle routing <strong>declaratively<\/strong>. The declarative routing approach allows you to control the data flow in your application, by saying &#8220;the route should look like this&#8221;:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route path=\"\/about\" component={About}\/&gt;\r\n<\/code><\/pre>\n<p>You can place your <code>&lt;Route&gt;<\/code> component anywhere that you want your route to be rendered. Since <code>&lt;Route&gt;<\/code>, <code>&lt;Link&gt;<\/code> and all the other React Router API that we&#8217;ll be dealing with are just components, you can easily get used to routing in React.<\/p>\n<p><em>A note before getting started. There&#8217;s a common misconception that React Router is an official routing solution developed by Facebook. In reality, it&#8217;s a third-party library that&#8217;s widely popular for its design and simplicity. If your requirements are limited to routers for navigation, you could implement a custom router from scratch without much hassle. However, understanding how the basics of React Router will give you better insights into how a router should work.<\/em><\/p>\n<h2 id=\"overview\">Overview<\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506435494react-router-logo.jpg\" alt=\"React Router Logo\" width=\"200\" height=\"\" class=\"alignright size-full wp-image-160205\" \/>  This tutorial is divided into different sections. First, we&#8217;ll be setting up React and React Router using npm. Then we&#8217;ll jump right into React Router basics. You&#8217;ll find different code demonstrations of React Router in action. The examples covered in this tutorial include:<\/p>\n<ol>\n<li>basic navigational routing<\/li>\n<li>nested routing<\/li>\n<li>nested routing with path parameters<\/li>\n<li>protected routing<\/li>\n<\/ol>\n<p>All the concepts connected with building these routes will be discussed along the way. The entire code for the project is available on <a href=\"https:\/\/github.com\/blizzerand\/react-router-v4-demo\">this GitHub repo<\/a>. Once you&#8217;re inside a particular demo directory, run <code>npm install<\/code> to install the dependencies. To serve the application on a development server, run <code>npm start<\/code> and head over to <code>http:\/\/localhost:3000\/<\/code> to see the demo in action.<\/p>\n<p>Let&#8217;s get started!<\/p>\n<h2 id=\"settingupreactrouter\">Setting up React Router<\/h2>\n<p>I assume you already have a development environment up and running. If not, head over to \u201c<a href=\"https:\/\/www.sitepoint.com\/getting-started-react-jsx\/\">Getting Started with React and JSX<\/a>\u201d. Alternatively, you can use <a href=\"https:\/\/www.sitepoint.com\/create-react-app\/\">Create React App<\/a> to generate the files required for creating a basic React project. This is the default directory structure generated by Create React App:<\/p>\n<pre><code class=\"bash language-bash\"> react-routing-demo-v4\r\n    \u251c\u2500\u2500 .gitignore\r\n    \u251c\u2500\u2500 package.json\r\n    \u251c\u2500\u2500 public\r\n    \u2502   \u251c\u2500\u2500 favicon.ico\r\n    \u2502   \u251c\u2500\u2500 index.html\r\n    \u2502   \u2514\u2500\u2500 manifest.json\r\n    \u251c\u2500\u2500 README.md\r\n    \u251c\u2500\u2500 src\r\n    \u2502   \u251c\u2500\u2500 App.css\r\n    \u2502   \u251c\u2500\u2500 App.js\r\n    \u2502   \u251c\u2500\u2500 App.test.js\r\n    \u2502   \u251c\u2500\u2500 index.css\r\n    \u2502   \u251c\u2500\u2500 index.js\r\n    \u2502   \u251c\u2500\u2500 logo.svg\r\n    \u2502   \u2514\u2500\u2500 registerServiceWorker.js\r\n    \u2514\u2500\u2500 yarn.lock\r\n<\/code><\/pre>\n<p>The React Router library comprises three packages: <code>react-router<\/code>, <code>react-router-dom<\/code>, and <code>react-router-native<\/code>. <code>react-router<\/code> is the core package for the router, whereas the other two are environment specific. You should use <code>react-router-dom<\/code> if you&#8217;re building a website, and <code>react-router-native<\/code> if you&#8217;re on a mobile app development environment using React Native.<\/p>\n<p>Use npm to install <code>react-router-dom<\/code>:<\/p>\n<pre><code>npm install --save react-router-dom\r\n<\/code><\/pre>\n<h2 id=\"reactrouterbasics\">React Router Basics<\/h2>\n<p>Here&#8217;s an example of how our routes will look:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Router&gt;\r\n  &lt;Route exact path=\"\/\" component={Home}\/&gt;\r\n  &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n  &lt;Route path=\"\/login\" component={Login}\/&gt;\r\n  &lt;Route path=\"\/products\" component={Products}\/&gt;\r\n&lt;\/Router&gt;\r\n<\/code><\/pre>\n<h3 id=\"router\">Router<\/h3>\n<p>You need a router component and several route components to set up a basic route as exemplified above. Since we&#8217;re building a browser-based application, we can use two types of routers from the React Router API:<\/p>\n<ol>\n<li><code>&lt;BrowserRouter&gt;<\/code><\/li>\n<li><code>&lt;HashRouter&gt;<\/code><\/li>\n<\/ol>\n<p>The primary difference between them is evident in the URLs that they create:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ &lt;BrowserRouter&gt;\r\nhttp:\/\/example.com\/about\r\n\r\n\/\/ &lt;HashRouter&gt;\r\nhttp:\/\/example.com\/#\/about\r\n<\/code><\/pre>\n<p>The <code>&lt;BrowserRouter&gt;<\/code> is more popular amongst the two because it uses the HTML5 History API to keep track of your router history. The <code>&lt;HashRouter&gt;<\/code>, on the other hand, uses the hash portion of the URL (<code>window.location.hash<\/code>) to remember things. If you intend to support legacy browsers, you should stick with <code>&lt;HashRouter&gt;<\/code>.<\/p>\n<p>Wrap the <code>&lt;BrowserRouter&gt;<\/code> component around the App component.<\/p>\n<h4 id=\"indexjs\">index.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements *\/\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\/* App is the entry point to the React code.*\/\r\nimport App from '.\/App';\r\n\r\n\/* import BrowserRouter from 'react-router-dom' *\/\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    &lt;BrowserRouter&gt;\r\n        &lt;App \/&gt;\r\n    &lt;\/BrowserRouter&gt;\r\n    , document.getElementById('root'));\r\n<\/code><\/pre>\n<p><em>Note: A router component can only have a single child element. The child element can be an HTML element &#8212; such as div &#8212; or a react component.<\/em><\/p>\n<p>For the React Router to work, you need to import the relevant API from the <code>react-router-dom<\/code> library. Here I&#8217;ve imported the <code>BrowserRouter<\/code> into <code>index.js<\/code>. I&#8217;ve also imported the <code>App<\/code> component from <code>App.js<\/code>. <code>App.js<\/code>, as you might have guessed, is the entry point to React components.<\/p>\n<p>The above code creates an instance of history for our entire App component. Let me formally introduce you to history.<\/p>\n<h3 id=\"history\">history<\/h3>\n<blockquote>\n<p><code>history<\/code> is a JavaScript library that lets you easily manage session history anywhere JavaScript runs. history provides a minimal API that lets you manage the history stack, navigate, confirm navigation, and persist state between sessions. &#8212; <a href=\"https:\/\/github.com\/ReactTraining\/history\">React Training docs<\/a><\/p>\n<\/blockquote>\n<p>Each router component creates a history object that keeps track of the current location (<code>history.location<\/code>) and also the previous locations in a stack. When the current location changes, the view is re-rendered and you get a sense of navigation. How does the current location change? The history object has methods such as <code>history.push()<\/code> and <code>history.replace()<\/code> to take care of that. <code>history.push()<\/code> is invoked when you click on a <code>&lt;Link&gt;<\/code> component, and <code>history.replace()<\/code> is called when you use <code>&lt;Redirect&gt;<\/code>. Other methods &#8212; such as <code>history.goBack()<\/code> and <code>history.goForward()<\/code> &#8212; are used to navigate through the history stack by going back or forward a page.<\/p>\n<p>Moving on, we have Links and Routes.<\/p>\n<h3 id=\"linksandroutes\">Links and Routes<\/h3>\n<p>The <code>&lt;Route&gt;<\/code> component is the most important component in React router. It renders some UI if the current location matches the route&#8217;s path. Ideally, a <code>&lt;Route&gt;<\/code> component should have a prop named <code>path<\/code>, and if the pathname is matched with the current location, it gets rendered.<\/p>\n<p>The <code>&lt;Link&gt;<\/code> component, on the other hand, is used to navigate between pages. It&#8217;s comparable to the HTML anchor element. However, using anchor links would result in a browser refresh, which we don&#8217;t want. So instead, we can use <code>&lt;Link&gt;<\/code> to navigate to a particular URL and have the view re-rendered without a browser refresh.<\/p>\n<p>We&#8217;ve covered everything you need to know to create a basic router. Let&#8217;s build one.<\/p>\n<h3 id=\"demo1basicrouting\">Demo 1: Basic Routing<\/h3>\n<h4 id=\"srcappjs\">src\/App.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements *\/\r\nimport React, { Component } from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\n\r\n\/* Home component *\/\r\nconst Home = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Home&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* Category component *\/\r\nconst Category = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Category&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* Products component *\/\r\nconst Products = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Products&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* App component *\/\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;nav className=\"navbar navbar-light\"&gt;\r\n          &lt;ul className=\"nav navbar-nav\"&gt;\r\n\r\n           \/* Link components are used for linking to other views *\/\r\n            &lt;li&gt;&lt;Link to=\"\/\"&gt;Homes&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/category\"&gt;Category&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/products\"&gt;Products&lt;\/Link&gt;&lt;\/li&gt;\r\n\r\n          &lt;\/ul&gt;\r\n         &lt;\/nav&gt;\r\n\r\n          \/* Route components are rendered if the path prop matches the current URL *\/\r\n           &lt;Route path=\"\/\" component={Home}\/&gt;\r\n           &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n           &lt;Route path=\"\/products\" component={Products}\/&gt;\r\n\r\n      &lt;\/div&gt;\r\n    )\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>We&#8217;ve declared the components for Home, Category and Products inside <code>App.js<\/code>. Although this is okay for now, when the component starts to grow bigger, it&#8217;s better to have a separate file for each component. As a rule of thumb, I usually create a new file for a component if it occupies more than 10 lines of code. Starting from the second demo, I&#8217;ll be creating a separate file for components that have grown too big to fit inside the <code>App.js<\/code> file.<\/p>\n<p>Inside the App component, we&#8217;ve written the logic for routing. The <code>&lt;Route&gt;<\/code>&#8216;s path is matched with the current location and a component gets rendered. The component that should be rendered is passed in as a second prop.<\/p>\n<p>Here <code>\/<\/code> matches both <code>\/<\/code> and <code>\/category<\/code>. Therefore, both the routes are matched and rendered. How do we avoid that? You should pass the <code>exact= {true}<\/code> props to the router with <code>path='\/'<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route exact={true} path=\"\/\" component={Home}\/&gt;\r\n<\/code><\/pre>\n<p>If you want a route to be rendered only if the paths are exactly the same, you should use the exact props.<\/p>\n<h2 id=\"nestedrouting\">Nested Routing<\/h2>\n<p>To create nested routes, we need to have a better understanding of how <code>&lt;Route&gt;<\/code> works. Let&#8217;s do that.<\/p>\n<p><code>&lt;Route&gt;<\/code> has three props that you can you use to define what gets rendered:<\/p>\n<ul>\n<li><strong>component<\/strong>. We&#8217;ve already seen this in action. When the URL is matched, the router creates a React element from the given component using <code>React.createElement<\/code>.<\/li>\n<li><strong>render<\/strong>. This is handy for inline rendering. The render prop expects a function that returns an element when the location matches the route&#8217;s path.<\/li>\n<li><strong>children<\/strong>. The children prop is similar to render in that it expects a function that returns a React element. However, children gets rendered regardless of whether the path is matched with the location or not.<\/li>\n<\/ul>\n<h3 id=\"pathandmatch\">Path and match<\/h3>\n<p>The <strong><em>path<\/em><\/strong> is used to identify the portion of the URL that the router should match. It uses the Path-to-RegExp library to turn a path string into a regular expression. It will then be matched against the current location.<\/p>\n<p>If the router&#8217;s path and the location are successfully matched, an object is created and we call it the <strong>match<\/strong> object. The match object carries more information about the URL and the path. This information is accessible through its properties, listed below:<\/p>\n<ul>\n<li><code>match.url<\/code>. A string that returns the matched portion of the URL. This is particularly useful for building nested <code>&lt;Link&gt;<\/code>s<\/li>\n<li><code>match.path<\/code>. A string that returns the route&#8217;s path string &#8212; that is, <code>&lt;Route path=\"\"&gt;<\/code>. We&#8217;ll be using this to build nested <code>&lt;Route&gt;<\/code>s.<\/li>\n<li><code>match.isExact<\/code>. A boolean that returns true if the match was exact (without any trailing characters).<\/li>\n<li><code>match.params<\/code>. An object containing key\/value pairs from the URL parsed by the Path-to-RegExp package.<\/li>\n<\/ul>\n<p>Now that we know all about <code>&lt;Route&gt;<\/code>s, let&#8217;s build a router with nested routes.<\/p>\n<h3 id=\"switchcomponent\">Switch Component<\/h3>\n<p>Before we head for the demo code, I want to introduce you to the <code>&lt;Switch&gt;<\/code> component. When multiple <code>&lt;Route&gt;<\/code>s are used together, all the routes that match are rendered inclusively. Consider this code from demo 1. I&#8217;ve added a new route to demonstrate why <code>&lt;Switch&gt;<\/code> is useful.<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route exact path=\"\/\" component={Home}\/&gt;\r\n&lt;Route path=\"\/products\" component={Products}\/&gt;\r\n&lt;Route path=\"\/category\" component={Category}\/&gt;\r\n&lt;Route path=\"\/:id\" render = {()=&gt; (&lt;p&gt; I want this text to show up for all routes other than '\/', '\/products' and '\/category' &lt;\/p&gt;)}\/&gt;\r\n<\/code><\/pre>\n<p>If the URL is <code>\/products<\/code>, all the routes that match the location <code>\/products<\/code> are rendered. So, the <code>&lt;Route&gt;<\/code> with path <code>:id<\/code> gets rendered along with the <code>Products<\/code> component. This is by design. However, if this is not the behavior you&#8217;re expecting, you should add the <code>&lt;Switch&gt;<\/code> component to your routes. With <code>&lt;Switch&gt;<\/code>, only the first child <code>&lt;Route&gt;<\/code> that matches the location gets rendered.<\/p>\n<h3 id=\"demo2nestedrouting\">Demo 2: nested routing<\/h3>\n<p>Earlier on, we created routes for <code>\/<\/code>, <code>\/category<\/code> and <code>\/products<\/code>. What if we wanted a URL of the form <code>\/category\/shoes<\/code>?<\/p>\n<h4 id=\"srcappjs-1\">src\/App.js<\/h4>\n<pre><code class=\"jsx language-jsx\">import React, { Component } from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport Category from '.\/Category';\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;nav className=\"navbar navbar-light\"&gt;\r\n          &lt;ul className=\"nav navbar-nav\"&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/\"&gt;Homes&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/category\"&gt;Category&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/products\"&gt;Products&lt;\/Link&gt;&lt;\/li&gt;\r\n          &lt;\/ul&gt;\r\n       &lt;\/nav&gt;\r\n\r\n    &lt;Switch&gt;\r\n      &lt;Route exact path=\"\/\" component={Home}\/&gt;\r\n      &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n       &lt;Route path=\"\/products\" component={Products}\/&gt;\r\n    &lt;\/Switch&gt;\r\n\r\n    &lt;\/div&gt;\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\/* Code for Home and Products component omitted for brevity *\/\r\n<\/code><\/pre>\n<p>Unlike the earlier version of React Router, in version 4, the nested <code>&lt;Route&gt;<\/code>s should preferably go inside the parent component. That is, the Category component is the parent here, and we&#8217;ll be declaring the routes for <code>category\/:name<\/code> inside the parent component.<\/p>\n<h4 id=\"srccategoryjsx\">src\/Category.jsx<\/h4>\n<pre><code class=\"jsx language-jsx\">import React from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\n\r\nconst Category = ({ match }) =&gt; {\r\nreturn( &lt;div&gt; &lt;ul&gt;\r\n    &lt;li&gt;&lt;Link to={`${match.url}\/shoes`}&gt;Shoes&lt;\/Link&gt;&lt;\/li&gt;\r\n    &lt;li&gt;&lt;Link to={`${match.url}\/boots`}&gt;Boots&lt;\/Link&gt;&lt;\/li&gt;\r\n    &lt;li&gt;&lt;Link to={`${match.url}\/footwear`}&gt;Footwear&lt;\/Link&gt;&lt;\/li&gt;\r\n\r\n  &lt;\/ul&gt;\r\n  &lt;Route path={`${match.path}\/:name`} render= {({match}) =&gt;( &lt;div&gt; &lt;h3&gt; {match.params.name} &lt;\/h3&gt;&lt;\/div&gt;)}\/&gt;\r\n  &lt;\/div&gt;)\r\n}\r\nexport default Category;\r\n<\/code><\/pre>\n<p>First, we&#8217;ve declared a couple of links for the nested routes. As previously mentioned, <code>match.url<\/code> will be used for building nested links and <code>match.path<\/code> for nested routes. If you&#8217;re having trouble understanding the concept of match, <code>console.log(match)<\/code> provides some useful information that might help to clarify it.<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route path={`${match.path}\/:name`}\r\n  render= {({match}) =&gt;( &lt;div&gt; &lt;h3&gt; {match.params.name} &lt;\/h3&gt;&lt;\/div&gt;)}\/&gt;\r\n<\/code><\/pre>\n<p>This is our first attempt at dynamic routing. Instead of hard-coding the routes, we&#8217;ve used a variable within the pathname. <code>:name<\/code> is a path parameter and catches everything after <code>category\/<\/code> until another forward slash is encountered. So, a pathname like <code>products\/running-shoes<\/code> will create a <code>params<\/code> object as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">{\r\n  name: 'running-shoes'\r\n}\r\n<\/code><\/pre>\n<p>The captured data should be accessible at <code>match.params<\/code> or <code>props.match.params<\/code> depending on how the props are passed. The other interesting thing is that we&#8217;ve used a <code>render<\/code> prop. <code>render<\/code> props are pretty handy for inline functions that don&#8217;t require a component of their own.<\/p>\n<h3 id=\"demo3nestedroutingwithpathparameters\">Demo 3: Nested routing with Path parameters<\/h3>\n<p>Let&#8217;s complicate things a bit more, shall we? A real-world router will have to deal with data and display it dynamically. Assume that we have the product data returned by a server API of the form below.<\/p>\n<h4 id=\"srcproductsjsx\">src\/Products.jsx<\/h4>\n<pre><code class=\"jsx language-jsx\">const productData = [\r\n{\r\n  id: 1,\r\n  name: 'NIKE Liteforce Blue Sneakers',\r\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin molestie.',\r\n  status: 'Available'\r\n\r\n},\r\n{\r\n  id: 2,\r\n  name: 'Stylised Flip Flops and Slippers',\r\n  description: 'Mauris finibus, massa eu tempor volutpat, magna dolor euismod dolor.',\r\n  status: 'Out of Stock'\r\n\r\n},\r\n{\r\n  id: 3,\r\n  name: 'ADIDAS Adispree Running Shoes',\r\n  description: 'Maecenas condimentum porttitor auctor. Maecenas viverra fringilla felis, eu pretium.',\r\n  status: 'Available'\r\n},\r\n{\r\n  id: 4,\r\n  name: 'ADIDAS Mid Sneakers',\r\n  description: 'Ut hendrerit venenatis lacus, vel lacinia ipsum fermentum vel. Cras.',\r\n  status: 'Out of Stock'\r\n},\r\n\r\n];\r\n<\/code><\/pre>\n<p>We need to create routes for the following paths:<\/p>\n<ul>\n<li><code>\/products<\/code>. This should display a list of products.<\/li>\n<li><code>\/products\/:productId<\/code>. If a product with the <code>:productId<\/code> exists, it should display the product data, and if not, it should display an error message.<\/li>\n<\/ul>\n<h4 id=\"srcproductsjsx-1\">src\/Products.jsx<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements have been left out for code brevity *\/\r\n\r\nconst Products = ({ match }) =&gt; {\r\n\r\n   const productsData = [\r\n    {\r\n        id: 1,\r\n        name: 'NIKE Liteforce Blue Sneakers',\r\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin molestie.',\r\n        status: 'Available'\r\n\r\n    },\r\n\r\n    \/\/Rest of the data has been left out for code brevity\r\n\r\n];\r\n \/* Create an array of `&lt;li&gt;` items for each product\r\n  var linkList = productsData.map( (product) =&gt; {\r\n    return(\r\n      &lt;li&gt;\r\n        &lt;Link to={`${match.url}\/${product.id}`}&gt;\r\n          {product.name}\r\n        &lt;\/Link&gt;\r\n      &lt;\/li&gt;\r\n      )\r\n\r\n    })\r\n\r\n  return(\r\n    &lt;div&gt;\r\n        &lt;div&gt;\r\n         &lt;div&gt;\r\n           &lt;h3&gt; Products&lt;\/h3&gt;\r\n           &lt;ul&gt; {linkList} &lt;\/ul&gt;\r\n         &lt;\/div&gt;\r\n        &lt;\/div&gt;\r\n\r\n        &lt;Route path={`${match.url}\/:productId`}\r\n            render={ (props) =&gt; &lt;Product data= {productsData} {...props} \/&gt;}\/&gt;\r\n        &lt;Route exact path={match.url}\r\n            render={() =&gt; (\r\n            &lt;div&gt;Please select a product.&lt;\/div&gt;\r\n            )}\r\n        \/&gt;\r\n    &lt;\/div&gt;\r\n  )\r\n}\r\n<\/code><\/pre>\n<p>First, we created a list of <code>&lt;Links&gt;<\/code>s using the <code>productsData.id<\/code>s and stored it in <code>linkList<\/code>. The route takes a parameter in the path string which corresponds to that of the product id.<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route path={`${match.url}\/:productId`}\r\n  render={ (props) =&gt; &lt;Product data= {productsData} {...props} \/&gt;}\/&gt;\r\n<\/code><\/pre>\n<p>You may have expected <code>component = { Product }<\/code> instead of the inline render function. The problem is that we need to pass down <code>productsData<\/code> to the Product component along with all the existing props. Although there are other ways you can do this, I find this method to be the easiest. <code>{...props}<\/code> uses the ES6&#8217;s <a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Reference\/Operators\/Spread_operator\">spread syntax<\/a> to pass the whole props object to the component.   <\/p>\n<p>Here&#8217;s the code for Product component.<\/p>\n<h4 id=\"srcproductjsx\">src\/Product.jsx<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements have been left out for code brevity *\/\r\n\r\nconst Product = ({match,data}) =&gt; {\r\n  var product= data.find(p =&gt; p.id == match.params.productId);\r\n  var productData;\r\n\r\n  if(product)\r\n    productData = &lt;div&gt;\r\n      &lt;h3&gt; {product.name} &lt;\/h3&gt;\r\n      &lt;p&gt;{product.description}&lt;\/p&gt;\r\n      &lt;hr\/&gt;\r\n      &lt;h4&gt;{product.status}&lt;\/h4&gt;  &lt;\/div&gt;;\r\n  else\r\n    productData = &lt;h2&gt; Sorry. Product doesnt exist &lt;\/h2&gt;;\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;div&gt;\r\n         {productData}\r\n      &lt;\/div&gt;\r\n    &lt;\/div&gt;\r\n  )    \r\n}\r\n<\/code><\/pre>\n<p>The <code>find<\/code> method is used to search the array for an object with an id property that equals <code>match.params.productId<\/code>. If the product exists, the <code>productData<\/code> is displayed. If not, a &#8220;Product doesn&#8217;t exist&#8221; message is rendered.<\/p>\n<h2 id=\"protectingroutes\">Protecting Routes<\/h2>\n<p>For the final demo, we&#8217;ll be discussing techniques concerned with protecting routes. So, if someone tries to access <code>\/admin<\/code>, they&#8217;d be required to log in first. However, there are some things we need to cover before we can protect routes.<\/p>\n<h3 id=\"redirect\">Redirect<\/h3>\n<p>Like the server-side redirects, <code>&lt;Redirect&gt;<\/code> will replace the current location in the history stack with a new location. The new location is specified by the <code>to<\/code> prop. Here&#8217;s how we&#8217;ll be using <code>&lt;Redirect&gt;<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Redirect to={{pathname: '\/login', state: {from: props.location}}}\r\n<\/code><\/pre>\n<p>So, if someone tries to access the <code>\/admin<\/code> while logged out, they&#8217;ll be redirected to the <code>\/login<\/code> route. The information about the current location is passed via state, so that if the authentication is successful, the user can be redirected back to the original location. Inside the child component, you can access this information at <code>this.props.location.state<\/code>.<\/p>\n<h3 id=\"customroutes\">Custom Routes<\/h3>\n<p>A custom route is a fancy word for a route nested inside a component. If we need to make a decision whether a route should be rendered or not, writing a custom route is the way to go. Here&#8217;s the custom route declared among other routes.<\/p>\n<h4 id=\"srcappjs-2\">src\/App.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Add the PrivateRoute component to the existing Routes *\/\r\n&lt;Switch&gt;\r\n  &lt;Route exact path=\"\/\" component={Home} data={data}\/&gt;\r\n  &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n  &lt;Route path=\"\/login\" component={Login}\/&gt;\r\n  &lt;PrivateRoute authed={fakeAuth.isAuthenticated} path='\/products' component = {Products} \/&gt;\r\n&lt;\/Switch&gt;\r\n<\/code><\/pre>\n<p><code>fakeAuth.isAuthenticated<\/code> returns true if the user is logged in and false otherwise.<\/p>\n<p>Here&#8217;s the definition for PrivateRoute:<\/p>\n<h4 id=\"srcappjs-3\">src\/App.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* PrivateRoute component definition *\/\r\nconst PrivateRoute = ({component: Component, authed, ...rest}) =&gt; {\r\n  return (\r\n    &lt;Route\r\n      {...rest}\r\n      render={(props) =&gt; authed === true\r\n        ? &lt;Component {...props} \/&gt;\r\n        : &lt;Redirect to={{pathname: '\/login', state: {from: props.location}}} \/&gt;} \/&gt;\r\n  )\r\n}\r\n<\/code><\/pre>\n<p>The route renders the Admin component if the user is logged in. Otherwise, the user is redirected to <code>\/login<\/code>. The good thing about this approach is that it is evidently more declarative and <code>PrivateRoute<\/code> is reusable.<\/p>\n<p>Finally, here&#8217;s the code for the Login component:<\/p>\n<h4 id=\"srcloginjsx\">src\/Login.jsx<\/h4>\n<pre><code class=\"jsx language-jsx\">import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      redirectToReferrer: false\r\n    }\r\n    \/\/ binding 'this'\r\n    this.login = this.login.bind(this);\r\n  }\r\n\r\n  login() {\r\n\r\n    fakeAuth.authenticate(() =&gt; {\r\n      this.setState({ redirectToReferrer: true })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { from } = this.props.location.state || { from: { pathname: '\/' } }\r\n    const { redirectToReferrer } = this.state;\r\n\r\n    if (redirectToReferrer) {\r\n      return (\r\n        &lt;Redirect to={from} \/&gt;\r\n      )\r\n    }\r\n\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;p&gt;You must log in to view the page at {from.pathname}&lt;\/p&gt;\r\n        &lt;button onClick={this.login}&gt;Log in&lt;\/button&gt;\r\n      &lt;\/div&gt;\r\n    )\r\n  }\r\n}\r\n\r\n\/* A fake authentication function *\/\r\nexport const fakeAuth = {\r\n\r\n  isAuthenticated: false,\r\n  authenticate(cb) {\r\n    this.isAuthenticated = true\r\n     setTimeout(cb, 100)\r\n  },\r\n}\r\n<\/code><\/pre>\n<p>The line below demonstrates <a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Reference\/Operators\/Destructuring_assignment\">object destructuring<\/a>, which is a part of the ES6 specification.<\/p>\n<pre><code class=\"jsx language-jsx\">const { from } = this.props.location.state || { from: { pathname: '\/' } }\r\n<\/code><\/pre>\n<p>Let&#8217;s fit the puzzle pieces together, shall we? Here&#8217;s the final demo of the application that we built using React router:<\/p>\n<h3 id=\"demo4protectingroutes\">Demo 4: Protecting Routes<\/h3>\n<p><iframe src=\"https:\/\/codesandbox.io\/embed\/nn8x24vm60\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"><\/iframe><\/p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses<\/h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/07\/1501203893wesbos.jpg' \/>\n        <\/div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners<\/span><\/a><\/div>\n            <div class='f-large'>Wes Bos<\/div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'<\/strong> at checkout to get <strong>25% off<\/strong>.<\/div>\n          <\/div>\n        <\/div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'><\/div>\n            <\/div>\n          <\/a>\n        <\/div>\n      <\/div>\n    \n  \n<h2 id=\"summary\">Summary<\/h2>\n<p>As you&#8217;ve seen in this article, React Router is a powerful library that complements React for building better, declarative routes. Unlike the prior versions of React Router, in v4, everything is &#8220;just components&#8221;. Moreover, the new design pattern perfectly fits into the React way of doing things.<\/p>\n<p>In this tutorial, we learned:<\/p>\n<ul>\n<li>how to setup and install React Router<\/li>\n<li>the basics of routing and some essential components such as <code>&lt;Router&gt;<\/code>, <code>&lt;Route&gt;<\/code> and <code>&lt;Link&gt;<\/code><\/li>\n<li>how to create a minimal router for navigation and nested routes<\/li>\n<li>how to build dynamic routes with path parameters<\/li>\n<\/ul>\n<p>Finally, we learned some advanced routing techniques for creating the final demo for protected routes.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong><a href=\"https:\/\/reacttraining.com\/react-router\/\">React Router<\/a> is the de facto standard routing library for React. When you need to navigate through a React application with multiple views, you&#8217;ll need a router to manage the URLs. React Router takes care of that, keeping your application UI and the URL in sync.<\/strong><\/p>\n<p>This tutorial introduces you to React Router v4 and a whole lot of things you can do with it.<\/p>\n<h2 id=\"introduction\">Introduction<\/h2>\n<p>React is a popular library for creating single-page applications (SPAs) that are rendered on the client side. An SPA might have multiple <strong>views<\/strong> (aka <strong>pages<\/strong>), and unlike the conventional multi-page apps, navigating through these views shouldn&#8217;t result in the entire page being reloaded. Instead, we want the views to be rendered inline within the current page. The end user, who&#8217;s accustomed to multi-page apps, expects the following features to be present in an SPA:<\/p>\n<ul>\n<li>Each view in an application should have a URL that uniquely specifies that view. This is so that the user can bookmark the URL for reference at a later time &#8212; e.g. <code>www.example.com\/products<\/code>.<\/li>\n<li>The browser&#8217;s back and forward button should work as expected.<\/li>\n<li>The dynamically generated nested views should preferably have a URL of their own too &#8212; e.g. <code>example.com\/products\/shoes\/101<\/code>, where 101 is the product id.<\/li>\n<\/ul>\n<p><strong>Routing<\/strong> is the process of keeping the browser URL in sync with what&#8217;s being rendered on the page. React Router lets you handle routing <strong>declaratively<\/strong>. The declarative routing approach allows you to control the data flow in your application, by saying &#8220;the route should look like this&#8221;:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route path=\"\/about\" component={About}\/&gt;\r\n<\/code><\/pre>\n<p>You can place your <code>&lt;Route&gt;<\/code> component anywhere that you want your route to be rendered. Since <code>&lt;Route&gt;<\/code>, <code>&lt;Link&gt;<\/code> and all the other React Router API that we&#8217;ll be dealing with are just components, you can easily get used to routing in React.<\/p>\n<p><em>A note before getting started. There&#8217;s a common misconception that React Router is an official routing solution developed by Facebook. In reality, it&#8217;s a third-party library that&#8217;s widely popular for its design and simplicity. If your requirements are limited to routers for navigation, you could implement a custom router from scratch without much hassle. However, understanding how the basics of React Router will give you better insights into how a router should work.<\/em><\/p>\n<h2 id=\"overview\">Overview<\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506435494react-router-logo.jpg\" alt=\"React Router Logo\" width=\"200\" height=\"\" class=\"alignright size-full wp-image-160205\" \/>  This tutorial is divided into different sections. First, we&#8217;ll be setting up React and React Router using npm. Then we&#8217;ll jump right into React Router basics. You&#8217;ll find different code demonstrations of React Router in action. The examples covered in this tutorial include:<\/p>\n<ol>\n<li>basic navigational routing<\/li>\n<li>nested routing<\/li>\n<li>nested routing with path parameters<\/li>\n<li>protected routing<\/li>\n<\/ol>\n<p>All the concepts connected with building these routes will be discussed along the way. The entire code for the project is available on <a href=\"https:\/\/github.com\/blizzerand\/React Router-v4-demo\">this GitHub repo<\/a>. Once you&#8217;re inside a particular demo directory, run <code>npm install<\/code> to install the dependencies. To serve the application on a development server, run <code>npm start<\/code> and head over to <code>http:\/\/localhost:3000\/<\/code> to see the demo in action.<\/p>\n<p>Let&#8217;s get started!<\/p>\n<h2 id=\"settingupreactrouter\">Setting up React Router<\/h2>\n<p>I assume you already have a development environment up and running. If not, head over to \u201c<a href=\"https:\/\/www.sitepoint.com\/getting-started-react-jsx\/\">Getting Started with React and JSX<\/a>\u201d. Alternatively, you can use <a href=\"https:\/\/www.sitepoint.com\/create-react-app\/\">Create React App<\/a> to generate the files required for creating a basic React project. This is the default directory structure generated by Create React App:<\/p>\n<pre><code class=\"bash language-bash\"> react-routing-demo-v4\r\n    \u251c\u2500\u2500 .gitignore\r\n    \u251c\u2500\u2500 package.json\r\n    \u251c\u2500\u2500 public\r\n    \u2502   \u251c\u2500\u2500 favicon.ico\r\n    \u2502   \u251c\u2500\u2500 index.html\r\n    \u2502   \u2514\u2500\u2500 manifest.json\r\n    \u251c\u2500\u2500 README.md\r\n    \u251c\u2500\u2500 src\r\n    \u2502   \u251c\u2500\u2500 App.css\r\n    \u2502   \u251c\u2500\u2500 App.js\r\n    \u2502   \u251c\u2500\u2500 App.test.js\r\n    \u2502   \u251c\u2500\u2500 index.css\r\n    \u2502   \u251c\u2500\u2500 index.js\r\n    \u2502   \u251c\u2500\u2500 logo.svg\r\n    \u2502   \u2514\u2500\u2500 registerServiceWorker.js\r\n    \u2514\u2500\u2500 yarn.lock\r\n<\/code><\/pre>\n<p>The React Router library comprises three packages: <code>react-router<\/code>, <code>react-router-dom<\/code>, and <code>react-router-native<\/code>. <code>react-router<\/code> is the core package for the router, whereas the other two are environment specific. You should use <code>react-router-dom<\/code> if you&#8217;re building a website, and <code>react-router-native<\/code> if you&#8217;re on a mobile app development environment using React Native.<\/p>\n<p>Use npm to install <code>react-router-dom<\/code>:<\/p>\n<pre><code>npm install --save react-router-dom\r\n<\/code><\/pre>\n<h2 id=\"reactrouterbasics\">React Router Basics<\/h2>\n<p>Here&#8217;s an example of how our routes will look:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Router&gt;\r\n  &lt;Route exact path=\"\/\" component={Home}\/&gt;\r\n  &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n  &lt;Route path=\"\/login\" component={Login}\/&gt;\r\n  &lt;Route path=\"\/products\" component={Products}\/&gt;\r\n&lt;\/Router&gt;\r\n<\/code><\/pre>\n<h3 id=\"router\">Router<\/h3>\n<p>You need a router component and several route components to set up a basic route as exemplified above. Since we&#8217;re building a browser-based application, we can use two types of routers from the React Router API:<\/p>\n<ol>\n<li><code>&lt;BrowserRouter&gt;<\/code><\/li>\n<li><code>&lt;HashRouter&gt;<\/code><\/li>\n<\/ol>\n<p>The primary difference between them is evident in the URLs that they create:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ &lt;BrowserRouter&gt;\r\nhttp:\/\/example.com\/about\r\n\r\n\/\/ &lt;HashRouter&gt;\r\nhttp:\/\/example.com\/#\/about\r\n<\/code><\/pre>\n<p>The <code>&lt;BrowserRouter&gt;<\/code> is more popular amongst the two because it uses the HTML5 History API to keep track of your router history. The <code>&lt;HashRouter&gt;<\/code>, on the other hand, uses the hash portion of the URL (<code>window.location.hash<\/code>) to remember things. If you intend to support legacy browsers, you should stick with <code>&lt;HashRouter&gt;<\/code>.<\/p>\n<p>Wrap the <code>&lt;BrowserRouter&gt;<\/code> component around the App component.<\/p>\n<h4 id=\"indexjs\">index.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements *\/\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\/* App is the entry point to the React code.*\/\r\nimport App from '.\/App';\r\n\r\n\/* import BrowserRouter from 'react-router-dom' *\/\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    &lt;BrowserRouter&gt;\r\n        &lt;App \/&gt;\r\n    &lt;\/BrowserRouter&gt;\r\n    , document.getElementById('root'));\r\n<\/code><\/pre>\n<p><em>Note: A router component can only have a single child element. The child element can be an HTML element &#8212; such as div &#8212; or a react component.<\/em><\/p>\n<p>For the React Router to work, you need to import the relevant API from the <code>react-router-dom<\/code> library. Here I&#8217;ve imported the <code>BrowserRouter<\/code> into <code>index.js<\/code>. I&#8217;ve also imported the <code>App<\/code> component from <code>App.js<\/code>. <code>App.js<\/code>, as you might have guessed, is the entry point to React components.<\/p>\n<p>The above code creates an instance of history for our entire App component. Let me formally introduce you to history.<\/p>\n<h3 id=\"history\">history<\/h3>\n<blockquote>\n<p><code>history<\/code> is a JavaScript library that lets you easily manage session history anywhere JavaScript runs. history provides a minimal API that lets you manage the history stack, navigate, confirm navigation, and persist state between sessions. &#8212; <a href=\"https:\/\/github.com\/ReactTraining\/history\">React Training docs<\/a><\/p>\n<\/blockquote>\n<p>Each router component creates a history object that keeps track of the current location (<code>history.location<\/code>) and also the previous locations in a stack. When the current location changes, the view is re-rendered and you get a sense of navigation. How does the current location change? The history object has methods such as <code>history.push()<\/code> and <code>history.replace()<\/code> to take care of that. <code>history.push()<\/code> is invoked when you click on a <code>&lt;Link&gt;<\/code> component, and <code>history.replace()<\/code> is called when you use <code>&lt;Redirect&gt;<\/code>. Other methods &#8212; such as <code>history.goBack()<\/code> and <code>history.goForward()<\/code> &#8212; are used to navigate through the history stack by going back or forward a page.<\/p>\n<p>Moving on, we have Links and Routes.<\/p>\n<h3 id=\"linksandroutes\">Links and Routes<\/h3>\n<p>The <code>&lt;Route&gt;<\/code> component is the most important component in React router. It renders some UI if the current location matches the route&#8217;s path. Ideally, a <code>&lt;Route&gt;<\/code> component should have a prop named <code>path<\/code>, and if the pathname is matched with the current location, it gets rendered.<\/p>\n<p>The <code>&lt;Link&gt;<\/code> component, on the other hand, is used to navigate between pages. It&#8217;s comparable to the HTML anchor element. However, using anchor links would result in a browser refresh, which we don&#8217;t want. So instead, we can use <code>&lt;Link&gt;<\/code> to navigate to a particular URL and have the view re-rendered without a browser refresh.<\/p>\n<p>We&#8217;ve covered everything you need to know to create a basic router. Let&#8217;s build one.<\/p>\n<h3 id=\"demo1basicrouting\">Demo 1: Basic Routing<\/h3>\n<h4 id=\"srcappjs\">src\/App.js<\/h4>\n<pre><code class=\"jsx language-jsx\">\/* Import statements *\/\r\nimport React, { Component } from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\n\r\n\/* Home component *\/\r\nconst Home = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Home&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* Category component *\/\r\nconst Category = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Category&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* Products component *\/\r\nconst Products = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Products&lt;\/h2&gt;\r\n  &lt;\/div&gt;\r\n)\r\n\r\n\/* App component *\/\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;nav className=\"navbar navbar-light\"&gt;\r\n          &lt;ul className=\"nav navbar-nav\"&gt;\r\n\r\n           \/* Link components are used for linking to other views *\/\r\n            &lt;li&gt;&lt;Link to=\"\/\"&gt;Homes&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/category\"&gt;Category&lt;\/Link&gt;&lt;\/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"\/products\"&gt;Products&lt;\/Link&gt;&lt;\/li&gt;\r\n\r\n          &lt;\/ul&gt;\r\n         &lt;\/nav&gt;\r\n\r\n          \/* Route components are rendered if the path prop matches the current URL *\/\r\n           &lt;Route path=\"\/\" component={Home}\/&gt;\r\n           &lt;Route path=\"\/category\" component={Category}\/&gt;\r\n           &lt;Route path=\"\/products\" component={Products}\/&gt;\r\n\r\n      &lt;\/div&gt;\r\n    )\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>We&#8217;ve declared the components for Home, Category and Products inside <code>App.js<\/code>. Although this is okay for now, when the component starts to grow bigger, it&#8217;s better to have a separate file for each component. As a rule of thumb, I usually create a new file for a component if it occupies more than 10 lines of code. Starting from the second demo, I&#8217;ll be creating a separate file for components that have grown too big to fit inside the <code>App.js<\/code> file.<\/p>\n<p>Inside the App component, we&#8217;ve written the logic for routing. The <code>&lt;Route&gt;<\/code>&#8216;s path is matched with the current location and a component gets rendered. The component that should be rendered is passed in as a second prop.<\/p>\n<p>Here <code>\/<\/code> matches both <code>\/<\/code> and <code>\/category<\/code>. Therefore, both the routes are matched and rendered. How do we avoid that? You should pass the <code>exact= {true}<\/code> props to the router with <code>path='\/'<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route exact={true} path=\"\/\" component={Home}\/&gt;\r\n<\/code><\/pre>\n<p>If you want a route to be rendered only if the paths are exactly the same, you should use the exact props.<\/p>\n<h2 id=\"nestedrouting\">Nested Routing<\/h2>\n<p>To create nested routes, we need to have a better understanding of how <code>&lt;Route&gt;<\/code> works. Let&#8217;s do that.<\/p>\n<p><code>&lt;Route&gt;<\/code> has three props that you can you use to define what gets rendered:<\/p>\n<ul>\n<li><strong>component<\/strong>. We&#8217;ve already seen this in action. When the URL is matched, the router creates a React element from the given component using <code>React.createElement<\/code>.<\/li>\n<li><strong>render<\/strong>. This is handy for inline rendering. The render prop expects a function that returns an element when the location matches the route&#8217;s path.<\/li>\n<li><strong>children<\/strong>. The children prop is similar to render in that it expects a function that returns a React element. However, children gets rendered regardless of whether the path is matched with the location or not.<\/li>\n<\/ul>\n<h3 id=\"pathandmatch\">Path and match<\/h3>\n<p>The <strong><em>path<\/em><\/strong> is used to identify the portion of the URL that the router should match. It uses the Path-to-RegExp library to turn a path string into a regular expression. It will then be matched against the current location.<\/p>\n<p>If the router&#8217;s path and the location are successfully matched, an object is created and we call it the <strong>match<\/strong> object. The match object carries more information about the URL and the path. This information is accessible through its properties, listed below:<\/p>\n<ul>\n<li><code>match.url<\/code>. A string that returns the matched portion of the URL. This is particularly useful for building nested <code>&lt;Link&gt;<\/code>s<\/li>\n<li><code>match.path<\/code>. A string that returns the route&#8217;s path string &#8212; that is, <code>&lt;Route path=\"\"&gt;<\/code>. We&#8217;ll be using this to build nested <code>&lt;Route&gt;<\/code>s.<\/li>\n<li><code>match.isExact<\/code>. A boolean that returns true if the match was exact (without any trailing characters).<\/li>\n<li><code>match.params<\/code>. An object containing key\/value pairs from the URL parsed by the Path-to-RegExp package.<\/li>\n<\/ul>\n<p>Now that we know all about <code>&lt;Route&gt;<\/code>s, let&#8217;s build a router with nested routes.<\/p>\n<h3 id=\"switchcomponent\">Switch Component<\/h3>\n<p>Before we head for the demo code, I want to introduce you to the <code>&lt;Switch&gt;<\/code> component. When multiple <code>&lt;Route&gt;<\/code>s are used together, all the routes that match are rendered inclusively. Consider this code from demo 1. I&#8217;ve added a new route to demonstrate why <code>&lt;Switch&gt;<\/code> is useful.<\/p>\n<pre><code class=\"jsx language-jsx\">&lt;Route exact path=\"\/\" component={Home}\/&gt;\r\n&lt;Route path=\"\/products\" component={Products}\/&gt;\r\n&lt;Route path=\"\/category\" component={Category}\/&gt;\r\n&lt;Route path=\"\/:id\" render = {()=&gt; (&lt;p&gt; I want this text to show up for all routes other than '\/', '\/products' and '\/category' &lt;\/p&gt;)}\/&gt;\r\n<\/code><\/pre>\n<p>If the URL is <code>\/products<\/code>, all the routes that match the location <code>\/products<\/code> are rendered. So, the <code>&lt;Route&gt;<\/code> with path <code>:id<\/code> gets rendered along with the <code>Products<\/code> component. This is by design. However, if this is not the behavior you&#8217;re expecting, you should add the <code>&lt;Switch&gt;<\/code> component to your routes. With <code>&lt;Switch&gt;<\/code>, only the first child <code>&lt;Route&gt;<\/code> that matches the location gets rendered.<\/p>\n",
      "protected": false
    },
    "author": 71811,
    "featured_media": 160206,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      407
    ],
    "tags": [
      9543,
      11521,
      7829,
      9802,
      11565
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160204"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/71811"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160204"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160204\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160206"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160204"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160204"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160204"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160086,
    "date": "2017-09-26T09:00:12",
    "date_gmt": "2017-09-26T16:00:12",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160086"
    },
    "modified": "2017-09-27T05:49:18",
    "modified_gmt": "2017-09-27T12:49:18",
    "slug": "getting-started-redux",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/getting-started-redux\/",
    "title": {
      "rendered": "Getting Started with Redux"
    },
    "content": {
      "rendered": "<p><em>For a high-quality, in-depth introduction to React, you can\u2019t go past Canadian full-stack developer Wes Bos. <a href=\"https:\/\/ReactForBeginners.com\/friend\/SITEPOINT\">Try his course here<\/a>, and use the code<strong> SITEPOINT<\/strong> to get <strong>25% off <\/strong>and to help support SitePoint.<\/em><\/p>\n<p><strong>A typical web application is usually composed of several UI components that share data. Often, multiple components are tasked with the responsibility of displaying different properties of the same object. This object represents state which can change at any time. Keeping state consistent among multiple components can be a nightmare, especially if there are multiple channels being used to update the same object.<\/strong><\/p>\n\n<p>Take, for example, a site with a shopping cart. At the top we have a UI component showing the number of items in the cart. We could also have another UI component that displays the total cost of items in the cart. If a user clicks the <strong>Add to Cart<\/strong> button, both of these components should update immediately with the correct figures. If the user decides to remove an item from the cart, change quantity, add a protection plan, use a coupon or change shipping location, then the relevant UI components should update to display the correct information. As you can see, a simple shopping cart can quickly become <em>difficult to keep in sync<\/em> as the scope of its features grows.<\/p>\n<p>In this guide, I&#8217;ll introduce you to a framework known as <a href=\"https:\/\/github.com\/reactjs\/redux\">Redux<\/a>, which can help you build complex projects in way that&#8217;s easy to scale and maintain. To make learning easier, we&#8217;ll use a simplified <strong>shopping cart project<\/strong> to learn how Redux works. You&#8217;ll need to be at least familiar with the <a href=\"https:\/\/www.sitepoint.com\/getting-started-react-beginners-guide\/\">React<\/a> library, as you&#8217;ll later need to integrate it with Redux.<\/p>\n<h2 id=\"prerequisites\">Prerequisites<\/h2>\n<p>Before we get started, make sure you&#8217;re familiar with the following topics:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/introduction-functional-javascript\/\">Functional JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/oriented-programming-1\/\">Object-oriented JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/shorthand-javascript-techniques\/\">ES6 JavaScript Syntax<\/a><\/li>\n<\/ul>\n<p>Also, ensure you have the following setup on your machine:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/beginners-guide-node-package-manager\/\">a NodeJS environment<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/yarn-vs-npm\/\">a Yarn setup<\/a> (recommended)<\/li>\n<\/ul>\n<p>You can access the entire code used in this tutorial on <a href=\"https:\/\/github.com\/brandiqa\/redux-shopping-cart\">GitHub<\/a>.<\/p>\n<h2 id=\"whatisredux\">What is Redux<\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506395997react-logo.jpg\" alt=\"Redux Logo\" width=\"300\" height=\"92\" class=\"alignright size-full wp-image-160090\" \/> Redux is a popular JavaScript framework that provides a predictable state container for applications. Redux is based on a simplified version of Flux, a framework developed by Facebook. Unlike standard MVC frameworks, where data can flow between UI components and storage in both directions, Redux strictly allows data to flow in one direction only. See the below illustration:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602352001-redux-flow-chart.png\" alt=\"Redux Flow Chart\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 1: Redux Flow Chart<\/p>\n<\/div>\n<p>In Redux, all data &#8212; i.e. <strong>state<\/strong> &#8212; is held in a container known as the <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Store.html\">store<\/a><\/strong>. There can only be one of these within an application. The store is essentially a state tree where states for all objects are kept. Any UI component can access the state of a particular object directly from the store. To change a state from a local or remote component, an <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Actions.html\">action<\/a><\/strong> needs to be dispatched. <strong>Dispatch<\/strong> in this context means sending actionable information to the store. When a store receives an <code>action<\/code>, it delegates it to the relevant <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Reducers.html\">reducer<\/a><\/strong>. A <code>reducer<\/code> is simply a pure function that looks at the previous state, performs an action and returns a new state. To see all this in action, we need to start coding.<\/p>\n<h2 id=\"understandimmutabilityfirst\">Understand Immutability First<\/h2>\n<p>Before we start, I need you to first understand what <strong>immutability<\/strong> means in JavaScript. According to the Oxford English Dictionary, immutability means being <strong>unchangeable<\/strong>. In programming, we write code that changes the values of variables all the time. This is referred to as <strong>mutability<\/strong>. The way we do this can often cause unexpected bugs in our projects. If your code only deals with primitive data types (numbers, strings, booleans), then you don&#8217;t need to worry. However, if you&#8217;re working with Arrays and Objects, performing <strong>mutable<\/strong> operations on them can create unexpected bugs. To demonstrate this, open your terminal and launch the Node interactive shell:<\/p>\n<pre><code class=\"bash language-bash\">node\r\n<\/code><\/pre>\n<p>Next, let&#8217;s create an array, then later assign it to another variable:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; let a = [1,2,3]\r\n&gt; let b = a\r\n&gt; b.push(9)\r\n&gt; console.log(b)\r\n[ 1, 2, 3, 9 ] \/\/ b output\r\n&gt; console.log(a)\r\n[ 1, 2, 3, 9 ] \/\/ a output\r\n<\/code><\/pre>\n<p>As you can see, updating <code>array b<\/code> caused <code>array a<\/code> to change as well. This happens because Objects and Arrays are known <strong>referential data types<\/strong> &#8212; meaning that such data types don&#8217;t actually hold values themselves, but are pointers to a memory location where the values are stored. By assigning <code>a<\/code> to <code>b<\/code>, we merely created a second pointer that references the same location. To fix this, we need to copy the referenced values to a new location. In JavaScript, there are three different ways of achieving this:<\/p>\n<ol>\n<li>using immutable data structures created by <a href=\"https:\/\/facebook.github.io\/immutable-js\/\">Immutable.js<\/a><\/li>\n<li>using JavaScript libraries such as <a href=\"http:\/\/underscorejs.org\/\">Underscore<\/a> and <a href=\"https:\/\/lodash.com\/\">Lodash<\/a> to execute immutable operations<\/li>\n<li>using native <strong>ES6<\/strong> functions to execute immutable operations.<\/li>\n<\/ol>\n<p>For this article, we&#8217;ll use the <strong>ES6<\/strong> way, since it&#8217;s already available in the NodeJS environment. Inside your <code>NodeJS<\/code> terminal, execute the following:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; a = [1,2,3] \/\/ reset a\r\n[ 1, 2, 3 ]\r\n&gt; b = Object.assign([],a) \/\/ copy array a to b\r\n[ 1, 2, 3 ]\r\n&gt; b.push(8)\r\n&gt; console.log(b)\r\n[ 1, 2, 3, 8 ] \/\/ b output\r\n&gt; console.log(a)\r\n[ 1, 2, 3 ] \/\/ a output\r\n<\/code><\/pre>\n<p>In the above code example, array <code>b<\/code> can now be modified without affecting array <code>a<\/code>. We&#8217;ve used <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Object\/assign\">Object.assign()<\/a> to create a new copy of values that variable <code>b<\/code> will now point to. We can also use the <code>rest operator(...)<\/code> to perform an immutable operation like this:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; a = [1,2,3]\r\n[ 1, 2, 3 ]\r\n&gt; b = [...a, 4, 5, 6]\r\n[ 1, 2, 3, 4, 5, 6 ]\r\n&gt; a\r\n[ 1, 2, 3 ]\r\n<\/code><\/pre>\n<p>The rest operator works with object literals too! I won&#8217;t go deep into this subject, but here are some additional ES6 functions that we&#8217;ll use to perform immutable operations:<\/p>\n<ul>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Spread_operator\">spread syntax<\/a> &#8212; useful in append operations<\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Map\">map function<\/a> &#8212; useful in an update operation<\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter\">filter function<\/a> &#8212; useful in a delete operation<\/li>\n<\/ul>\n<p>In case the documentation I&#8217;ve linked isn&#8217;t useful, don&#8217;t worry, as you&#8217;ll see how they&#8217;re used in practice. Let&#8217;s start coding!<\/p>\n<h2 id=\"settingupredux\">Setting up Redux<\/h2>\n<p>The fastest way to set up a Redux development environment is to use the <code>create-react-app<\/code> tool. Before we begin, make sure you&#8217;ve installed and updated <code>nodejs<\/code>, <code>npm<\/code> and <code>yarn<\/code>. Let&#8217;s set up a Redux project by generating a <code>redux-shopping-cart<\/code> project and installing the <a href=\"https:\/\/www.npmjs.com\/package\/redux\">Redux<\/a> package:<\/p>\n<pre><code class=\"bash language-bash\">create-react-app redux-shopping-cart\r\n\r\ncd redux-shopping-cart\r\nyarn add redux # or npm install redux\r\n<\/code><\/pre>\n<p>Delete all files inside the <code>src<\/code> folder except <code>index.js<\/code>. Open the file and clear out all existing code. Type the following:<\/p>\n<pre><code class=\"jsx language-jsx\">import { createStore } from \"redux\";\r\n\r\nconst reducer = function(state, action) {\r\n  return state;\r\n}\r\n\r\nconst store = createStore(reducer);\r\n<\/code><\/pre>\n<p>Let me explain what the above piece of code does:<\/p>\n<ul>\n<li><strong>1st statement<\/strong>. We import a <code>createStore()<\/code> function from the Redux package.<\/li>\n<li><strong>2nd statement<\/strong>. We create an empty function known as a <strong>reducer<\/strong>. The first argument, <code>state<\/code>, is current data held in the store. The second argument, <code>action<\/code>, is a container for:\n<ul>\n<li><strong>type<\/strong> &#8212; a simple string constant e.g. <code>ADD<\/code>, <code>UPDATE<\/code>, <code>DELETE<\/code> etc.<\/li>\n<li><strong>payload<\/strong> &#8212; data for updating state<\/li>\n<\/ul>\n<\/li>\n<li><strong>3rd statement<\/strong>. We create a Redux store, which can only be constructed using a reducer as a parameter. The data kept in the Redux store can be accessed directly, but can only be updated via the supplied reducer.<\/li>\n<\/ul>\n<p>You may have noticed I mentioned current data as if it already exists. Currently, our <code>state<\/code> is undefined or null. To remedy this, just assign a default value to state like this to make it an empty array:<\/p>\n<pre><code class=\"jsx language-jsx\">const reducer = function(state=[], action) {\r\n  return state;\r\n}\r\n<\/code><\/pre>\n<p>Now, let&#8217;s get practical. The reducer we created is generic. Its name doesn&#8217;t describe what it&#8217;s for. Then there&#8217;s the issue of how we work with multiple reducers. The answer is to use a <code>combineReducers<\/code> function that&#8217;s supplied by the Redux package. Update your code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nimport { combineReducers } from 'redux';\r\n\r\nconst productsReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst cartReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst allReducers = {\r\n  products: productsReducer,\r\n  shoppingCart: cartReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(allReducers);\r\n\r\nlet store = createStore(rootReducer);\r\n<\/code><\/pre>\n<p>In the code above, we&#8217;ve renamed the generic reducer to <code>cartReducer<\/code>. There&#8217;s also a new empty reducer named <code>productsReducer<\/code> that I&#8217;ve created just to show you how to combine multiple reducers within a single store using the <code>combineReducers<\/code> function.<\/p>\n<p>Next, we&#8217;ll look at how we can define some test data for our reducers. Update the code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nconst initialState = {\r\n  cart: [\r\n    {\r\n      product: 'bread 700g',\r\n      quantity: 2,\r\n      unitCost: 90\r\n    },\r\n    {\r\n      product: 'milk 500ml',\r\n      quantity: 1,\r\n      unitCost: 47\r\n    }\r\n  ]\r\n}\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  return state;\r\n}\r\n\u2026\r\nlet store = createStore(rootReducer);\r\n\r\nconsole.log(\"initial state: \", store.getState());\r\n<\/code><\/pre>\n<p>Just to confirm that the store has some initial data, we use <code>store.getState()<\/code> to print out the current state in the console. You can run the dev server by executing <code>npm start<\/code> or <code>yarn start<\/code> in the console. Then press <code>Ctrl+Shift+I<\/code> to open the inspector tab in Chrome in order to view the console tab.<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602352302-redux-initial-state.png\" alt=\"Redux Initial State\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 2: Redux Initial State<\/p>\n<\/div>\n<p>Currently, our <code>cartReducer<\/code> does nothing, yet it&#8217;s supposed to manage the state of our shopping cart items within the Redux store. We need to define actions for adding, updating and deleting shopping cart items. Let&#8217;s start by defining logic for a <code>ADD_TO_CART<\/code> action:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nconst ADD_TO_CART = 'ADD_TO_CART';\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\u2026\r\n<\/code><\/pre>\n<p>Take your time to analyze and understand the code. A reducer is expected to handle different action types, hence the need for a <code>SWITCH<\/code> statement. When an action of type <code>ADD_TO_CART<\/code> is dispatched anywhere in the application, the code defined here will handle it. As you can see, we&#8217;re using the information provided in <code>action.payload<\/code> to combine to an existing state in order to create a new state.<\/p>\n<p>Next, we&#8217;ll define an <code>action<\/code>, which is needed as a parameter for <code>store.dispatch()<\/code>. <strong>Actions<\/strong> are simply JavaScript objects that must have <code>type<\/code> and an optional payload. Let&#8217;s go ahead and define one right after the <code>cartReducer<\/code> function:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nfunction addToCart(product, quantity, unitCost) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    payload: { product, quantity, unitCost }\r\n  }\r\n}\r\n\u2026\r\n<\/code><\/pre>\n<p>Here, we&#8217;ve defined a function that returns a plain JavaScript object. Nothing fancy. Before we dispatch, let&#8217;s add some code that will allow us to listen to store event changes. Place this code right after the <code>console.log()<\/code> statement:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nlet unsubscribe = store.subscribe(() =&gt;\r\n  console.log(store.getState())\r\n);\r\n\r\nunsubscribe();\r\n<\/code><\/pre>\n<p>Next, let&#8217;s add several items to the cart by dispatching actions to the store. Place this code before <code>unsubscribe()<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nstore.dispatch(addToCart('Coffee 500gm', 1, 250));\r\nstore.dispatch(addToCart('Flour 1kg', 2, 110));\r\nstore.dispatch(addToCart('Juice 2L', 1, 250));\r\n<\/code><\/pre>\n<p>For clarification purposes, I&#8217;ll illustrate below how the entire code should look after making all the above changes:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\r\nimport { createStore } from \"redux\";\r\nimport { combineReducers } from 'redux';\r\n\r\nconst productsReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst initialState = {\r\n  cart: [\r\n    {\r\n      product: 'bread 700g',\r\n      quantity: 2,\r\n      unitCost: 90\r\n    },\r\n    {\r\n      product: 'milk 500ml',\r\n      quantity: 1,\r\n      unitCost: 47\r\n    }\r\n  ]\r\n}\r\n\r\nconst ADD_TO_CART = 'ADD_TO_CART';\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction addToCart(product, quantity, unitCost) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    payload: {\r\n      product,\r\n      quantity,\r\n      unitCost\r\n    }\r\n  }\r\n}\r\n\r\nconst allReducers = {\r\n  products: productsReducer,\r\n  shoppingCart: cartReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(allReducers);\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nconsole.log(\"initial state: \", store.getState());\r\n\r\nlet unsubscribe = store.subscribe(() =&gt;\r\n  console.log(store.getState())\r\n);\r\n\r\nstore.dispatch(addToCart('Coffee 500gm', 1, 250));\r\nstore.dispatch(addToCart('Flour 1kg', 2, 110));\r\nstore.dispatch(addToCart('Juice 2L', 1, 250));\r\n\r\nunsubscribe();\r\n<\/code><\/pre>\n<p>After you&#8217;ve saved your code, Chrome should automatically refresh. Check the console tab to confirm that the new items have been added:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602353003-redux-dispatch-actions.png\" alt=\"Redux Actions Dispatched\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 3: Redux Actions Dispatched<\/p>\n<\/div>\n<h2 id=\"organizingreduxcode\">Organizing Redux Code<\/h2>\n<p>The <code>index.js<\/code> file has quickly grown large. This is not how Redux code is written. I&#8217;ve only done this to show you how simple Redux is. Let&#8217;s look at how a Redux project should be organized. First, create the following folders and files within the <code>src<\/code> folder, as illustrated below:<\/p>\n<pre><code class=\"text language-text\">src\/\r\n\u251c\u2500\u2500 actions\r\n\u2502   \u2514\u2500\u2500 cart-actions.js\r\n\u251c\u2500\u2500 index.js\r\n\u251c\u2500\u2500 reducers\r\n\u2502   \u251c\u2500\u2500 cart-reducer.js\r\n\u2502   \u251c\u2500\u2500 index.js\r\n\u2502   \u2514\u2500\u2500 products-reducer.js\r\n\u2514\u2500\u2500 store.js\r\n<\/code><\/pre>\n<p>Next, let&#8217;s start moving code from <code>index.js<\/code> to the relevant files:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/actions\/cart-actions.js\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\n\r\nexport function addToCart(product, quantity, unitCost) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    payload: { product, quantity, unitCost }\r\n  }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/reducers\/products-reducer.js\r\n\r\nexport default function(state=[], action) {\r\n  return state;\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/reducers\/cart-reducer.js\r\n\r\nimport  { ADD_TO_CART }  from '..\/actions\/cart-actions';\r\n\r\nconst initialState = {\r\n  cart: [\r\n    {\r\n      product: 'bread 700g',\r\n      quantity: 2,\r\n      unitCost: 90\r\n    },\r\n    {\r\n      product: 'milk 500ml',\r\n      quantity: 1,\r\n      unitCost: 47\r\n    }\r\n  ]\r\n}\r\n\r\nexport default function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/reducers\/index.js\r\n\r\nimport { combineReducers } from 'redux';\r\nimport productsReducer from '.\/products-reducer';\r\nimport cartReducer from '.\/cart-reducer';\r\n\r\nconst allReducers = {\r\n  products: productsReducer,\r\n  shoppingCart: cartReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(allReducers);\r\n\r\nexport default rootReducer;\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/store.js\r\n\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from '.\/reducers';\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nexport default store;\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\r\nimport store from '.\/store.js';\r\nimport { addToCart }  from '.\/actions\/cart-actions';\r\n\r\nconsole.log(\"initial state: \", store.getState());\r\n\r\nlet unsubscribe = store.subscribe(() =&gt;\r\n  console.log(store.getState())\r\n);\r\n\r\nstore.dispatch(addToCart('Coffee 500gm', 1, 250));\r\nstore.dispatch(addToCart('Flour 1kg', 2, 110));\r\nstore.dispatch(addToCart('Juice 2L', 1, 250));\r\n\r\nunsubscribe();\r\n<\/code><\/pre>\n<p>After you&#8217;ve finished updating the code, the application should run as before now that it&#8217;s better organized. Let&#8217;s now look at how we can update and delete items from the shopping cart. Open <code>cart-reducer.js<\/code> and update the code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/reducers\/cart-actions.js\r\n\u2026\r\nexport const UPDATE_CART = 'UPDATE_CART';\r\nexport const DELETE_FROM_CART = 'DELETE_FROM_CART';\r\n\u2026\r\nexport function updateCart(product, quantity, unitCost) {\r\n  return {\r\n    type: UPDATE_CART,\r\n    payload: {\r\n      product,\r\n      quantity,\r\n      unitCost\r\n    }\r\n  }\r\n}\r\n\r\nexport function deleteFromCart(product) {\r\n  return {\r\n    type: DELETE_FROM_CART,\r\n    payload: {\r\n      product\r\n    }\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Next, update <code>cart-reducer.js<\/code> as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/reducers\/cart-reducer.js\r\n\u2026\r\nexport default function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    case UPDATE_CART: {\r\n      return {\r\n        ...state,\r\n        cart: state.cart.map(item =&gt; item.product === action.payload.product ? action.payload : item)\r\n      }\r\n    }\r\n\r\n    case DELETE_FROM_CART: {\r\n      return {\r\n        ...state,\r\n        cart: state.cart.filter(item =&gt; item.product !== action.payload.product)\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Finally, let&#8217;s dispatch the <code>UPDATE_CART<\/code> and <code>DELETE_FROM_CART<\/code> actions in <code>index.js<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\n\/\/ Update Cart\r\nstore.dispatch(updateCart('Flour 1kg', 5, 110));\r\n\r\n\/\/ Delete from Cart\r\nstore.dispatch(deleteFromCart('Coffee 500gm'));\r\n\u2026\r\n<\/code><\/pre>\n<p>Your browser should automatically refresh once you&#8217;ve saved all the changes. Check the console tab to confirm the results:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602353304-redux-crud.png\" alt=\"Redux Update and Delete Actions\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 4: Redux Update and Delete Actions<\/p>\n<\/div>\n<p>As confirmed, the quantity for 1kg of flour is updated from 2 to 5, while the the 500gm of coffee gets deleted from cart.<\/p>\n<h2 id=\"debuggingwithreduxtools\">Debugging with Redux tools<\/h2>\n<p>Now, if we&#8217;ve made a mistake in our code, how do we debug a Redux project?<\/p>\n<p>Redux comes with a lot of third-party debugging tools we can use to analyze code behavior and fix bugs. Probably the most popular one is the <strong>time-travelling tool<\/strong>, otherwise known as <a href=\"https:\/\/www.npmjs.com\/package\/redux-devtools-extension\">redux-devtools-extension<\/a>. Setting it up is a 3-step process. First, go to your Chrome browser and install the <a href=\"https:\/\/chrome.google.com\/webstore\/detail\/redux-devtools\/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en\">Redux Devtools extension<\/a>.<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602354505-redux-devtools.png\" alt=\"Redux DevTools Chrome Extensions\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 5: Redux DevTools Chrome Extensions<\/p>\n<\/div>\n<p>Next, go to your terminal where your Redux application is running and press <code>Ctrl+C<\/code> to stop the development server. Next, use npm or yarn to install the <a href=\"https:\/\/www.npmjs.com\/package\/redux-devtools-extension\">redux-devtools-extension<\/a> package. Personally, I prefer Yarn, since there&#8217;s a <code>yarn.lock<\/code> file that I&#8217;d like to keep updated.<\/p>\n<pre><code class=\"bash language-bash\">yarn add redux-devtools-extension\r\n<\/code><\/pre>\n<p>Once installation is complete, you can start the development server as we implement the final step of implementing the tool. Open <code>store.js<\/code> and replace the existing code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/store.js\r\nimport { createStore } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from '.\/reducers';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n<\/code><\/pre>\n<p>Feel free to update <code>src\/index.js<\/code> and remove all code related with logging to the console and subscribing to the store. This is no longer needed. Now, go back to Chrome and open the Redux DevTools panel by right-clicking the tool&#8217;s icon:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602355206-redux-devtools-menu.png\" alt=\"Redux DevTools Menu\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 6: Redux DevTools Menu<\/p>\n<\/div>\n<p>In my case, I&#8217;ve selected to <strong>To Bottom<\/strong> option. Feel free to try out other options.<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602355707-redux-devtools-screenshot.png\" alt=\"Redux DevTools Panel\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 7: Redux DevTools Panel<\/p>\n<\/div>\n<p>As you can see, the Redux Devtool is quite amazing. You can toggle between action, state and diff methods. Select actions on the left panel and observe how the state tree changes. You can also use the slider to play back the sequence of actions. You can even dispatch directly from the tool! Do check out the <a href=\"https:\/\/github.com\/gaearon\/redux-devtools\">documentation<\/a> to learn more on how you can further customize the tool to your needs.<\/p>\n<h2 id=\"integrationwithreact\">Integration with React<\/h2>\n<p>At the beginning of this tutorial, I mentioned Redux really pairs well with React. Well, you only need a few steps to setup the integration. Firstly, stop the development server, as we&#8217;ll need to install the <a href=\"https:\/\/github.com\/reactjs\/react-redux\">react-redux<\/a> package, the official Redux bindings for React:<\/p>\n<pre><code class=\"bash language-bash\">yarn add react-redux\r\n<\/code><\/pre>\n<p>Next, update <code>index.js<\/code> to include some React code. We&#8217;ll also use the <code>Provider<\/code> class to wrap the React application within the Redux container:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst App = &lt;h1&gt;Redux Shopping Cart&lt;\/h1&gt;;\r\n\r\nReactDOM.render(\r\n  &lt;Provider store={store}&gt;\r\n    { App }\r\n  &lt;\/Provider&gt; ,\r\n  document.getElementById('root')\r\n);\r\n\u2026\r\n<\/code><\/pre>\n<p>Just like that, we&#8217;ve completed the first part of the integration. You can now start the server to see the result. The second part involves linking React&#8217;s components with the Redux store and actions using a couple of functions provided by the <code>react-redux<\/code> package that we just installed. In addition, you&#8217;ll need to set up an API using <a href=\"https:\/\/expressjs.com\/\">Express<\/a> or a framework like <a href=\"https:\/\/feathersjs.com\/\">Feathers<\/a>. The API will provide our application with access to a database service.<\/p>\n<p>In Redux, we&#8217;ll also need to install further packages such as <code>axios<\/code> to perform API requests via Redux actions. Our React components state will then be handled by Redux, making sure that all components are in sync with the database API. To learn more on how to accomplish all this, do take a look at my other tutorial, \u201c<a href=\"https:\/\/www.sitepoint.com\/crud-app-react-redux-feathersjs\/\">Build a CRUD App Using React, Redux and FeathersJS<\/a>\u201d.  <\/p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses<\/h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/07\/1501203893wesbos.jpg' \/>\n        <\/div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners<\/span><\/a><\/div>\n            <div class='f-large'>Wes Bos<\/div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'<\/strong> at checkout to get <strong>25% off<\/strong>.<\/div>\n          <\/div>\n        <\/div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'><\/div>\n            <\/div>\n          <\/a>\n        <\/div>\n      <\/div>\n    \n  \n<h2 id=\"summary\">Summary<\/h2>\n<p>I hope this guide has given you a useful introduction to Redux. There&#8217;s still quite a bit more for you to learn, though. For example, you need to learn how to deal with async actions, authentication, logging, handling forms and so on. Now that you know what Redux is all about, you&#8217;ll find it easier to try out other similar frameworks, such as <a href=\"https:\/\/www.sitepoint.com\/building-a-react-universal-blog-app-implementing-flux\/\">Flux<\/a>, Alt.js or <a href=\"https:\/\/www.sitepoint.com\/redux-vs-mobx-which-is-best\/\">Mobx<\/a>. If you feel Redux is right for you, I  highly recommend the following tutorials that will help you gain even more experience in Redux:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/redux-without-react-state-management-vanilla-javascript\/\">Redux State Management in Vanilla JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/redux-logging-production-logrocket\/\">Redux Logging in Production with LogRocket<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/crud-app-react-redux-feathersjs\/\">Build a CRUD App Using React, Redux and FeathersJS<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/asynchronous-apis-server-rendered-react\/\">Dealing with Asynchronous APIs in Server-rendered React<\/a><\/li>\n<\/ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong>A typical web application is usually composed of several UI components that share data. Often, multiple components are tasked with the responsibility of displaying different properties of the same object. This object represents state which can change at any time. Keeping state consistent among multiple components can be a nightmare, especially if there are multiple channels being used to update the same object.<\/strong><\/p>\n<p>Take, for example, a site with a shopping cart. At the top we have a UI component showing the number of items in the cart. We could also have another UI component that displays the total cost of items in the cart. If a user clicks the <strong>Add to Cart<\/strong> button, both of these components should update immediately with the correct figures. If the user decides to remove an item from the cart, change quantity, add a protection plan, use a coupon or change shipping location, then the relevant UI components should update to display the correct information. As you can see, a simple shopping cart can quickly become <em>difficult to keep in sync<\/em> as the scope of its features grows.<\/p>\n<p>In this guide, I&#8217;ll introduce you to a framework known as <a href=\"https:\/\/github.com\/reactjs\/redux\">Redux<\/a>, which can help you build complex projects in way that&#8217;s easy to scale and maintain. To make learning easier, we&#8217;ll use a simplified <strong>shopping cart project<\/strong> to learn how Redux works. You&#8217;ll need to be at least familiar with the <a href=\"https:\/\/www.sitepoint.com\/getting-started-react-beginners-guide\/\">React<\/a> library, as you&#8217;ll later need to integrate it with Redux.<\/p>\n<h2 id=\"prerequisites\">Prerequisites<\/h2>\n<p>Before we get started, make sure you&#8217;re familiar with the following topics:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/introduction-functional-javascript\/\">Functional JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/oriented-programming-1\/\">Object-oriented JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/shorthand-javascript-techniques\/\">ES6 JavaScript Syntax<\/a><\/li>\n<\/ul>\n<p>Also, ensure you have the following setup on your machine:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/beginners-guide-node-package-manager\/\">a NodeJS environment<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/yarn-vs-npm\/\">a Yarn setup<\/a> (recommended)<\/li>\n<\/ul>\n<p>You can access the entire code used in this tutorial on <a href=\"https:\/\/github.com\/brandiqa\/redux-shopping-cart\">GitHub<\/a>.<\/p>\n<h2 id=\"whatisredux\">What is Redux<\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506395997react-logo.jpg\" alt=\"Redux Logo\" width=\"300\" height=\"92\" class=\"alignright size-full wp-image-160090\" \/> Redux is a popular JavaScript framework that provides a predictable state container for applications. Redux is based on a simplified version of Flux, a framework developed by Facebook. Unlike standard MVC frameworks, where data can flow between UI components and storage in both directions, Redux strictly allows data to flow in one direction only. See the below illustration:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602352001-redux-flow-chart.png\" alt=\"Redux Flow Chart\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 1: Redux Flow Chart<\/p>\n<\/div>\n<p>In Redux, all data &#8212; i.e. <strong>state<\/strong> &#8212; is held in a container known as the <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Store.html\">store<\/a><\/strong>. There can only be one of these within an application. The store is essentially a state tree where states for all objects are kept. Any UI component can access the state of a particular object directly from the store. To change a state from a local or remote component, an <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Actions.html\">action<\/a><\/strong> needs to be dispatched. <strong>Dispatch<\/strong> in this context means sending actionable information to the store. When a store receives an <code>action<\/code>, it delegates it to the relevant <strong><a href=\"http:\/\/redux.js.org\/docs\/basics\/Reducers.html\">reducer<\/a><\/strong>. A <code>reducer<\/code> is simply a pure function that looks at the previous state, performs an action and returns a new state. To see all this in action, we need to start coding.<\/p>\n<h2 id=\"understandimmutabilityfirst\">Understand Immutability First<\/h2>\n<p>Before we start, I need you to first understand what <strong>immutability<\/strong> means in JavaScript. According to the Oxford English Dictionary, immutability means being <strong>unchangeable<\/strong>. In programming, we write code that changes the values of variables all the time. This is referred to as <strong>mutability<\/strong>. The way we do this can often cause unexpected bugs in our projects. If your code only deals with primitive data types (numbers, strings, booleans), then you don&#8217;t need to worry. However, if you&#8217;re working with Arrays and Objects, performing <strong>mutable<\/strong> operations on them can create unexpected bugs. To demonstrate this, open your terminal and launch the Node interactive shell:<\/p>\n<pre><code class=\"bash language-bash\">node\r\n<\/code><\/pre>\n<p>Next, let&#8217;s create an array, then later assign it to another variable:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; let a = [1,2,3]\r\n&gt; let b = a\r\n&gt; b.push(9)\r\n&gt; console.log(b)\r\n[ 1, 2, 3, 9 ] \/\/ b output\r\n&gt; console.log(a)\r\n[ 1, 2, 3, 9 ] \/\/ a output\r\n<\/code><\/pre>\n<p>As you can see, updating <code>array b<\/code> caused <code>array a<\/code> to change as well. This happens because Objects and Arrays are known <strong>referential data types<\/strong> &#8212; meaning that such data types don&#8217;t actually hold values themselves, but are pointers to a memory location where the values are stored. By assigning <code>a<\/code> to <code>b<\/code>, we merely created a second pointer that references the same location. To fix this, we need to copy the referenced values to a new location. In JavaScript, there are three different ways of achieving this:<\/p>\n<ol>\n<li>using immutable data structures created by <a href=\"https:\/\/facebook.github.io\/immutable-js\/\">Immutable.js<\/a><\/li>\n<li>using JavaScript libraries such as <a href=\"http:\/\/underscorejs.org\/\">Underscore<\/a> and <a href=\"https:\/\/lodash.com\/\">Lodash<\/a> to execute immutable operations<\/li>\n<li>using native <strong>ES6<\/strong> functions to execute immutable operations.<\/li>\n<\/ol>\n<p>For this article, we&#8217;ll use the <strong>ES6<\/strong> way, since it&#8217;s already available in the NodeJS environment. Inside your <code>NodeJS<\/code> terminal, execute the following:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; a = [1,2,3] \/\/ reset a\r\n[ 1, 2, 3 ]\r\n&gt; b = Object.assign([],a) \/\/ copy array a to b\r\n[ 1, 2, 3 ]\r\n&gt; b.push(8)\r\n&gt; console.log(b)\r\n[ 1, 2, 3, 8 ] \/\/ b output\r\n&gt; console.log(a)\r\n[ 1, 2, 3 ] \/\/ a output\r\n<\/code><\/pre>\n<p>In the above code example, array <code>b<\/code> can now be modified without affecting array <code>a<\/code>. We&#8217;ve used <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Object\/assign\">Object.assign()<\/a> to create a new copy of values that variable <code>b<\/code> will now point to. We can also use the <code>rest operator(...)<\/code> to perform an immutable operation like this:<\/p>\n<pre><code class=\"jsx language-jsx\">&gt; a = [1,2,3]\r\n[ 1, 2, 3 ]\r\n&gt; b = [...a, 4, 5, 6]\r\n[ 1, 2, 3, 4, 5, 6 ]\r\n&gt; a\r\n[ 1, 2, 3 ]\r\n<\/code><\/pre>\n<p>The rest operator works with object literals too! I won&#8217;t go deep into this subject, but here are some additional ES6 functions that we&#8217;ll use to perform immutable operations:<\/p>\n<ul>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Spread_operator\">spread syntax<\/a> &#8212; useful in append operations<\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Map\">map function<\/a> &#8212; useful in an update operation<\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter\">filter function<\/a> &#8212; useful in a delete operation<\/li>\n<\/ul>\n<p>In case the documentation I&#8217;ve linked isn&#8217;t useful, don&#8217;t worry, as you&#8217;ll see how they&#8217;re used in practice. Let&#8217;s start coding!<\/p>\n<h2 id=\"settingupredux\">Setting up Redux<\/h2>\n<p>The fastest way to set up a Redux development environment is to use the <code>create-react-app<\/code> tool. Before we begin, make sure you&#8217;ve installed and updated <code>nodejs<\/code>, <code>npm<\/code> and <code>yarn<\/code>. Let&#8217;s set up a Redux project by generating a <code>redux-shopping-cart<\/code> project and installing the <a href=\"https:\/\/www.npmjs.com\/package\/redux\">Redux<\/a> package:<\/p>\n<pre><code class=\"bash language-bash\">create-react-app redux-shopping-cart\r\n\r\ncd redux-shopping-cart\r\nyarn add redux # or npm install redux\r\n<\/code><\/pre>\n<p>Delete all files inside the <code>src<\/code> folder except <code>index.js<\/code>. Open the file and clear out all existing code. Type the following:<\/p>\n<pre><code class=\"jsx language-jsx\">import { createStore } from \"redux\";\r\n\r\nconst reducer = function(state, action) {\r\n  return state;\r\n}\r\n\r\nconst store = createStore(reducer);\r\n<\/code><\/pre>\n<p>Let me explain what the above piece of code does:<\/p>\n<ul>\n<li><strong>1st statement<\/strong>. We import a <code>createStore()<\/code> function from the Redux package.<\/li>\n<li><strong>2nd statement<\/strong>. We create an empty function known as a <strong>reducer<\/strong>. The first argument, <code>state<\/code>, is current data held in the store. The second argument, <code>action<\/code>, is a container for:\n<ul>\n<li><strong>type<\/strong> &#8212; a simple string constant e.g. <code>ADD<\/code>, <code>UPDATE<\/code>, <code>DELETE<\/code> etc.<\/li>\n<li><strong>payload<\/strong> &#8212; data for updating state<\/li>\n<\/ul>\n<\/li>\n<li><strong>3rd statement<\/strong>. We create a Redux store, which can only be constructed using a reducer as a parameter. The data kept in the Redux store can be accessed directly, but can only be updated via the supplied reducer.<\/li>\n<\/ul>\n<p>You may have noticed I mentioned current data as if it already exists. Currently, our <code>state<\/code> is undefined or null. To remedy this, just assign a default value to state like this to make it an empty array:<\/p>\n<pre><code class=\"jsx language-jsx\">const reducer = function(state=[], action) {\r\n  return state;\r\n}\r\n<\/code><\/pre>\n<p>Now, let&#8217;s get practical. The reducer we created is generic. Its name doesn&#8217;t describe what it&#8217;s for. Then there&#8217;s the issue of how we work with multiple reducers. The answer is to use a <code>combineReducers<\/code> function that&#8217;s supplied by the Redux package. Update your code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nimport { combineReducers } from 'redux';\r\n\r\nconst productsReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst cartReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst allReducers = {\r\n  products: productsReducer,\r\n  shoppingCart: cartReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(allReducers);\r\n\r\nlet store = createStore(rootReducer);\r\n<\/code><\/pre>\n<p>In the code above, we&#8217;ve renamed the generic reducer to <code>cartReducer<\/code>. There&#8217;s also a new empty reducer named <code>productsReducer<\/code> that I&#8217;ve created just to show you how to combine multiple reducers within a single store using the <code>combineReducers<\/code> function.<\/p>\n<p>Next, we&#8217;ll look at how we can define some test data for our reducers. Update the code as follows:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nconst initialState = {\r\n  cart: [\r\n    {\r\n      product: 'bread 700g',\r\n      quantity: 2,\r\n      unitCost: 90\r\n    },\r\n    {\r\n      product: 'milk 500ml',\r\n      quantity: 1,\r\n      unitCost: 47\r\n    }\r\n  ]\r\n}\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  return state;\r\n}\r\n\u2026\r\nlet store = createStore(rootReducer);\r\n\r\nconsole.log(\"initial state: \", store.getState());\r\n<\/code><\/pre>\n<p>Just to confirm that the store has some initial data, we use <code>store.getState()<\/code> to print out the current state in the console. You can run the dev server by executing <code>npm start<\/code> or <code>yarn start<\/code> in the console. Then press <code>Ctrl+Shift+I<\/code> to open the inspector tab in Chrome in order to view the console tab.<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602352302-redux-initial-state.png\" alt=\"Redux Initial State\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 2: Redux Initial State<\/p>\n<\/div>\n<p>Currently, our <code>cartReducer<\/code> does nothing, yet it&#8217;s supposed to manage the state of our shopping cart items within the Redux store. We need to define actions for adding, updating and deleting shopping cart items. Let&#8217;s start by defining logic for a <code>ADD_TO_CART<\/code> action:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\u2026\r\nconst ADD_TO_CART = 'ADD_TO_CART';\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\u2026\r\n<\/code><\/pre>\n<p>Take your time to analyze and understand the code. A reducer is expected to handle different action types, hence the need for a <code>SWITCH<\/code> statement. When an action of type <code>ADD_TO_CART<\/code> is dispatched anywhere in the application, the code defined here will handle it. As you can see, we&#8217;re using the information provided in <code>action.payload<\/code> to combine to an existing state in order to create a new state.<\/p>\n<p>Next, we&#8217;ll define an <code>action<\/code>, which is needed as a parameter for <code>store.dispatch()<\/code>. <strong>Actions<\/strong> are simply JavaScript objects that must have <code>type<\/code> and an optional payload. Let&#8217;s go ahead and define one right after the <code>cartReducer<\/code> function:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nfunction addToCart(product, quantity, unitCost) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    payload: { product, quantity, unitCost }\r\n  }\r\n}\r\n\u2026\r\n<\/code><\/pre>\n<p>Here, we&#8217;ve defined a function that returns a plain JavaScript object. Nothing fancy. Before we dispatch, let&#8217;s add some code that will allow us to listen to store event changes. Place this code right after the <code>console.log()<\/code> statement:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nlet unsubscribe = store.subscribe(() =&gt;\r\n  console.log(store.getState())\r\n);\r\n\r\nunsubscribe();\r\n<\/code><\/pre>\n<p>Next, let&#8217;s add several items to the cart by dispatching actions to the store. Place this code before <code>unsubscribe()<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">\u2026\r\nstore.dispatch(addToCart('Coffee 500gm', 1, 250));\r\nstore.dispatch(addToCart('Flour 1kg', 2, 110));\r\nstore.dispatch(addToCart('Juice 2L', 1, 250));\r\n<\/code><\/pre>\n<p>For clarification purposes, I&#8217;ll illustrate below how the entire code should look after making all the above changes:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ src\/index.js\r\n\r\nimport { createStore } from \"redux\";\r\nimport { combineReducers } from 'redux';\r\n\r\nconst productsReducer = function(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst initialState = {\r\n  cart: [\r\n    {\r\n      product: 'bread 700g',\r\n      quantity: 2,\r\n      unitCost: 90\r\n    },\r\n    {\r\n      product: 'milk 500ml',\r\n      quantity: 1,\r\n      unitCost: 47\r\n    }\r\n  ]\r\n}\r\n\r\nconst ADD_TO_CART = 'ADD_TO_CART';\r\n\r\nconst cartReducer = function(state=initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART: {\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, action.payload]\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction addToCart(product, quantity, unitCost) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    payload: {\r\n      product,\r\n      quantity,\r\n      unitCost\r\n    }\r\n  }\r\n}\r\n\r\nconst allReducers = {\r\n  products: productsReducer,\r\n  shoppingCart: cartReducer\r\n}\r\n\r\nconst rootReducer = combineReducers(allReducers);\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nconsole.log(\"initial state: \", store.getState());\r\n\r\nlet unsubscribe = store.subscribe(() =&gt;\r\n  console.log(store.getState())\r\n);\r\n\r\nstore.dispatch(addToCart('Coffee 500gm', 1, 250));\r\nstore.dispatch(addToCart('Flour 1kg', 2, 110));\r\nstore.dispatch(addToCart('Juice 2L', 1, 250));\r\n\r\nunsubscribe();\r\n<\/code><\/pre>\n<p>After you&#8217;ve saved your code, Chrome should automatically refresh. Check the console tab to confirm that the new items have been added:<\/p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/150602353003-redux-dispatch-actions.png\" alt=\"Redux Actions Dispatched\" \/><\/p>\n<p style=\"font-size: 0.8em; text-align:center; margin: 0;\">Figure 3: Redux Actions Dispatched<\/p>\n<\/div>\n",
      "protected": false
    },
    "author": 72591,
    "featured_media": 160087,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      407
    ],
    "tags": [
      9543,
      7829,
      9802,
      9122
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160086"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72501"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160086"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160086\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160087"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160086"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160086"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160086"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 106717,
    "date": "2017-09-26T08:00:27",
    "date_gmt": "2017-09-26T15:00:27",
    "guid": {
      "rendered": "http:\/\/www.sitepoint.com\/?p=106717"
    },
    "modified": "2017-09-25T14:18:28",
    "modified_gmt": "2017-09-25T21:18:28",
    "slug": "invision-marvel-justinmind-prototyping-tools-compared",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/invision-marvel-justinmind-prototyping-tools-compared\/",
    "title": {
      "rendered": "15 Top Prototyping Tools Go Head-to-Head"
    },
    "content": {
      "rendered": "<p>As the number and variety of prototyping tools continues to grow, it\u2019s becoming harder and harder to figure out which tools meet what needs, and who they\u2019re suitable for. Since we first wrote this article back in 2015, countless design apps have dominated (and changed) the prototyping space.<\/p>\n<p>Stakeholder feedback and user testing is now taking a far greater role in UI design and this new generation of tools aims to connect these two previously separate stages of the design process. Clients <em>want<\/em> to be involved, and email isn\u2019t cutting it anymore. Some apps like UXPin are also taking care of the wireframing stages, whereas others like InVision App are bridging the gap between designer and developer by offering design handoff tools.<\/p>\n<p>Plus, there\u2019s now a clear divide between desktop tools with cloud sharing (Adobe XD, Axure, Balsamiq, Sketch+InVision) and collaborative online tools (Figma, UXPin, Fluid UI, Proto.io).<\/p>\n<p>Many of these tools appear to be converging on a feature set that defines the role of the modern user experience designer. <em>TL;DR\u2014here\u2019s a swift comparison of prototyping tools.<\/em><\/p>\n<h2><a href=\"http:\/\/www.adobe.com\/products\/experience-design.html\" target=\"_blank\">Adobe XD<\/a><\/h2>\n<p><iframe src=\"\/\/video.tv.adobe.com\/v\/16395t1?autoplay=false&#038;quality=6\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Adobe may have been caught napping during the rise of Sketch, but they\u2019re rapidly making up for it with Adobe XD. Launched in March 2016, and still in beta as of July 2017, it\u2019s the latest addition to Adobe\u2019s Creative Cloud Suite. While you can prototype interactions in Sketch with the help of the Craft Plugin, Adobe XD impressively offers these tools right out of the box, so designers are already <a href=\"https:\/\/www.sitepoint.com\/adobe-xd-sketch-will-result-best-ux\/\">comparing Adobe XD to Sketch<\/a> like longtime rivals.<\/p>\n<p>It\u2019s definitely worth a look if you\u2019re interested in a tool that covers all your bases (low-fidelity prototyping, <em>high-fidelity<\/em> prototyping, user flows, sharing and feedback) in a single app.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Available for macOS and Windows<\/li>\n<li>Everything you need in a single app<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Still in beta (although pleasantly mature as a design app)<\/li>\n<li>Plugin workflow non-existent, you\u2019re locked into the Adobe ecosystem<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.invisionapp.com\/craft\" target=\"_blank\">InVision App (with Sketch and Craft)<\/a><\/h2>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/198067805?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/153858834?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>InVision App is the largest and most successful design collaboration tool currently on the market, the primary go-to tool for serious designers and enterprise teams alike. With tools like whiteboard collaboration, dynamic prototyping, comments, device preview, video calling, user testing, version control and design handoff, InVision is already a colossal force in the prototyping space, but when you factor in its Sketch and Photoshop integrations, it becomes an all-in-one design suite, especially when you throw in Craft, the Sketch\/Photoshop Plugin that brings a lot of that functionality directly into your design app of choice.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Powerful, mature platform<\/li>\n<li>Fully-integrated with Sketch for high-fidelity design<\/li>\n<li>Constantly being updated with new features<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Feature-set can be a little overwhelming at first<\/li>\n<li>Sketch is only available for macOS users only (but you <em>can<\/em> pair InVision with Photoshop on Windows, although Photoshop isn\u2019t strictly a UI design tool)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/marvelapp.com\/\" target=\"_blank\">Marvel App<\/a><\/h2>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/153059286\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>A very strong favourite for those looking for simpler, friendlier alternatives to InVision App. Marvel App has excelled at creating a prototyping tool that works for both advanced UX designers and those simply looking to communicate high and low fidelity concepts. Plus, while they champion working with Sketch, they also offer component libraries to allow for a complete online workflow in Marvel. Marvel App also recently integrated fan-favourite <a href=\"https:\/\/marvelapp.com\/pop\/\">POP<\/a>, which allows designers to transform their pen\/paper ideas into iPhone and Android apps.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Great support for transitions for additional realism<\/li>\n<li>Friendlier for non-designers, especially when giving feedback<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Web based only<\/li>\n<li>No offline designing<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.uxpin.com\/\" target=\"_blank\">UXPin<\/a><\/h2>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/3Hh-FOPJBFs?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>UXPin is the most complete online solution for UX designers in terms of their offering. While you can import from Sketch and Photoshop, you can also design complex and responsive interfaces with UXPin\u2019s built-in libraries, making UXPin something of a wireframing tool as well. With their <a href=\"https:\/\/www.uxpin.com\/products\/uxpin-systems\">design systems<\/a> features, UXPin becomes one of the most complex tools in terms of automated documentation, designer\/developer handoffs and collaborative features.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Responsive design with breakpoints<\/li>\n<li>Powerful animations (<em>not just linking screens<\/em>)<\/li>\n<li>Complete design collaboration and handoff solution<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>A little pricey versus the competition at $49\/user\/month<\/li>\n<li>Additional features increase the complexity of use<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/webflow.com\/\" target=\"_blank\">Webflow<\/a><\/h2>\n<p>Webflow is a visual tool for designing responsive websites that also exports clean code\u2014it removes the headache of going from <em>design<\/em> to <em>published on the web<\/em>. Competing as much with WordPress as it does with Sketch App, Webflow lets you design fully functional responsive websites incorporating back-end (API) data and can automatically deploy to fully scalable, worry-free hosting with a single click of a button. It\u2019s basically Adobe Dreamweaver for the modern-day designer who cares about clean code and mobile-friendly web design.<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/Ymn1sPuNMt8?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Real data can be included (from APIs\/JSON\/etc)<\/li>\n<li>Creates high-quality, reusable code<\/li>\n<li>Responsive websites can be designed and deployed with ease<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong>\n<\/p>\n<ul>\n<li>Not useful for designing native mobile apps<\/li>\n<li>Requires some knowledge of HTML\/CSS to be at its most effective<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.figma.com\/\" target=\"_blank\">Figma<\/a><\/h2>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/ex9rP3SEHW4?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>A somewhat recent addition to the prototyping space, Figma boasts the most mesmerising real-time design collaboration features of any prototyping tool while modelling its feature-set on many of the intuitive design tools of Sketch and Adobe XD (such as symbols and device preview), along with a bunch of tools usually reserved for the online crowd (such as versioning and design handoff). Version 2.0, launched in July 2017, includes a prototyping mode with hotspots and developer handoffs to further streamline the design workflow. It works in the browser, on macOS, <em>and<\/em> on WIndows, although it sometimes can be slow.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Real-time collaborative design features are second-to-none<\/li>\n<li>Fully-featured, ideal for designers from start to finish<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Figma can can be laggy at time, especially with real-time collaboration<\/li>\n<\/ul>\n<h2>9 More Prototyping Tools Worth Considering<\/h2>\n<h3><a href=\"https:\/\/www.fluidui.com\/\" target=\"_blank\">Fluid UI<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/179337002?color=46A8FB&#038;title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>With a strong focus on simplicity and communication, Fluid UI includes built-in high and low fidelity component libraries, live team collaboration, device previews and video presentations making it a top-notch solution for designers, product managers and founders alike.<\/p>\n<h3><a href=\"https:\/\/proto.io\/\" target=\"_blank\">Proto.io<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/172378883?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Mature and feature-rich, Proto.io is best used by designers looking to create high-fidelity and highly-animated prototypes in the browser.<\/p>\n<h3><a href=\"https:\/\/www.axure.com\/\" target=\"_blank\">Axure RP 8<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/FaSKeCPC_Uo?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Established way back in 2003, Axure is an excellent choice for UX designers who need to create specifications for designs and animations in supreme detail. Axure\u2019s includes support for conditional flow interactions, dynamic content and adaptive\/responsive design, as well as high and low-fidelity prototyping. Axure is a serious tool for serious designers.<\/p>\n<h3><a href=\"https:\/\/framer.com\/\" target=\"_blank\">Framer Studio\/Framer JS<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/ElJOsCzm05U?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Straddling the line between design and code, Framer Studio allows a designer to create stunningly detailed animations with a minimal amount of coding (it uses a simplified version of JavaScript called CoffeeScript) and integrates well with other tools like Sketch and Figma. You\u2019ll have to code animations and interactions, but the possibilities are essentially endless.<\/p>\n<h3><a href=\"https:\/\/www.mockplus.com\/\" target=\"_blank\">Mockplus<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/hLYQOljR4eI?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Mockplus is a wireframing and low-fidelity prototyping tool with a relatively simple learning curve and support for Windows, macOS, iOS <em>and<\/em> Android. With over 200 built-in components and 3,000 icons to help you build mockups quickly, Mockplus is a fairly solid rapid prototyping solution for teams using a range of devices and operating systems.<\/p>\n<h3><a href=\"https:\/\/www.justinmind.com\/\" target=\"_blank\">Justinmind<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/221875381\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Justinmind is a feature-rich desktop app that\u2019s surprisingly maintained fantastic usability for a tool that\u2019s been growing in features for 8 years. Although not as mainstream as InVision and Adobe XD, it\u2019s fairly easy to use and designers can create clickable wireframes and functional, high-fidelity prototypes with no trouble at all. Definitely a reliable choice.<\/p>\n<h3><a href=\"https:\/\/flinto.com\" target=\"_blank\">Flinto<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/137078262\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Flinto is a macOS desktop app with a lighter web-based alternative called Flinto Lite, where both have a strong focus on high-fidelity mobile app prototyping with customisable animations. Flinto has an interesting pricing structure which sets it apart\u2014Flinto for macOS is $99 one time, and Flinto Lite is $20\/month but also comes with Flinto for macOS. If you\u2019re a designer that works alone, Flinto for macOS the cheaper, smarter solution.<\/p>\n<h3><a href=\"https:\/\/atomic.io\/\" target=\"_blank\">Atomic.io<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/139398787?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Atomic App is a smart choice if you need high-fidelity prototyping with solid Sketch integration. Atomic.io offers dynamic data (like editable form fields in preview), importable data, and the ability to create reusable animations that can be reapplied (like Sketch Symbols for animations). Pretty impressive considering Atomic.io only exists on the web!<\/p>\n<h3><a href=\"https:\/\/www.hotgloo.com\/\" target=\"_blank\">Hotgloo<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/173753393\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Originally a Flash app that operated in the browser, HotGloo has (understandably) been rearchitected from the ground up in HTML5. Features added include a library of over 2000 elements, and real-time team collaboration. Hotgloo is extremely affordable at a low $13\/m for 4-designer team, and offers support not only for wireframing and low-fidelity prototyping apps and websites, but also wearables. A suitable choice for design teams on a budget.<\/p>\n<h2>Animation Prototyping Tools<\/h2>\n<h3><a href=\"https:\/\/origami.design\/\" target=\"_blank\">Origami Studio<\/a><\/h3>\n<p>Origami is Facebook\u2019s design app. Designs from Sketch can be copied over into Origami where the mighty animation features will let you explore different animation with endless creativity. Origami comes with preview apps for iOS and Android, however the core app is only available for macOS users. Prototyping is limited specifically to animations.<\/p>\n<h3><a href=\"http:\/\/principleformac.com\/\" target=\"_blank\">Principle for Mac<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/vFrivX021-A?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Principle is another macOS-based tool with a focus on animation, and although it comes at a steep cost of $129\/user, it has a very happy customer base. Principle lets you import from Sketch and preview designs on their iOS app, but there\u2019s no Android app for testing, sadly.<\/p>\n<h3><a href=\"https:\/\/kiteapp.co\/\" target=\"_blank\">Kite Compositor<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/tzwjR-g47Ns?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Kite Compositor really sets itself apart as an animation tool with the ability to create native code for iOS and macOS apps. Kite App is for Apple users, to help you design for Apple.<\/p>\n<h2>Wireframing Tool \u2260 Prototyping Tool<\/h2>\n<p>Prototyping doesn\u2019t necessarily = wireframing. You can create wireframes of high(er)-fidelity mockups (designers that enjoy sketching lo-fi mockups usually more onto wireframes afterwards), and you can also prototype low-fidelity mockups in a wireframe <em>style<\/em>, which is why some prototyping apps also include wireframing tools (such as Axure and UXPin, which I mentioned above). If there are any other prototyping tools that you think deserve a special mention, let us know in the comments!<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>As the number and variety of prototyping tools continues to grow, it\u2019s becoming harder and harder to figure out which tools meet what needs, and who they\u2019re suitable for. Since we first wrote this article back in 2015, countless design apps have dominated (and changed) the prototyping space.<\/p>\n<p>Stakeholder feedback and user testing is now taking a far greater role in UI design and this new generation of tools aims to connect these two previously separate stages of the design process. Clients <em>want<\/em> to be involved, and email isn\u2019t cutting it anymore. Some apps like UXPin are also taking care of the wireframing stages, whereas others like InVision App are bridging the gap between designer and developer by offering design handoff tools.<\/p>\n<p>Plus, there\u2019s now a clear divide between desktop tools with cloud sharing (Adobe XD, Axure, Balsamiq, Sketch+InVision) and collaborative online tools (Figma, UXPin, Fluid UI, Proto.io).<\/p>\n<p>Many of these tools appear to be converging on a feature set that defines the role of the modern user experience designer. <em>TL;DR\u2014here\u2019s a swift comparison of prototyping tools.<\/em><\/p>\n<h2><a href=\"http:\/\/www.adobe.com\/products\/experience-design.html\" target=\"_blank\">Adobe XD<\/a><\/h2>\n<p><iframe src=\"\/\/video.tv.adobe.com\/v\/16395t1?autoplay=false&#038;quality=6\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Adobe may have been caught napping during the rise of Sketch, but they\u2019re rapidly making up for it with Adobe XD. Launched in March 2016, and still in beta as of July 2017, it\u2019s the latest addition to Adobe\u2019s Creative Cloud Suite. While you can prototype interactions in Sketch with the help of the Craft Plugin, Adobe XD impressively offers these tools right out of the box, so designers are already <a href=\"https:\/\/www.sitepoint.com\/adobe-xd-sketch-will-result-best-ux\/\">comparing Adobe XD to Sketch<\/a> like longtime rivals.<\/p>\n<p>It\u2019s definitely worth a look if you\u2019re interested in a tool that covers all your bases (low-fidelity prototyping, <em>high-fidelity<\/em> prototyping, user flows, sharing and feedback) in a single app.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Available for macOS and Windows<\/li>\n<li>Everything you need in a single app<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Still in beta (although pleasantly mature as a design app)<\/li>\n<li>Plugin workflow non-existent, you\u2019re locked into the Adobe ecosystem<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.invisionapp.com\/craft\" target=\"_blank\">InVision App (with Sketch and Craft)<\/a><\/h2>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/198067805?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/153858834?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>InVision App is the largest and most successful design collaboration tool currently on the market, the primary go-to tool for serious designers and enterprise teams alike. With tools like whiteboard collaboration, dynamic prototyping, comments, device preview, video calling, user testing, version control and design handoff, InVision is already a colossal force in the prototyping space, but when you factor in its Sketch and Photoshop integrations, it becomes an all-in-one design suite, especially when you throw in Craft, the Sketch\/Photoshop Plugin that brings a lot of that functionality directly into your design app of choice.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Powerful, mature platform<\/li>\n<li>Fully-integrated with Sketch for high-fidelity design<\/li>\n<li>Constantly being updated with new features<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Feature-set can be a little overwhelming at first<\/li>\n<li>Sketch is only available for macOS users only (but you <em>can<\/em> pair InVision with Photoshop on Windows, although Photoshop isn\u2019t strictly a UI design tool)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/marvelapp.com\/\" target=\"_blank\">Marvel App<\/a><\/h2>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/153059286\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>A very strong favourite for those looking for simpler, friendlier alternatives to InVision App. Marvel App has excelled at creating a prototyping tool that works for both advanced UX designers and those simply looking to communicate high and low fidelity concepts. Plus, while they champion working with Sketch, they also offer component libraries to allow for a complete online workflow in Marvel. Marvel App also recently integrated fan-favourite <a href=\"https:\/\/marvelapp.com\/pop\/\">POP<\/a>, which allows designers to transform their pen\/paper ideas into iPhone and Android apps.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Great support for transitions for additional realism<\/li>\n<li>Friendlier for non-designers, especially when giving feedback<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Web based only<\/li>\n<li>No offline designing<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.uxpin.com\/\" target=\"_blank\">UXPin<\/a><\/h2>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/3Hh-FOPJBFs?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>UXPin is the most complete online solution for UX designers in terms of their offering. While you can import from Sketch and Photoshop, you can also design complex and responsive interfaces with UXPin\u2019s built-in libraries, making UXPin something of a wireframing tool as well. With their <a href=\"https:\/\/www.uxpin.com\/products\/uxpin-systems\">design systems<\/a> features, UXPin becomes one of the most complex tools in terms of automated documentation, designer\/developer handoffs and collaborative features.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Responsive design with breakpoints<\/li>\n<li>Powerful animations (<em>not just linking screens<\/em>)<\/li>\n<li>Complete design collaboration and handoff solution<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>A little pricey versus the competition at $49\/user\/month<\/li>\n<li>Additional features increase the complexity of use<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/webflow.com\/\" target=\"_blank\">Webflow<\/a><\/h2>\n<p>Webflow is a visual tool for designing responsive websites that also exports clean code\u2014it removes the headache of going from <em>design<\/em> to <em>published on the web<\/em>. Competing as much with WordPress as it does with Sketch App, Webflow lets you design fully functional responsive websites incorporating back-end (API) data and can automatically deploy to fully scalable, worry-free hosting with a single click of a button. It\u2019s basically Adobe Dreamweaver for the modern-day designer who cares about clean code and mobile-friendly web design.<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/Ymn1sPuNMt8?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Real data can be included (from APIs\/JSON\/etc)<\/li>\n<li>Creates high-quality, reusable code<\/li>\n<li>Responsive websites can be designed and deployed with ease<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong>\n<\/p>\n<ul>\n<li>Not useful for designing native mobile apps<\/li>\n<li>Requires some knowledge of HTML\/CSS to be at its most effective<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/www.figma.com\/\" target=\"_blank\">Figma<\/a><\/h2>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/ex9rP3SEHW4?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>A somewhat recent addition to the prototyping space, Figma boasts the most mesmerising real-time design collaboration features of any prototyping tool while modelling its feature-set on many of the intuitive design tools of Sketch and Adobe XD (such as symbols and device preview), along with a bunch of tools usually reserved for the online crowd (such as versioning and design handoff). Version 2.0, launched in July 2017, includes a prototyping mode with hotspots and developer handoffs to further streamline the design workflow. It works in the browser, on macOS, <em>and<\/em> on WIndows, although it sometimes can be slow.<\/p>\n<p><strong>Strengths<\/strong><\/p>\n<ul>\n<li>Real-time collaborative design features are second-to-none<\/li>\n<li>Fully-featured, ideal for designers from start to finish<\/li>\n<\/ul>\n<p><strong>Weaknesses<\/strong><\/p>\n<ul>\n<li>Figma can can be laggy at time, especially with real-time collaboration<\/li>\n<\/ul>\n<h2>9 More Prototyping Tools Worth Considering<\/h2>\n<h3><a href=\"https:\/\/www.fluidui.com\/\" target=\"_blank\">Fluid UI<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/179337002?color=46A8FB&#038;title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>With a strong focus on simplicity and communication, Fluid UI includes built-in high and low fidelity component libraries, live team collaboration, device previews and video presentations making it a top-notch solution for designers, product managers and founders alike.<\/p>\n<h3><a href=\"https:\/\/proto.io\/\" target=\"_blank\">Proto.io<\/a><\/h3>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/172378883?title=0&#038;byline=0&#038;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Mature and feature-rich, Proto.io is best used by designers looking to create high-fidelity and highly-animated prototypes in the browser.<\/p>\n<h3><a href=\"https:\/\/www.axure.com\/\" target=\"_blank\">Axure RP 8<\/a><\/h3>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/FaSKeCPC_Uo?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Established way back in 2003, Axure is an excellent choice for UX designers who need to create specifications for designs and animations in supreme detail. Axure\u2019s includes support for conditional flow interactions, dynamic content and adaptive\/responsive design, as well as high and low-fidelity prototyping. Axure is a serious tool for serious designers.<\/p>\n",
      "protected": false
    },
    "author": 72587,
    "featured_media": 160061,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      8572,
      6131,
      3109,
      8599,
      3095,
      8760,
      3047,
      9230,
      5925,
      3087,
      8005,
      412,
      422,
      8601
    ],
    "tags": [
      9927,
      11560,
      11205,
      10803,
      11559,
      11558,
      11183,
      11556,
      9797,
      10568,
      10569,
      7410,
      11557,
      8332
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/106717"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72587"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=106717"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/106717\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160061"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=106717"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=106717"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=106717"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160016,
    "date": "2017-09-26T06:00:05",
    "date_gmt": "2017-09-26T13:00:05",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160016"
    },
    "modified": "2017-09-23T11:47:19",
    "modified_gmt": "2017-09-23T18:47:19",
    "slug": "css-font-display-future-font-rendering-web",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/css-font-display-future-font-rendering-web\/",
    "title": {
      "rendered": "CSS font-display: The Future of Font Rendering on the Web"
    },
    "content": {
      "rendered": "<p>One of the downsides of using web fonts is that if a font is not available on a user\u2019s device, it must be downloaded. This means that before the font becomes available the browser has to decide how to handle the display of any block of text that uses that font. And it needs to do so in a way that doesn\u2019t significantly impact the user experience and perceived performance.<\/p>\n<p>In the course of time, browsers have adopted several <a href=\"https:\/\/webkit.org\/blog\/6643\/improved-font-loading\/\">strategies<\/a> to mitigate this problem. But they do this in <a href=\"https:\/\/tabatkins.github.io\/specs\/css-font-display\/#intro\">different ways<\/a> and out of the control of developers, who have had to <a href=\"https:\/\/www.zachleat.com\/web\/comprehensive-webfonts\/\">devise<\/a> several techniques and workarounds to overcome these issues.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506191784fontdisplay.png\" alt=\"Using Chrome DevTools to test font -display\" width=\"900\" height=\"300\" class=\"aligncenter size-full wp-image-160034\" \/><\/p>\n<p>Enter the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/@font-face\/font-display\">font-display descriptor<\/a> for the <code>@font-face<\/code> at-rule. This CSS feature introduces a way to standardize these behaviors and provide more control to developers.<\/p>\n\n<h2 id=\"using-font-display\">Using <code>font-display<\/code><\/h2>\n<p>Before looking in detail at the various features offered by <code>font-display<\/code>, let\u2019s briefly consider how you might use the feature in your CSS.<\/p>\n<p>First of all, <code>font-display<\/code> is not a CSS property but, as mentioned in the intro, it is a <a href=\"https:\/\/www.w3.org\/TR\/REC-CSS2\/fonts.html#font-descriptions\">descriptor<\/a> for the <code>@font-face<\/code> at-rule. This means that it must be used inside a <code>@font-face<\/code> rule, as showed in the following code:<\/p>\n<pre><code class='language-css'>@font-face {\r\n  font-family: 'Saira Condensed';\r\n  src: url(fonts\/sairacondensed.woff2) format('woff2');\r\n  font-display: swap;\r\n}<\/code><\/pre>\n<p>In this snippet I\u2019m defining a <code>swap<\/code> value for the font <code>Saira Condensed<\/code>.<\/p>\n<p>The keywords for all the available values are:<\/p>\n<ul>\n<li><code>auto<\/code><\/li>\n<li><code>block<\/code><\/li>\n<li><code>swap<\/code><\/li>\n<li><code>fallback<\/code><\/li>\n<li><code>optional<\/code><\/li>\n<\/ul>\n<p>The initial value for <code>font-display<\/code> is <code>auto<\/code>.<\/p>\n<p>In later sections I\u2019ll go over each of these values in detail. But first, let\u2019s look at the time period that the browser uses to determine the font to be rendered. When discussing each of the values, I\u2019ll explain the different aspects of the timeline and how these behave for each value.<\/p>\n<h2 id=\"the-font-display-timeline\">The <code>font-display<\/code> Timeline<\/h2>\n<p>At the core of this feature is the concept of the <strong>font-display timeline<\/strong>. The font loading time, starting from its request and ending with its successful loading or failure, can be divided into three consecutive periods that dictate how a browser should render the text. These three periods are as follows:<\/p>\n<ul>\n<li><strong>The block period<\/strong>. During this period, the browser renders the text with an <em>invisible<\/em> fallback font. If the requested font successfully loads, the text is re-rendered with that requested font. The invisible fallback font acts as a blank placeholder for the text. This reduces layout shifting when the re-rendering is performed.<\/li>\n<li><strong>The swap period<\/strong>. If the desired font is not yet available, the fallback font is used, but this time the text is visible. Again, if the loading font comes in, it is used. <\/li>\n<li><strong>The failure period<\/strong>. If the font does not become available, the browser doesn\u2019t wait for it, and the text will be displayed with the fallback font on the duration of the current page visit. Note that this doesn\u2019t necessarily mean that the font loading is aborted; instead, the browser can decide to continue it, so that the font will be ready for use on successive page visits by the same user.<\/li>\n<\/ul>\n<p>Adjusting the duration of such periods allows you to configure a custom text rendering strategy. In particular, these durations can collapse to zero or extend to infinity, as I\u2019ll show you in the following sections.<\/p>\n<p>But these durations cannot be explicitly assigned by the developer. This possibility was examined in an early stage of the specification, but <a href=\"https:\/\/plus.google.com\/+IlyaGrigorik\/posts\/a3Yn3jB4wjA\">was dropped<\/a>. Instead, a set of predefined keyword values that can handle the majority of use cases are provided, as outlined in the previous section.<\/p>\n<p>Let\u2019s look at how each of these keywords manages the font loading and display process.<\/p>\n<h2 id=\"font-display-auto\"><code>font-display: auto<\/code><\/h2>\n<p>This value tells the browser to adopt the default font display behavior chosen by the browser. Often this strategy is similar to the next value, <code>block<\/code>.<\/p>\n<h2 id=\"font-display-block\"><code>font-display: block<\/code><\/h2>\n<p>With this value, after a short block period (the specification recommends a duration of three seconds), the swap period extends to infinity. This means that in this circumstance the failure period is absent.<\/p>\n<p>While the browser briefly waits for the requested font, it renders the text with the invisible fallback font; after that, if the font is not yet available, the fallback font is made visible; and whenever the download completes, the browser re-renders the text with the wanted font.<\/p>\n<p>You can watch this behavior in the following video, which uses <a href=\"https:\/\/codepen.io\/SitePoint\/pen\/mBOVKN\">a simple test page<\/a> that incorporates a specific web font for its heading:<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');<\/script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-160016-1\" width=\"900\" height=\"458\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190296fontdisplay01.mp4?_=1\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190296fontdisplay01.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190296fontdisplay01.mp4<\/a><\/video><\/div>\n<p><\/p>\n<p>At the beginning of page load, the heading is invisible but it is there, in the DOM. After about three seconds, if the font is not yet available, the text is made visible with the fallback font. In the video demo, I\u2019m mimicking poor network conditions using Chrome DevTools\u2019 <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/network-performance\/network-conditions\">network throttling<\/a> feature. Finally, when the font manages to download, the heading is re-rendered with it.<\/p>\n<h2 id=\"font-display-swap\"><code>font-display: swap<\/code><\/h2>\n<p>With this value, the block period collapses to 0 and the swap period extends to infinity. Therefore, here too, the failure period is missing.<\/p>\n<p>In other words, the browser doesn\u2019t wait for the font but instead immediately renders the text with the fallback font; then, whenever the font is available, the text is re-rendered with it.<\/p>\n<p>Let\u2019s verify this:<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-160016-2\" width=\"900\" height=\"459\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190492fontdisplay02.mp4?_=2\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190492fontdisplay02.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190492fontdisplay02.mp4<\/a><\/video><\/div>\n<p><\/p>\n<h2 id=\"font-display-fallback\"><code>font-display: fallback<\/code><\/h2>\n<p>This is the first value that incorporates the failure period. After a very short block period (100 ms is recommended), the swap period now has a short duration (3s is recommended). As a result, if the requested font is not ready at the end of this period, the text will display using the fallback font for the duration of the page visit. This avoids disturbing the page visitor with a late layout shift that could be jarring to the user experience.<\/p>\n<p>In this first video below, the font loads after more than six seconds, thus it is never swapped in:<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-160016-3\" width=\"900\" height=\"459\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190532fontdisplay03.mp4?_=3\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190532fontdisplay03.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190532fontdisplay03.mp4<\/a><\/video><\/div>\n<p><\/p>\n<p>In the next video, the font loads faster, before the timeout of the swap period kicks in, so the font is used as expected:<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-160016-4\" width=\"900\" height=\"459\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190629fontdisplay04.mp4?_=4\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190629fontdisplay04.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190629fontdisplay04.mp4<\/a><\/video><\/div>\n<p><\/p>\n<h2 id=\"font-display-optional\"><code>font-display: optional<\/code><\/h2>\n<p>When I first read the specification, I found the names assigned to the font display strategies not so clear. This is even pointed out in the specification itself, which <a href=\"https:\/\/tabatkins.github.io\/specs\/css-font-display\/#issue-d2da4906\">suggests<\/a> future versions of the spec use names that better illustrate the intended use of each strategy, proposing the following alternatives:<\/p>\n<ul>\n<li><code>requires<\/code> for <code>block<\/code><\/li>\n<li><code>important<\/code> for <code>swap<\/code><\/li>\n<li><code>preferable<\/code> for <code>fallback<\/code><\/li>\n<\/ul>\n<p>But the <code>optional<\/code> value is expected to remain unchanged. Indeed this value nicely captures the essence of the behavior it triggers. In this case, the font is considered optional for the rendering of the page, essentially telling the browser: <em>if the font is already available, use it, otherwise it doesn\u2019t matter, go ahead with the fallback font; the font can be ready for use on future page visits<\/em>.<\/p>\n<p>With this value, the font display timeline has a short block period (again, the spec recommends a 100 ms time interval) and a zero-duration swap period. Hence the failure period immediately follows the block period, meaning that if the font is not readily available, it will not be used for the duration of the page visit. But the font could eventually be fully downloaded in the background and so it would become available for immediate rendering on future page loads.<\/p>\n<p>But I should point out here that, especially under poor network conditions, the user agent is free to abort or even to not begin the font download. This is so as to not unnecessarily impact the quality of the network connection. Therefore the site is still usable but the font won\u2019t be immediately available on future page loads.<\/p>\n<p>In the video below, the test page is loaded without throttling the network. The font is downloaded quickly, but only after the short block period, so the text is displayed with the fallback font for all duration of the visit.<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-160016-5\" width=\"900\" height=\"459\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190646fontdisplay05.mp4?_=5\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190646fontdisplay05.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190646fontdisplay05.mp4<\/a><\/video><\/div>\n<p><\/p>\n<p>In the next video, the page is reloaded under the same network conditions, but this time with the cache enabled, to simulate a second visit:<\/p>\n<div style=\"width: 900px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-160016-6\" width=\"900\" height=\"459\" preload=\"metadata\" controls=\"controls\"><source type=\"video\/mp4\" src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190663fontdisplay06.mp4?_=6\" \/><a href=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190663fontdisplay06.mp4\">https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1506190663fontdisplay06.mp4<\/a><\/video><\/div>\n<p><\/p>\n<p>And there you have it, the heading now renders with the desired web font.<\/p>\n<p>Before moving on, note the extremely short duration of around 100 ms recommended for the <code>block<\/code> period when using the <code>fallback<\/code> and <code>optional<\/code> values. This is to allow a brief period for a quick-loading font (or one loading from the cache) to display before using the fallback font, thus avoiding a &#8220;flash of unstyled text&#8221;, or FOUT.<\/p>\n<p>I actually wondered why the block period collapses to zero when using <code>font-display: swap<\/code>, instead of using the same short interval as <code>optional<\/code>. It turns out, <a href=\"https:\/\/github.com\/tabatkins\/specs\/issues\/53\">there is an open issue<\/a> in the spec\u2019s GitHub repo to make \u2018swap\u2019 use the same \u201ctiny block period\u201d as others.<\/p>\n<h2 id=\"about-the-fallback-font\">About the Fallback Font<\/h2>\n<p>In the above discussion, several times I mentioned the fallback font. But where does this come from?<\/p>\n<p>The fallback font is the first available font present in the font stack defined using the <code>font-family<\/code> property on the element in question.<\/p>\n<p>For example, on the test page, the <code>font-family<\/code> value for the heading is:<\/p>\n<pre><code class='language-css'>h1 {\r\n  font-family: 'Saira Condensed', Arial, \"Helvetica Neue\", Helvetica, sans-serif;\r\n}<\/code><\/pre>\n<p>This can be verified (see the video above for <code>optional<\/code>), for example, on a Windows machine, which uses Arial as the rendered font.<\/p>\n<h2 id=\"support\">Support<\/h2>\n<p>At the time of writing support for the <code>font-display<\/code> descriptor looks as follows:<\/p>\n<ul>\n<li>Chrome has supported it since <a href=\"https:\/\/www.chromestatus.com\/feature\/4799947908055040\">version 60<\/a><\/li>\n<li>Opera has supported it since version 47<\/li>\n<li><a href=\"https:\/\/platform-status.mozilla.org\/#css-font-display\">It&#8217;s in development<\/a> for Firefox and has been available behind a flag since version 46.<\/li>\n<li>Regarding Safari, the WebKit platform status reports that it is <a href=\"https:\/\/webkit.org\/status\/#specification-css-font-display\">in development<\/a><\/li>\n<li>There is <a href=\"https:\/\/developer.microsoft.com\/en-us\/microsoft-edge\/platform\/status\/?q=font\">no indication yet<\/a> that Microsoft Edge will support it anytime soon. There is a <a href=\"https:\/\/wpdev.uservoice.com\/forums\/257854-microsoft-edge-developer\/suggestions\/14653365-prevent-fout-and-control-font-loading-with-css-fon\">ticket<\/a> on the Microsoft Edge Developer Feedback site where it is possible to vote for the implementation of this feature.<\/li>\n<\/ul>\n<p>Please refer to <a href=\"http:\/\/caniuse.com\/#feat=css-font-rendering-controls\">caniuse.com<\/a> for up-to-date support information.<\/p>\n<p>It is worth noting that <code>font-display<\/code> support cannot be tested by feature queries, because, as mentioned above, it is not a CSS property but a font descriptor. <a href=\"https:\/\/github.com\/bramstein\/fontfaceobserver\/issues\/62#issuecomment-234790586\">In this GitHub issue<\/a> you\u2019ll find some discussion on how to properly detect this feature.<\/p>\n<p>Once it has been detected that <code>font-display<\/code> is not supported, several fallback strategies are possible, but this is out the scope of this article. The article <a href=\"https:\/\/www.zachleat.com\/web\/comprehensive-webfonts\/\">A Comprehensive Guide to Font Loading Strategies<\/a> by Zach Leatherman presents an exhaustive survey of available solutions.<\/p>\n<h2 id=\"usage-with-google-fonts\">Usage with Google Fonts<\/h2>\n<p>You may have noticed that the font used in the demo page is from Google Fonts, but it is not loaded in the usual way, i.e., linking to the stylesheet provided by the font provider. Instead, I just copied the URL of the font found in that stylesheet and used that URL in my custom <code>@font-face<\/code> rule. I had to do this because, as seen in the usage section, <code>font-display<\/code> must be specified inside the <code>font-face<\/code> rule.<\/p>\n<p>Is there a better and more Google Fonts-friendly way? Are Google Fonts and other third-party font foundries going to support <code>font-display<\/code>?<\/p>\n<p>There is <a href=\"https:\/\/github.com\/google\/fonts\/issues\/358\">an open issue<\/a> on the Google Fonts GitHub repo where this is discussed. Add your +1 to show your interest in this feature!<\/p>\n<p>Also, it\u2019s worth mentioning that the <a href=\"https:\/\/www.w3.org\/TR\/css-fonts-4\/\">CSS Fonts Module Level 4<\/a> proposes the usage of <code>font-display<\/code> as a descriptor for <a href=\"https:\/\/www.w3.org\/TR\/css-fonts-4\/#font-display-font-feature-values\">@font-feature-values<\/a>, to enable developers to set a display policy for <code>@font-face<\/code> rules that are not directly under their control. But this is not yet implemented by any user agent.<\/p>\n<h2 id=\"final-words\">Final Words<\/h2>\n<p>I hope this gives you a decent overview of the <code>font-display<\/code> descriptor and how this feature foreshadows a strong future for font rendering on the web.<\/p>\n<p>Although this article didn\u2019t discuss specific use cases for the different strategies implemented by <code>font-display<\/code>, the specification illustrates use cases with some clear examples, and several of the cited references elaborate on this topic. So in addition to the basics I\u2019ve covered here, you\u2019ll have more to look over in the resources I\u2019ve referenced.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>One of the downsides of using web fonts is that if a font is not available on a user\u2019s device, it must be downloaded. This means that before the font becomes available the browser has to decide how to handle the display of any block of text that uses that font. And it needs to do so in a way that doesn\u2019t significantly impact the user experience and perceived performance.<\/p>\n<p>In the course of time, browsers have adopted several <a href=\"https:\/\/webkit.org\/blog\/6643\/improved-font-loading\/\">strategies<\/a> to mitigate this problem. But they do this in <a href=\"https:\/\/tabatkins.github.io\/specs\/css-font-display\/#intro\">different ways<\/a> and out of the control of developers, who have had to <a href=\"https:\/\/www.zachleat.com\/web\/comprehensive-webfonts\/\">devise<\/a> several techniques and workarounds to overcome these issues.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506191784fontdisplay.png\" alt=\"Using Chrome DevTools to test font -display\" width=\"900\" height=\"300\" class=\"aligncenter size-full wp-image-160034\" \/><\/p>\n<p>Enter the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/@font-face\/font-display\">font-display descriptor<\/a> for the <code>@font-face<\/code> at-rule. This CSS feature introduces a way to standardize these behaviors and provide more control to developers.<\/p>\n<h2 id=\"using-font-display\">Using <code>font-display<\/code><\/h2>\n<p>Before looking in detail at the various features offered by <code>font-display<\/code>, let\u2019s briefly consider how you might use the feature in your CSS.<\/p>\n<p>First of all, <code>font-display<\/code> is not a CSS property but, as mentioned in the intro, it is a <a href=\"https:\/\/www.w3.org\/TR\/REC-CSS2\/fonts.html#font-descriptions\">descriptor<\/a> for the <code>@font-face<\/code> at-rule. This means that it must be used inside a <code>@font-face<\/code> rule, as showed in the following code:<\/p>\n<p>[code language=&#8221;css&#8221;]<br \/>\n@font-face {<br \/>\n  font-family: &#8216;Saira Condensed&#8217;;<br \/>\n  src: url(fonts\/sairacondensed.woff2) format(&#8216;woff2&#8217;);<br \/>\n  font-display: swap;<br \/>\n}<br \/>\n[\/code]<\/p>\n<p>In this snippet I\u2019m defining a <code>swap<\/code> value for the font <code>Saira Condensed<\/code>.<\/p>\n<p>The keywords for all the available values are:<\/p>\n<ul>\n<li><code>auto<\/code><\/li>\n<li><code>block<\/code><\/li>\n<li><code>swap<\/code><\/li>\n<li><code>fallback<\/code><\/li>\n<li><code>optional<\/code><\/li>\n<\/ul>\n<p>The initial value for <code>font-display<\/code> is <code>auto<\/code>.<\/p>\n<p>In later sections I\u2019ll go over each of these values in detail. But first, let\u2019s look at the time period that the browser uses to determine the font to be rendered. When discussing each of the values, I\u2019ll explain the different aspects of the timeline and how these behave for each value.<\/p>\n<h2 id=\"the-font-display-timeline\">The <code>font-display<\/code> Timeline<\/h2>\n<p>At the core of this feature is the concept of the <strong>font-display timeline<\/strong>. The font loading time, starting from its request and ending with its successful loading or failure, can be divided into three consecutive periods that dictate how a browser should render the text. These three periods are as follows:<\/p>\n<ul>\n<li><strong>The block period<\/strong>. During this period, the browser renders the text with an <em>invisible<\/em> fallback font. If the requested font successfully loads, the text is re-rendered with that requested font. The invisible fallback font acts as a blank placeholder for the text. This reduces layout shifting when the re-rendering is performed.<\/li>\n<li><strong>The swap period<\/strong>. If the desired font is not yet available, the fallback font is used, but this time the text is visible. Again, if the loading font comes in, it is used. <\/li>\n<li><strong>The failure period<\/strong>. If the font does not become available, the browser doesn\u2019t wait for it, and the text will be displayed with the fallback font on the duration of the current page visit. Note that this doesn\u2019t necessarily mean that the font loading is aborted; instead, the browser can decide to continue it, so that the font will be ready for use on successive page visits by the same user.<\/li>\n<\/ul>\n",
      "protected": false
    },
    "author": 72255,
    "featured_media": 160034,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      408,
      6523,
      3859
    ],
    "tags": [
      11552,
      11551,
      11267,
      9808,
      3112,
      4132
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160016"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72255"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160016"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160016\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160034"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160016"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160016"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160016"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160076,
    "date": "2017-09-25T10:00:47",
    "date_gmt": "2017-09-25T17:00:47",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160076"
    },
    "modified": "2017-09-25T23:10:24",
    "modified_gmt": "2017-09-26T06:10:24",
    "slug": "sharing-react-components-easily-bit",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/sharing-react-components-easily-bit\/",
    "title": {
      "rendered": "Sharing React Components Easily with Bit"
    },
    "content": {
      "rendered": "<p class=\"wp-special\">For a high-quality, in-depth introduction to React, you can&#8217;t go past Canadian full-stack developer Wes Bos. <a href=\"https:\/\/ReactForBeginners.com\/friend\/SITEPOINT\">Try his course here<\/a>, and use the code<strong> SITEPOINT<\/strong> to get <strong>25% off <\/strong>and to help support SitePoint.<\/p>\n<p><strong>This is the age of components. Frameworks built for UI components, such as React, enable us to split our UI into individual, reusable pieces that can be worked with in isolation.<\/strong><\/p>\n\n<p>In many ways, React components are not that different from other encapsulated code functionalities. They can get defined inputs (usually \u201cprops\u201d or ES6 classes) and return UI-oriented elements that will appear as part of your UI.<\/p>\n<p>Individual components are often used across different parts of our UI. The problem is, organizing and sharing our components across teams and applications often presents a real challenge. Sharing components can give us fast and simple access to components written and used by our team, and help make sure our codebase is made of nothing but what we actually need.<\/p>\n<p><a href=\"https:\/\/bitsrc.io\">Bit<\/a> is an open-source project that enables us to instantly share components from our existing source code with our team, and use them across our different projects without changing our source code, file structure or the tools we work with. Let\u2019s see how.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/03\/1489112613bit.gif\" alt=\"Managing code components with Bit\" width=\"999\" height=\"628\" class=\"aligncenter size-full wp-image-150431\" \/><\/p>\n<h2 id=\"sharingcomponentsitsnotthatsimple\">Sharing Components: It\u2019s Not That Simple<\/h2>\n<p>Three major issues stand in the way of easily organizing and sharing source-code components: discoverability, maintainability, and the overhead of sharing.<\/p>\n<p>Discoverability is a major issue. A developer working on my team on or a different team has no way of easily discovering and browsing the components available throughout our source code when choosing, upgrading or installing the ones they need with the tools of their choice.<\/p>\n<p>Maintainability is another problem while sharing common components across different parts of our application. Maintainability problems range from simple duplications, to the complexity of maintaining multiple repos and packages and keeping control over the dependency chain. This can quickly get out of hand.<\/p>\n<p>Up until now, sharing our components was a bit of a challenge. It forced us to either duplicate code or invest a lot of time and effort maintaining large packages &#8212; which also weigh down our build and install time.<\/p>\n<p>When trying to find and use an individual React component (Slider, Spinner etc.) we usually ended up installing vast static libraries containing a whole bunch of stuff we didn\u2019t need. It also made it next to impossible to discover or use individual components created by our team or the community.<\/p>\n<p>In some ways, this is very much like using a CD-ROM just to listen to a single song. Using Bit, we can easily share any set of components, making them individually available to anyone on our team.<\/p>\n<h2 id=\"sharingcomponentswithbit\">Sharing Components with Bit<\/h2>\n<p>If you haven&#8217;t heard of <a href=\"https:\/\/github.com\/teambit\/bit\">Bit\u2019s latest release<\/a>, it&#8217;s an open-source project that allows us to share components from our existing source code with our team and across projects.<\/p>\n<p>By decoupling the representation of components from our actual file structure, Bit tracks the components within our source code and enables us to quickly turn any file or subset of files into a reusable component. Using simple glob patterns (see below), the components within an entire library or project can be instantly shared without changing our source code itself or our file structure.<\/p>\n<p>Any component (installed with Bit, and very soon with NPM or Yarn) can be individually shared, discovered and used in any application or project. It can also be modified and updated from any project environment, choosing if and how to let our friends update our components from their own projects (and vice versa).<\/p>\n<p><img src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1505430636Screen-Shot-2017-09-14-at-10.17.39-AM.png\" alt=\"A Netflix hero banner, showing featured content\" \/><\/p>\n<p>Components can be grouped together into \u201cScopes\u201d, which are collections that can be thought of as \u201cplaylists\u201d of individual components sharing common attributes. When using the free Bit community site, each component is presented along with its rendered visuals, test results, semi-automatically generated docs and more.<\/p>\n<p>Regardless of the tools we use to install our components, we can gain full control over our dependency graph and get a clear picture of the components used across our projects. Sharing code can also help keep our UI aligned with our design principles, as we can avoid changes when implementing the same components again and again in different projects.<\/p>\n<p>Let\u2019s try an example.<\/p>\n<h2 id=\"quickstart\">Quick Start<\/h2>\n<p>Bit is a distributed, open-source project, so you can set up an organized collection (called a Scope &#8212; see a <a href=\"https:\/\/bitsrc.io\/bit\/movie-app#styles\">demo Scope<\/a> and a <a href=\"https:\/\/github.com\/itaymendel\/movie-app\">demo project<\/a>) on any machine. However, you can also use the free Bit community hub (called bitsrc) to host, view and collaborate on your components and collections. You can sign up for a free account <a href=\"https:\/\/bitsrc.io\/\">here<\/a> (it will always be free for open source).<\/p>\n<p>Okay, so let\u2019s get going and turn a bunch of source code components (e.g. your shared library or a bunch of components &#8212; React or something else) into a shared collection.<\/p>\n<ol>\n<li>\n<p>First thing\u2019s first: install Bit in our environment.<\/p>\n<\/li>\n<li>\n<p>Then, we can initialize Bit for our project:<\/p>\n<pre><code class=\"bash language-bash\">bit init\r\n<\/code><\/pre>\n<\/li>\n<li>\n<p>Our next step would be to track the components within our project using <code>bit add<\/code>. This command allows Bit to track any subset of files or directories as a reusable component. In this case, we&#8217;ll use a glob pattern to turn an entire library into an organized collection of reusable components:<\/p>\n<pre><code class=\"bash language-bash\">bit add src\/library_name\/*.js\r\n#Tracked 24 new components\r\n<\/code><\/pre>\n<\/li>\n<li>\n<p>The next thing we want to do is to commit our changes:<\/p>\n<pre><code class=\"jsx language-jsx\">bit commit -am 'committed my first tracked code components'\r\n<\/code><\/pre>\n<\/li>\n<li>\n<p>The next step is exporting our components into a remote organized collection (Scope), sharing them across project, applications and teams.<\/p>\n<\/li>\n<\/ol>\n<p>Bit is distributed, so you can set up a remote Scope on any machine using simple commands.<\/p>\n<p>However, it&#8217;s simpler to use the centralized free Hub for Bit components.<br \/>\nYou can set up a free Bit Scope at <a href=\"https:\/\/bitsrc.io\">Bit\u2019s community hub<\/a> and follow the <a href=\"https:\/\/docs.bitsrc.io\/en\/article\/create-scope-in-bitsrc-7152738\">setup instructions<\/a>.<\/p>\n<p>Once you have the Scope ready, run the export command:<\/p>\n<pre><code class=\"jsx language-jsx\">bit export username.scope_name\r\n\/\/ username.scope_name is your Scope name.\r\n<\/code><\/pre>\n<p>That\u2019s it!<\/p>\n<p>You can now browse your Scope on bitsrc, and view your newly created collection! You can check out the component\u2019s rendered visuals, semi-automatically parsed documentation (parsed directly from the jsdocs), test results and more.<\/p>\n<p>You can invite others to collaborate on this Scope, or find, update and use individual components from any project you\u2019re working on.<\/p>\n<h3 id=\"importingandrequiringcomponents\">Importing and requiring components<\/h3>\n<p>Bit import enables you to install a component as an application part in any destination on your project\u2019s file system.<\/p>\n<p>Let&#8217;s import the component we\u2019ve just created to a new project:<\/p>\n<ol>\n<li>create a new project<\/li>\n<li>initialize a new scope using the <code>bit init<\/code> command<\/li>\n<li>import the component.<\/li>\n<\/ol>\n<pre><code class=\"jsx language-jsx\">bit import user_name.scope_name\/namespace\/component_name\r\n<\/code><\/pre>\n<p>Note that \u201ccomponents\u201d is the namespace of the imported components. You can use your own naming conventions to organize your collection.<\/p>\n<p>The component is now in the components directory, ready to be used in your code:<\/p>\n<pre><code class=\"jsx language-jsx\">const component = require('.\/components\/namespace\/component_name');\r\n<\/code><\/pre>\n<h3 id=\"modifycomponents\">Modify components<\/h3>\n<p>If you&#8217;re using a code component that requires modification, you can make a change right in the context of your project. Once the change has been made and checked for validity, you should commit it back, and export.<\/p>\n<p>That\u2019s it. This kind of workflow saves the overhead of maintaining complex packages, and allows our team to get updates and stay in sync. It also enables us to test our components before they reach production.<\/p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses<\/h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/07\/1501203893wesbos.jpg' \/>\n        <\/div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners<\/span><\/a><\/div>\n            <div class='f-large'>Wes Bos<\/div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'<\/strong> at checkout to get <strong>25% off<\/strong>.<\/div>\n          <\/div>\n        <\/div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'><\/div>\n            <\/div>\n          <\/a>\n        <\/div>\n      <\/div>\n    \n  \n<h2 id=\"whatjusthappened\">What Just Happened?<\/h2>\n<p>Using Bit, we tracked multiple components inside our shared React components library. To organize them into a shared collection, we instantly exported them all at once to a collection called a \u201cremote Scope\u201d.<\/p>\n<p>Instead of a static shared library, we now have an organized collection of reusable components that can be shared and used anywhere we need. We can cut our app\u2019s build time and weight, avoid duplications, make sure our UI looks the same on any page, and share these components with our team.<\/p>\n<p>We can also find, update or use any component from any context &#8212; and even build or test it in any application environment.<\/p>\n<p>To organize your own components into shared collections, feel free to <a href=\"https:\/\/bitsrc.io\/\">get started<\/a> with Bit or visit the <a href=\"https:\/\/github.com\/teambit\/bit\">project on GitHub<\/a>.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong>This is the age of components. Frameworks built for UI components, such as React, enable us to split our UI into individual, reusable pieces that can be worked with in isolation.<\/strong><\/p>\n<p>In many ways, React components are not that different from other encapsulated code functionalities. They can get defined inputs (usually \u201cprops\u201d or ES6 classes) and return UI-oriented elements that will appear as part of your UI.<\/p>\n<p>Individual components are often used across different parts of our UI. The problem is, organizing and sharing our components across teams and applications often presents a real challenge. Sharing components can give us fast and simple access to components written and used by our team, and help make sure our codebase is made of nothing but what we actually need.<\/p>\n<p><a href=\"https:\/\/bitsrc.io\">Bit<\/a> is an open-source project that enables us to instantly share components from our existing source code with our team, and use them across our different projects without changing our source code, file structure or the tools we work with. Let\u2019s see how.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/03\/1489112613bit.gif\" alt=\"Managing code components with Bit\" width=\"999\" height=\"628\" class=\"aligncenter size-full wp-image-150431\" \/><\/p>\n<h2 id=\"sharingcomponentsitsnotthatsimple\">Sharing Components: It\u2019s Not That Simple<\/h2>\n<p>Three major issues stand in the way of easily organizing and sharing source-code components: discoverability, maintainability, and the overhead of sharing.<\/p>\n<p>Discoverability is a major issue. A developer working on my team on or a different team has no way of easily discovering and browsing the components available throughout our source code when choosing, upgrading or installing the ones they need with the tools of their choice.<\/p>\n<p>Maintainability is another problem while sharing common components across different parts of our application. Maintainability problems range from simple duplications, to the complexity of maintaining multiple repos and packages and keeping control over the dependency chain. This can quickly get out of hand.<\/p>\n<p>Up until now, sharing our components was a bit of a challenge. It forced us to either duplicate code or invest a lot of time and effort maintaining large packages &#8212; which also weigh down our build and install time.<\/p>\n<p>When trying to find and use an individual React component (Slider, Spinner etc.) we usually ended up installing vast static libraries containing a whole bunch of stuff we didn\u2019t need. It also made it next to impossible to discover or use individual components created by our team or the community.<\/p>\n<p>In some ways, this is very much like using a CD-ROM just to listen to a single song. Using Bit, we can easily share any set of components, making them individually available to anyone on our team.<\/p>\n<h2 id=\"sharingcomponentswithbit\">Sharing Components with Bit<\/h2>\n<p>If you haven&#8217;t heard of <a href=\"https:\/\/github.com\/teambit\/bit\">Bit\u2019s latest release<\/a>, it&#8217;s an open-source project that allows us to share components from our existing source code with our team and across projects.<\/p>\n<p>By decoupling the representation of components from our actual file structure, Bit tracks the components within our source code and enables us to quickly turn any file or subset of files into a reusable component. Using simple glob patterns (see below), the components within an entire library or project can be instantly shared without changing our source code itself or our file structure.<\/p>\n<p>Any component (installed with Bit, and very soon with NPM or Yarn) can be individually shared, discovered and used in any application or project. It can also be modified and updated from any project environment, choosing if and how to let our friends update our components from their own projects (and vice versa).<\/p>\n<p><img src=\"https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/09\/1505430636Screen-Shot-2017-09-14-at-10.17.39-AM.png\" alt=\"A Netflix hero banner, showing featured content\" \/><\/p>\n<p>Components can be grouped together into \u201cScopes\u201d, which are collections that can be thought of as \u201cplaylists\u201d of individual components sharing common attributes. When using the free Bit community site, each component is presented along with its rendered visuals, test results, semi-automatically generated docs and more.<\/p>\n<p>Regardless of the tools we use to install our components, we can gain full control over our dependency graph and get a clear picture of the components used across our projects. Sharing code can also help keep our UI aligned with our design principles, as we can avoid changes when implementing the same components again and again in different projects.<\/p>\n<p>Let\u2019s try an example.<\/p>\n",
      "protected": false
    },
    "author": 72279,
    "featured_media": 150431,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      407
    ],
    "tags": [
      11156,
      11155,
      9543,
      7829,
      9802
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160076"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72279"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160076"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160076\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/150431"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160076"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160076"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160076"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160068,
    "date": "2017-09-25T08:00:53",
    "date_gmt": "2017-09-25T15:00:53",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160068"
    },
    "modified": "2017-09-25T23:10:32",
    "modified_gmt": "2017-09-26T06:10:32",
    "slug": "writing-server-rendered-react-apps-next-js",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/writing-server-rendered-react-apps-next-js\/",
    "title": {
      "rendered": "Writing Server-rendered React Apps with Next.js"
    },
    "content": {
      "rendered": "<p class=\"wp-special\">For a high-quality, in-depth introduction to React, you can&#8217;t go past Canadian full-stack developer Wes Bos. <a href=\"https:\/\/ReactForBeginners.com\/friend\/SITEPOINT\">Try his course here<\/a>, and use the code<strong> SITEPOINT<\/strong> to get <strong>25% off <\/strong>and to help support SitePoint.<\/p>\n<p><strong>The dust has settled a bit as far as the JavaScript front-end ecosystem is considered. React has arguably the biggest mindshare at this point, but has a lot of bells and whistles you need to get comfortable with. Vue offers a considerably simpler alternative. And then there are Angular and Ember &#8212; which, while still popular, are not the first recommendations for starting a new project.<\/strong><\/p>\n\n<p>So, while React is the most popular option, it still requires lot of tooling to write production-ready apps. <a href=\"https:\/\/www.npmjs.com\/package\/create-react-app\">Create React App<\/a> solves many of the pain points of starting, but the jury is still out on how long you can go without <a href=\"https:\/\/github.com\/facebookincubator\/create-react-app\/blob\/master\/packages\/react-scripts\/template\/README.md#npm-run-eject\">ejecting<\/a>. And when you start looking into the current best practices around front-end, single-page applications (SPAs) &#8212; like server-side rendering, code splitting, and CSS-in-JS &#8212; it\u2019s a lot to find your way through.<\/p>\n<p>That\u2019s where <a href=\"https:\/\/github.com\/zeit\/next.js\">Next<\/a> comes in.<\/p>\n<h2 id=\"whynext\">Why Next?<\/h2>\n<p>Next provides a simple yet customizable solution to building production-ready SPAs. Remember how web apps were built in PHP (before \u201cweb apps\u201d was even a term)? You create some files in a directory, write your script and you&#8217;re good to deploy. That&#8217;s the kind of simplicity Next aims at, for the JavaScript ecosystem.<\/p>\n<p>Next is not a brand new framework per se. It fully embraces React, but provides a framework on top of that for building SPAs while following best practices. You still write React components. Anything you can do with Next, you can do with a combination of React, Webpack, Babel, one of 17 CSS-in-JS alternatives, lazy imports and what not. But while building with Next, you aren&#8217;t thinking about which CSS-in-JS alternative to use, or how to set up Hot Module Replacement (HMR), or which of many routing options to choose. You&#8217;re just using Next &#8212; and it <em>just works<\/em>.<\/p>\n<blockquote>\n<p>I&#8217;d like to think I know a thing or two about JavaScript, but Next.JS saves me an ENORMOUS amount of time. &#8212; <a href=\"https:\/\/twitter.com\/_ericelliott\/status\/867160902184845312\">Eric Elliott<\/a><\/p>\n<\/blockquote>\n<h2 id=\"gettingstarted\">Getting Started<\/h2>\n<p>Next requires minimal setup. This gets you all the dependencies you need for starting:<\/p>\n<pre><code class=\"bash language-bash\">$ npm install next react react-dom --save\r\n<\/code><\/pre>\n<p>Create a directory for your app, and inside that create a directory called <code>pages<\/code>. The file system is the API. Every <code>.js<\/code> file becomes a route that gets automatically processed and rendered.<\/p>\n<p>Create a file <code>.\/pages\/index.js<\/code> inside your project with these contents:<\/p>\n<pre><code class=\"jsx language-jsx\">export default () =&gt; (\r\n  &lt;div&gt;Hello, Next!&lt;\/div&gt;\r\n)\r\n<\/code><\/pre>\n<p>Populate <code>package.json<\/code> inside your project with this:<\/p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"scripts\": {\r\n    \"dev\": \"next\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\"\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Then just run <code>npm run dev<\/code> in the root directory of your project. Go to <a href=\"http:\/\/localhost:3000\">http:\/\/localhost:3000<\/a> and you should be able to see your app, running in all its glory!<\/p>\n<p>Just with this much you get:<\/p>\n<ul>\n<li>automatic transpilation and bundling (with Webpack and Babel)<\/li>\n<li>Hot Module Replacement<\/li>\n<li>server-side rendering of <code>.\/pages<\/code><\/li>\n<li>static file serving: <code>.\/static\/<\/code> is mapped to <code>\/static\/<\/code>.<\/li>\n<\/ul>\n<p>Good luck doing that with Vanilla React with this much setup!<\/p>\n<h2 id=\"features\">Features<\/h2>\n<p>Let&#8217;s dig into some of the features of modern SPA apps, why they matter, and how they <em>just work<\/em> with Next.<\/p>\n<h3 id=\"automaticcodesplitting\">Automatic code splitting<\/h3>\n<p><strong>Why it Matters?<\/strong><br \/>\nCode splitting is important for ensuring fast time to <a href=\"https:\/\/developers.google.com\/web\/tools\/lighthouse\/audits\/first-meaningful-paint\">first meaningful paint<\/a>. It&#8217;s not uncommon to have JavaScript bundle sizes reaching up to several megabytes these days. Sending all that JavaScript over the wire for every single page is a huge waste of bandwidth.<\/p>\n<p><strong>How to get it with Next<\/strong><br \/>\nWith Next, <em>only<\/em> the declared imports are served with each page. So, let&#8217;s say you have 10 dependencies in your <code>package.json<\/code>, but <code>.\/pages\/index.js<\/code> only uses one of them.<\/p>\n<p><strong>pages\/login.js<\/strong><\/p>\n<pre><code class=\"jsx language-jsx\">import times from 'lodash.times'\r\nexport default () =&gt; (\r\n  return &lt;div&gt;times(5, &lt;h2&gt; Hello, there! &lt;\/h2&gt;)&lt;\/div&gt;;\r\n)\r\n<\/code><\/pre>\n<p>Now, when the user opens the login page, it&#8217;s not going to load <em>all<\/em> the JavaScript, but only the modules required for this page.<\/p>\n<p>So a certain page may have fat imports, like this:<\/p>\n<pre><code>import React from 'react'\r\nimport d3 from 'd3'\r\nimport jQuery from 'jquery'\r\n<\/code><\/pre>\n<p>But this won&#8217;t affect the performance of the rest of the pages. Faster load times FTW.<\/p>\n<h3 id=\"scopedcss\">Scoped CSS<\/h3>\n<p><strong>Why it Matters?<\/strong><br \/>\nCSS rules, by default, are global. Say you have a CSS rule like this:<\/p>\n<pre><code class=\"css language-css\">.title {\r\n  font-size: 40px;\r\n}\r\n<\/code><\/pre>\n<p>Now, you might have two components, <code>Post<\/code> and <code>Profile<\/code>, both of which may have a div with class <code>title<\/code>. The CSS rule you defined is going to apply to both of them. So, you define two rules now, one for selector <code>.post .title<\/code>, the other for <code>.profile .title<\/code>. It&#8217;s manageable for small apps, but you can only think of so many class names.<\/p>\n<p>Scoped CSS lets you define CSS with components, and those rules apply to only those components, making sure that you&#8217;re not afraid of unintended effects every time you touch your CSS.<\/p>\n<p><strong>With Next<\/strong><br \/>\nNext comes with <a href=\"https:\/\/github.com\/zeit\/styled-jsx\">styled-jsx<\/a>, which provides support for isolated scoped CSS. So, you just have a <code>&lt;style&gt;<\/code> component inside your React Component render function:<\/p>\n<pre><code class=\"jsx language-jsx\">export default () =&gt; (\r\n  &lt;div&gt;\r\n    Hello world\r\n    &lt;p&gt;These colors are scoped!&lt;\/p&gt;\r\n\r\n    &lt;style jsx&gt;{\\\r\n      p {\r\n        color: blue;\r\n      }\r\n      div {\r\n        background: red;\r\n      }\r\n    `}&lt;\/style&gt;\r\n  &lt;\/div&gt;\r\n)\r\n<\/code><\/pre>\n<p>You also get the colocation benefits on having the styling (CSS), behavior (JS), and the template (JSX) all in one place. No more searching for the relevant class name to see what styles are being applied to it.<\/p>\n<h3 id=\"dynamicimports\">Dynamic Imports<\/h3>\n<p><strong>Why it matters?<\/strong><br \/>\nDynamic imports let you dynamically load parts of a JavaScript application at runtime. There are several motivations for this, as listed in the <a href=\"https:\/\/github.com\/tc39\/proposal-dynamic-import\">proposal<\/a>:<\/p>\n<blockquote>\n<p>This could be because of factors only known at runtime (such as the user&#8217;s language), for performance reasons (not loading code until it is likely to be used), or for robustness reasons (surviving failure to load a non-critical module).<\/p>\n<\/blockquote>\n<p><strong>With Next<\/strong><br \/>\nNext supports the dynamic import proposal and lets you split code into manageable chunks. So, you can write code like this that dynamically loads a React component after initial load:<\/p>\n<pre><code class=\"jsx language-jsx\">import dynamic from 'next\/dynamic'\r\n\r\nconst DynamicComponentWithCustomLoading = dynamic(\r\n  import('..\/components\/hello2'),\r\n  {\r\n    loading: () =&gt; &lt;p&gt;The component is loading...&lt;\/p&gt;\r\n  }\r\n)\r\n\r\nexport default () =&gt;\r\n  &lt;div&gt;\r\n    &lt;Header \/&gt;\r\n    &lt;DynamicComponentWithCustomLoading \/&gt;\r\n    &lt;p&gt;Main content.&lt;\/p&gt;\r\n  &lt;\/div&gt;\r\n<\/code><\/pre>\n<h3 id=\"routing\">Routing<\/h3>\n<p><strong>Why it matters?<\/strong><br \/>\nA problem with changing pages via JavaScript is that the routes don&#8217;t change with that. During their initial days, SPAs were criticized for breaking the web. These days, most frameworks have some robust routing mechanism. React has the widely used <code>react-router<\/code> package. With Next, however, you don&#8217;t need to install a separate package.<\/p>\n<p><strong>With Next<\/strong><br \/>\nClient-side routing can be enabled via a <code>next\/link<\/code> component. Consider these two pages:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ pages\/index.js\r\nimport Link from 'next\/link'\r\n\r\nexport default () =&gt;\r\n  &lt;div&gt;\r\n    Click{' '}\r\n    &lt;Link href=\"\/contact\"&gt;\r\n      &lt;a&gt;here&lt;\/a&gt;\r\n    &lt;\/Link&gt;{' '}\r\n    to find contact information.\r\n  &lt;\/div&gt;\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ pages\/contact.js\r\nexport default () =&gt; &lt;p&gt;The Contact Page.&lt;\/p&gt;\r\n<\/code><\/pre>\n<p>Not only that, you can add <code>prefetch<\/code> prop to <code>Link<\/code> component, to prefetch pages even before the links are clicked. This enables super-fast transition between routes.<\/p>\n<h3 id=\"serverrendering\">Server rendering<\/h3>\n<p>Most of the JavaScript-based SPAs just don&#8217;t work without JavaScript disabled. However, it doesn&#8217;t have to be that way. Next renders pages on the server, and they can be loaded just like good old rendered web pages when JavaScript is disabled. Every component inside the <code>pages<\/code> directory gets server-rendered automatically and their scripts inlined. This has the added performance advantage of very fast first loads, since you can just send a rendered page without making additional HTTP requests for the JavaScript files.<\/p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses<\/h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/07\/1501203893wesbos.jpg' \/>\n        <\/div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners<\/span><\/a><\/div>\n            <div class='f-large'>Wes Bos<\/div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'<\/strong> at checkout to get <strong>25% off<\/strong>.<\/div>\n          <\/div>\n        <\/div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'><\/div>\n            <\/div>\n          <\/a>\n        <\/div>\n      <\/div>\n    \n  \n<h2 id=\"nextsteps\">Next Steps<\/h2>\n<p>That should be enough to get you interested in Next, and if you&#8217;re working on a web app, or even an Electron-based application, Next provides some valuable abstractions and defaults to build upon.<\/p>\n<p>To learn more about Next, <a href=\"https:\/\/learnnextjs.com\">Learning Next.js<\/a> is an excellent place to start, and may be all you&#8217;ll need.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong>The dust has settled a bit as far as the JavaScript front-end ecosystem is considered. React has arguably the biggest mindshare at this point, but has a lot of bells and whistles you need to get comfortable with. Vue offers a considerably simpler alternative. And then there\u2019s Angular\/Ember which, while still popular, are not the first recommendations for starting a new project.<\/strong><\/p>\n<p>So, while React is the most popular option, it still requires lot of tooling to write production-ready apps. <a href=\"https:\/\/www.npmjs.com\/package\/create-react-app\">Create React App<\/a> solves many of the pain points of starting, but the jury is still out on how long you can go without <a href=\"https:\/\/github.com\/facebookincubator\/create-react-app\/blob\/master\/packages\/react-scripts\/template\/README.md#npm-run-eject\">ejecting<\/a>. And when you start looking into the current best practices around front-end, single-page applications (SPAs) &#8212; like server-side rendering, code splitting, and CSS-in-JS &#8212; it\u2019s a lot to find your way through.<\/p>\n<p>That\u2019s where <a href=\"https:\/\/github.com\/zeit\/next.js\">Next<\/a> comes in.<\/p>\n<h2 id=\"whynext\">Why Next?<\/h2>\n<p>Next provides a simple yet customizable solution to building production-ready SPAs. Remember how web apps were built in PHP (before \u201cweb apps\u201d was even a term)? You create some files in a directory, write your script and you&#8217;re good to deploy. That&#8217;s the kind of simplicity Next aims at, for the JavaScript ecosystem.<\/p>\n<p>Next is not a brand new framework per se. It fully embraces React, but provides a framework on top of that for building SPAs while following best practices. You still write React components. Anything you can do with Next, you can do with a combination of React, Webpack, Babel, one of 17 CSS-in-JS alternatives, lazy imports and what not. But while building with Next, you aren&#8217;t thinking about which CSS-in-JS alternative to use, or how to set up Hot Module Replacement (HMR), or which of many routing options to choose. You&#8217;re just using Next &#8212; and it <em>just works<\/em>.<\/p>\n<blockquote>\n<p>I&#8217;d like to think I know a thing or two about JavaScript, but Next.JS saves me an ENORMOUS amount of time. &#8212; <a href=\"https:\/\/twitter.com\/_ericelliott\/status\/867160902184845312\">Eric Elliott<\/a><\/p>\n<\/blockquote>\n<h2 id=\"gettingstarted\">Getting Started<\/h2>\n<p>Next requires minimal setup. This gets you all the dependencies you need for starting:<\/p>\n<pre><code class=\"bash language-bash\">$ npm install next react react-dom --save\r\n<\/code><\/pre>\n<p>Create a directory for your app, and inside that create a directory called <code>pages<\/code>. The file system is the API. Every <code>.js<\/code> file becomes a route that gets automatically processed and rendered.<\/p>\n<p>Create a file <code>.\/pages\/index.js<\/code> inside your project with these contents:<\/p>\n<pre><code class=\"jsx language-jsx\">export default () =&gt; (\r\n  &lt;div&gt;Hello, Next!&lt;\/div&gt;\r\n)\r\n<\/code><\/pre>\n<p>Populate <code>package.json<\/code> inside your project with this:<\/p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"scripts\": {\r\n    \"dev\": \"next\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\"\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Then just run <code>npm run dev<\/code> in the root directory of your project. Go to <a href=\"http:\/\/localhost:3000\">http:\/\/localhost:3000<\/a> and you should be able to see your app, running in all its glory!<\/p>\n<p>Just with this much you get:<\/p>\n<ul>\n<li>automatic transpilation and bundling (with Webpack and Babel)<\/li>\n<li>Hot Module Replacement<\/li>\n<li>server-side rendering of <code>.\/pages<\/code><\/li>\n<li>static file serving: <code>.\/static\/<\/code> is mapped to <code>\/static\/<\/code>.<\/li>\n<\/ul>\n<p>Good luck doing that with Vanilla React with this much setup!<\/p>\n",
      "protected": false
    },
    "author": 72346,
    "featured_media": 160071,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      407
    ],
    "tags": [
      11562,
      9543,
      7829,
      9802,
      9679
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160068"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72346"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160068"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160068\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160071"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160068"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160068"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160068"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160054,
    "date": "2017-09-24T06:20:25",
    "date_gmt": "2017-09-24T13:20:25",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160054"
    },
    "modified": "2017-09-24T06:20:25",
    "modified_gmt": "2017-09-24T13:20:25",
    "slug": "lets-compare-runcloud-vs-forge-vs-serverpilot",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/lets-compare-runcloud-vs-forge-vs-serverpilot\/",
    "title": {
      "rendered": "Let&#8217;s Compare: RunCloud vs Forge vs ServerPilot"
    },
    "content": {
      "rendered": "<p>When your website or web application has outgrown your shared hosting account, it is time to move it to the cloud, or into a virtual private server (VPS). Nowadays, VPS providers offer better value in terms of CPU and RAM resources than the shared hosting counterparts. However, I can recall when I wanted to move my website to Amazon Web Services a few years ago, and it took me days to deploy the server and get it ready with PHP, MySQL and Apache.<\/p>\n\n<p>Fortunately, that is not the case today as we have the help of some cool tools and third party services.<\/p>\n<p>I took a look at three similar services &#8211; RunCloud, ServerPilot and Laravel Forge &#8211; and compared them to see which performs best. These are SaaS tools that can help deploy, configure, manage, and monitor VPS on any cloud hosting providers like AWS, Linode, Vultr, Digital Ocean, and others.<\/p>\n<h2 id=\"runcloudiohttpsruncloudio\"><a href=\"https:\/\/runcloud.io\">RunCloud.io<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258196runcloud.png\" alt=\"RunCloud\" \/><\/p>\n<p>Registration was easy. You don&#8217;t need a credit card and you can even use your Facebook, Google, or GitHub account. If you don&#8217;t fancy using your social media account, then just use your email address.<\/p>\n<p>With RunCloud, what you need to do is deploy a fresh Ubuntu 16.04 LTS VPS on almost any VPS hosting provider. Throughout this tutorial I used a Linode VPS which costs $5 per month.<\/p>\n<p>When your server is ready, you go back to RunCloud and enter your server details like the IP address to get your connection command. <\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258222runcloud-connect.png\" alt=\"Connecting a Server on RunCloud\" \/><\/p>\n<p>You will get a very long one-line command like this.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258225runcloud-command.png\" alt=\"Command for RunCloud\" \/><\/p>\n<p>All that you need to do is run the command in your server as the root user and let it run. It will probably take about 15 to 20 minutes for the process to complete, and once you are done, you can start to manage your server from within the web panel.<\/p>\n<h3 id=\"managingyourserver\">Managing Your Server<\/h3>\n<p>Next you need to create a Web Application. That is like a virtual host in the web server. When you do that, you can select your PHP version, and you can assign your domain name to the Web Application. You can assign more than one.<\/p>\n<p>The UI is very user friendly and intuitive and you can find whatever you need rather quickly and easily. My most basic need would be to be able to create virtual hosts (Web Application), assign domain names and create databases and perhaps deploy my application from GitHub or any other Git server. There is also a script installer that supports WordPress, Joomla, Concrete5, PHPMyAdmin and a few more common PHP tools.<\/p>\n<p>If you do PHP development and use Git, RunCloud supports deploying your script from GitHub, Bitbucket, Gitlab and also your own custom Git server installation.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258217runcloud-server.png\" alt=\"A server overview\" \/><\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258203runcloud-web-application.png\" alt=\"Managing a web application\" \/><\/p>\n<p>We&#8217;ll look into performance later.<\/p>\n<hr \/>\n<h2 id=\"serverpilothttpsserverpilotio\"><a href=\"https:\/\/serverpilot.io\">ServerPilot<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258171serverpilot.png\" alt=\"ServerPilot\" \/><\/p>\n<p>ServerPilot.io is probably the oldest among the three, and most well-marketed. When I ask around if anybody is using a server management tool, it will probably be ServerPilot.io.<\/p>\n<p>ServerPilot.io has a Free account that you can use with limited features, and there are also the Coach ($10\/mo) and Business ($49\/mo) plans. Please bear in mind, these prices are for server deployments and not per account to ServerPilot.<\/p>\n<p>Coach has more features like free SSL via LetsEncrypt, server health stats and other. The Business package is more like a mini NewRelic or an application performance monitoring service. You can see slow script request, application resources stats and more.<\/p>\n<p>Of course the Free package is good enough, but limited compared to their Coach and Business options.<\/p>\n<h3 id=\"connectingaserver\">Connecting A Server<\/h3>\n<p>This feels similar to RunCloud. You also need a fresh Ubuntu 16.04 VPS server to start. If you have the root password to your server, you don&#8217;t need to copy and paste the installer command via SSH. You can enter your server IP address and your root password, and ServerPilot will get your server ready in a few minutes.<\/p>\n<p>However, if you don&#8217;t want to enter the root password of your server into ServerPilot, then you can opt not to do that. You can get install run command, and copy and paste that via SSH into your server.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258185serverpilot-connect-server.png\" alt=\"Connecting A Server on ServerPilot.io\" \/><\/p>\n<p>Honestly, server deployment process feels pretty smooth and fast. I was amazed with that. Once done, I was redirected to create an App right away. Here, an App is like the virtual host. Once that was done, there is an option to install WordPress. I thought I&#8217;d give that a try. You can also select your PHP version if you want. I selected PHP 7.1.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258181serverpilot-create-app.png\" alt=\"Creating an app on ServerPilot.io\" \/><\/p>\n<h3 id=\"managingyourserver-1\">Managing Your Server<\/h3>\n<p>From registration to deploying a server and getting it up and running, the experience was really good and fast. You get a server running in no time at all.<\/p>\n<p>When WordPress is an install option, I was hoping to see other PHP tools like Joomla and Concrete5 to be available as well. Unfortunately, they are not present, and ServerPilot.io also does not give the option to set where your web root should be other than <code>\/public<\/code>. <\/p>\n<p>Another thing that I was hoping to see is a way to deploy my application from GitHub. I can&#8217;t find that. And I found out from the documentation that if I want to deploy my script via Git, I would still have to do it via SSH.<\/p>\n<p>This is also the case with scheduling or crontab. If you familiar with CPanel, you would hope to have scheduling built into the web panel of ServerPilot. Unfortunately, that is not the case. You can still manage your own crontab via SSH though.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258188serverpilot-app-settings.png\" alt=\"Application settings in ServerPilot.io\" \/><\/p>\n<h2 id=\"laravelforgehttpsforgelaravelcom\"><a href=\"https:\/\/forge.laravel.com\">Laravel Forge<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258230laravel-forge.png\" alt=\"Laravel Forge\" \/><\/p>\n<p>Unfortunately if you just want to try this out, there is no free-level account. Price starts at $15\/mo for the Growth account, and $39\/mo for the Business account. The good thing is, that is for unlimited number of server deployments. However, there is a 5-day free trial for whatever account you choose to get. And if you subscribe for an annual subscription, you get a $40 discount off the Growth account, and $69 off the Business account.<\/p>\n<p>The difference between these two is mainly about adding team members into your account to help you with your server administrations. The Growth account is mostly for personal users while the Business account allows you to add team members to help you out.<\/p>\n<h3 id=\"connectingaserver-1\">Connecting a Server<\/h3>\n<p>Unlike ServerPilot and RunCloud, Laravel Forge will connect to your cloud hosting provider via API and deploy servers there on your behalf. With this, you don&#8217;t have to deploy your server in the cloud hosting provider first, and later enter details into Laravel Forge. Laravel Forge will create them for you. For now, Laravel Forge supports Digital Ocean, AWS and Linode.<\/p>\n<p>For any  cloud hosting providers that are not currently supported, you can still add those into Laravel Forge under the Custom VPS option. There it works pretty much like Server Pilot and RunCloud. You will need a fresh Ubuntu 16.04 64-bit VPS, and later initiate the connect procedure in Laravel Forge. Just like RunCloud, you will need to enter the install script command via SSH.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258243forge-connect-provider.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258238forge-custom-vps.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<h3 id=\"managingyourserver-2\">Managing Your Server<\/h3>\n<p>Laravel Forge has a lot covered when it comes to managing your server. When your server is ready, you create a Site (virtual host). Since Laravel Forge is created by a PHP developer, Git is actually the main method for how you deploy your files. Or, you can get started by installing WordPress.<\/p>\n<p>When creating your site, you are presented with the option to add your domain name. And you can set whether to have the wildcard sub-domain option enabled. However, there is no option for multiple domain names for a single site.<\/p>\n<p>There is also Scheduling, MySQL database management and others. You can also integrate your server with Blackfire.io for application performance monitoring and Papertrail (https:\/\/papertrailapp.com\/) for log analysis.<\/p>\n<p>There was not much on server health information though.<\/p>\n<p>All in all, Laravel Forge was primarily developed to deploy Laravel-based PHP applications with support for other PHP frameworks and scripts added later.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258248forge-app.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258253forge-add-site.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<h2 id=\"performancetesting\">Performance Testing<\/h2>\n<p>Since I deployed three servers using these three tools, I thought I&#8217;d test them out against one another. And just to make things interesting, I figured I would add another LAMP stack that I deployed with Ubuntu 16.04 and <code>tasksel lamp-server<\/code> command.<\/p>\n<p>I know that I am not really pushing the servers to their limits, but I think it is a good indicator to see how well they perform against each other.<\/p>\n<p>To test the servers, I installed WordPress with its default theme and data. Then I installed Siege on a separate server to see how many requests and hits the servers can take. My Siege was set up with 25 concurrent clients settings and one (1) minute testing time.<\/p>\n<p>Just as a side note, I deployed four Linode 1GB VPSes, one for each tool. They all have the same specification and resides on the same datacenter. Siege is on a fifth server.<\/p>\n<p>So here are the results of the tests:<\/p>\n<h4 id=\"firstrun\">First run<\/h4>\n<table>\n<thead>\n<tr>\n<th>Results<\/th>\n<th style=\"text-align:right;\">RunCloud<\/th>\n<th style=\"text-align:right;\">ServerPilot<\/th>\n<th style=\"text-align:right;\">Laravel Forge<\/th>\n<th style=\"text-align:right;\">Tasksel LAMP<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>Transactions (hits)<\/td>\n<td style=\"text-align:right;\">17710<\/td>\n<td style=\"text-align:right;\">12304<\/td>\n<td style=\"text-align:right;\">18278<\/td>\n<td style=\"text-align:right;\">10703<\/td>\n<\/tr>\n<tr>\n<td>Availability (%)<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<\/tr>\n<tr>\n<td>Elapsed time (secs)<\/td>\n<td style=\"text-align:right;\">59.45<\/td>\n<td style=\"text-align:right;\">59.85<\/td>\n<td style=\"text-align:right;\">59.11<\/td>\n<td style=\"text-align:right;\">59.30<\/td>\n<\/tr>\n<tr>\n<td>Data transferred (MB)<\/td>\n<td style=\"text-align:right;\">632.61<\/td>\n<td style=\"text-align:right;\">439.57<\/td>\n<td style=\"text-align:right;\">652.97<\/td>\n<td style=\"text-align:right;\">198.14<\/td>\n<\/tr>\n<tr>\n<td>Response time (secs)<\/td>\n<td style=\"text-align:right;\">0.06<\/td>\n<td style=\"text-align:right;\">0.10<\/td>\n<td style=\"text-align:right;\">0.06<\/td>\n<td style=\"text-align:right;\">0.11<\/td>\n<\/tr>\n<tr>\n<td>Transaction rate (trans\/sec)<\/td>\n<td style=\"text-align:right;\">297.90<\/td>\n<td style=\"text-align:right;\">205.58<\/td>\n<td style=\"text-align:right;\">309.22<\/td>\n<td style=\"text-align:right;\">180.49<\/td>\n<\/tr>\n<tr>\n<td>Throughput (MB\/sec)<\/td>\n<td style=\"text-align:right;\">10.64<\/td>\n<td style=\"text-align:right;\">7.34<\/td>\n<td style=\"text-align:right;\">11.05<\/td>\n<td style=\"text-align:right;\">3.34<\/td>\n<\/tr>\n<tr>\n<td>Concurrency<\/td>\n<td style=\"text-align:right;\">16.95<\/td>\n<td style=\"text-align:right;\">19.66<\/td>\n<td style=\"text-align:right;\">17.26<\/td>\n<td style=\"text-align:right;\">20.42<\/td>\n<\/tr>\n<tr>\n<td>Successful transactions<\/td>\n<td style=\"text-align:right;\">17710<\/td>\n<td style=\"text-align:right;\">12304<\/td>\n<td style=\"text-align:right;\">18278<\/td>\n<td style=\"text-align:right;\">10703<\/td>\n<\/tr>\n<tr>\n<td>Failed transactions<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<\/tr>\n<tr>\n<td>Longest transactions<\/td>\n<td style=\"text-align:right;\">1.36<\/td>\n<td style=\"text-align:right;\">1.83<\/td>\n<td style=\"text-align:right;\">1.57<\/td>\n<td style=\"text-align:right;\">1.66<\/td>\n<\/tr>\n<tr>\n<td>Shortest transactions<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h4 id=\"secondrun\">Second run<\/h4>\n<table>\n<thead>\n<tr>\n<th>Results<\/th>\n<th style=\"text-align:right;\">RunCloud<\/th>\n<th style=\"text-align:right;\">ServerPilot<\/th>\n<th style=\"text-align:right;\">Laravel Forge<\/th>\n<th style=\"text-align:right;\">Tasksel LAMP<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>Transactions (hits)<\/td>\n<td style=\"text-align:right;\">17820<\/td>\n<td style=\"text-align:right;\">13110<\/td>\n<td style=\"text-align:right;\">18386<\/td>\n<td style=\"text-align:right;\">10077<\/td>\n<\/tr>\n<tr>\n<td>Availability (%)<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<td style=\"text-align:right;\">100.00<\/td>\n<\/tr>\n<tr>\n<td>Elapsed time (secs)<\/td>\n<td style=\"text-align:right;\">59.50<\/td>\n<td style=\"text-align:right;\">59.63<\/td>\n<td style=\"text-align:right;\">59.57<\/td>\n<td style=\"text-align:right;\">59.55<\/td>\n<\/tr>\n<tr>\n<td>Data transferred (MB)<\/td>\n<td style=\"text-align:right;\">636.64<\/td>\n<td style=\"text-align:right;\">468.41<\/td>\n<td style=\"text-align:right;\">656.72<\/td>\n<td style=\"text-align:right;\">186.57<\/td>\n<\/tr>\n<tr>\n<td>Response time (secs)<\/td>\n<td style=\"text-align:right;\">0.06<\/td>\n<td style=\"text-align:right;\">0.09<\/td>\n<td style=\"text-align:right;\">0.05<\/td>\n<td style=\"text-align:right;\">0.12<\/td>\n<\/tr>\n<tr>\n<td>Transaction rate (trans\/sec)<\/td>\n<td style=\"text-align:right;\">299.50<\/td>\n<td style=\"text-align:right;\">219.86<\/td>\n<td style=\"text-align:right;\">308.65<\/td>\n<td style=\"text-align:right;\">169.22<\/td>\n<\/tr>\n<tr>\n<td>Throughput (MB\/sec)<\/td>\n<td style=\"text-align:right;\">10.70<\/td>\n<td style=\"text-align:right;\">7.86<\/td>\n<td style=\"text-align:right;\">11.02<\/td>\n<td style=\"text-align:right;\">3.13<\/td>\n<\/tr>\n<tr>\n<td>Concurrency<\/td>\n<td style=\"text-align:right;\">17.18<\/td>\n<td style=\"text-align:right;\">19.31<\/td>\n<td style=\"text-align:right;\">16.97<\/td>\n<td style=\"text-align:right;\">20.54<\/td>\n<\/tr>\n<tr>\n<td>Successful transactions<\/td>\n<td style=\"text-align:right;\">17822<\/td>\n<td style=\"text-align:right;\">13110<\/td>\n<td style=\"text-align:right;\">18386<\/td>\n<td style=\"text-align:right;\">10077<\/td>\n<\/tr>\n<tr>\n<td>Failed transactions<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<td style=\"text-align:right;\">0<\/td>\n<\/tr>\n<tr>\n<td>Longest transactions<\/td>\n<td style=\"text-align:right;\">1.33<\/td>\n<td style=\"text-align:right;\">1.77<\/td>\n<td style=\"text-align:right;\">0.95<\/td>\n<td style=\"text-align:right;\">2.38<\/td>\n<\/tr>\n<tr>\n<td>Shortest transactions<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<td style=\"text-align:right;\">0.00<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Laravel Forge is the best being able to receive over 18000 hits to the server in a minute with 25 client concurrency. RunCloud is second with about 17000 hits to the server. ServerPilot is third where they clocked about 13000 hits. But that is still an improvement over a normal Tasksel LAMP server installation, which was able to take in about 10000 hits to the server over a 1-minute period.<\/p>\n<h4 id=\"performanceresult\">Performance Result<\/h4>\n<ol>\n<li>Laravel Forge<\/li>\n<li>RunCloud<\/li>\n<li>ServerPilot<\/li>\n<li>Tasksel LAMP-server<\/li>\n<\/ol>\n<h2 id=\"conclusions\">Conclusions<\/h2>\n<p>I believe each has it&#8217;s own strength and weakness.<\/p>\n<h3 id=\"runcloud\">RunCloud<\/h3>\n<p>RunCloud has the best web panel, which comes with everything that you need to manage your server. It is almost like your old CPanel for shared hosting accounts. There&#8217;s a Git deployment option, server health information, multiple domains per virtual host, SSH key, firewall options, database management, file manager and editor, and the list goes on. Clearly, feature-wise, RunCloud is the best.<\/p>\n<p>This is also the cheapest option with a huge bang for your buck. Just $10\/mo for unlimited server deployments.<\/p>\n<p>What&#8217;s lacking is the team members option. Also, when it comes to performance, Laravel Forge is better than RunCloud but some may be able to live with that, since the difference is not really that big.<\/p>\n<h3 id=\"serverpilot\">ServerPilot<\/h3>\n<p>I was hoping that ServerPilot would perform well since they have been in the market for a while, but it turns out it&#8217;s is maybe 25% to 30% better than Tasksel, and is at third place after RunCloud.<\/p>\n<p>Their web panel interface is a little disappointing too. It does not offer many features to help you manage your server.<\/p>\n<p>To me, not having Git deployment and scheduling (Crontab) are two big negative points for server management.<\/p>\n<p>Price-wise, after the free level, ServerPilot&#8217;s starts at $10 per server, which is the most expensive option among the three.<\/p>\n<p>One thing that I can praise ServerPilot for is how fast a server gets deployed.<\/p>\n<h3 id=\"laravelforge\">Laravel Forge<\/h3>\n<p>The best thing about Laravel Forge is their server performance. If that is what you want, then this is your choice. Their server outperformed the rest!<\/p>\n<p>API integration also helps in deploying the server without having to do much. Once your Forge account is connected to AWS, DigitalOcean or Linode via API, you don&#8217;t have to go back and forth into your cloud hosting provider to get a server up and running.<\/p>\n<p>The web panel and features, however, are quite basic but better than ServerPilot. You do have Git deployment and scheduling but no server health information. While you get easy wildcard sub-domain implementation, your site on Forge does not provide you the option for multiple domain names.<\/p>\n<p>For more power and additional useful information, you can integrate a third party option like Blackfire.io and Papertrail. That would cost you extra, however.<\/p>\n<p>Which one of these providers do you use? Or none at all? Why?<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>When your website or web application has outgrown your shared hosting account, it is time to move it to the cloud, or into a virtual private server (VPS). Nowadays, VPS providers offer better value in terms of CPU and RAM resources than the shared hosting counterparts. However, I can recall when I wanted to move my website to Amazon Web Services a few years ago, and it took me days to deploy the server and get it ready with PHP, MySQL and Apache.<\/p>\n<p>Fortunately, that is not the case today as we have the help of some cool tools and third party services.<\/p>\n<p>I took a look at three similar services &#8211; RunCloud, ServerPilot and Laravel Forge &#8211; and compared them to see which performs best. These are SaaS tools that can help deploy, configure, manage, and monitor VPS on any cloud hosting providers like AWS, Linode, Vultr, Digital Ocean, and others.<\/p>\n<h2 id=\"runcloudiohttpsruncloudio\"><a href=\"https:\/\/runcloud.io\">RunCloud.io<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258196runcloud.png\" alt=\"RunCloud\" \/><\/p>\n<p>Registration was easy. You don&#8217;t need a credit card and you can even use your Facebook, Google, or GitHub account. If you don&#8217;t fancy using your social media account, then just use your email address.<\/p>\n<p>With RunCloud, what you need to do is deploy a fresh Ubuntu 16.04 LTS VPS on almost any VPS hosting provider. Throughout this tutorial I used a Linode VPS which costs $5 per month.<\/p>\n<p>When your server is ready, you go back to RunCloud and enter your server details like the IP address to get your connection command. <\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258222runcloud-connect.png\" alt=\"Connecting a Server on RunCloud\" \/><\/p>\n<p>You will get a very long one-line command like this.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258225runcloud-command.png\" alt=\"Command for RunCloud\" \/><\/p>\n<p>All that you need to do is run the command in your server as the root user and let it run. It will probably take about 15 to 20 minutes for the process to complete, and once you are done, you can start to manage your server from within the web panel.<\/p>\n<h3 id=\"managingyourserver\">Managing Your Server<\/h3>\n<p>Next you need to create a Web Application. That is like a virtual host in the web server. When you do that, you can select your PHP version, and you can assign your domain name to the Web Application. You can assign more than one.<\/p>\n<p>The UI is very user friendly and intuitive and you can find whatever you need rather quickly and easily. My most basic need would be to be able to create virtual hosts (Web Application), assign domain names and create databases and perhaps deploy my application from GitHub or any other Git server. There is also a script installer that supports WordPress, Joomla, Concrete5, PHPMyAdmin and a few more common PHP tools.<\/p>\n<p>If you do PHP development and use Git, RunCloud supports deploying your script from GitHub, Bitbucket, Gitlab and also your own custom Git server installation.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258217runcloud-server.png\" alt=\"A server overview\" \/><\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258203runcloud-web-application.png\" alt=\"Managing a web application\" \/><\/p>\n<p>We&#8217;ll look into performance later.<\/p>\n<hr \/>\n<h2 id=\"serverpilothttpsserverpilotio\"><a href=\"https:\/\/serverpilot.io\">ServerPilot<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258171serverpilot.png\" alt=\"ServerPilot\" \/><\/p>\n<p>ServerPilot.io is probably the oldest among the three, and most well-marketed. When I ask around if anybody is using a server management tool, it will probably be ServerPilot.io.<\/p>\n<p>ServerPilot.io has a Free account that you can use with limited features, and there are also the Coach ($10\/mo) and Business ($49\/mo) plans. Please bear in mind, these prices are for server deployments and not per account to ServerPilot.<\/p>\n<p>Coach has more features like free SSL via LetsEncrypt, server health stats and other. The Business package is more like a mini NewRelic or an application performance monitoring service. You can see slow script request, application resources stats and more.<\/p>\n<p>Of course the Free package is good enough, but limited compared to their Coach and Business options.<\/p>\n<h3 id=\"connectingaserver\">Connecting A Server<\/h3>\n<p>This feels similar to RunCloud. You also need a fresh Ubuntu 16.04 VPS server to start. If you have the root password to your server, you don&#8217;t need to copy and paste the installer command via SSH. You can enter your server IP address and your root password, and ServerPilot will get your server ready in a few minutes.<\/p>\n<p>However, if you don&#8217;t want to enter the root password of your server into ServerPilot, then you can opt not to do that. You can get install run command, and copy and paste that via SSH into your server.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258185serverpilot-connect-server.png\" alt=\"Connecting A Server on ServerPilot.io\" \/><\/p>\n<p>Honestly, server deployment process feels pretty smooth and fast. I was amazed with that. Once done, I was redirected to create an App right away. Here, an App is like the virtual host. Once that was done, there is an option to install WordPress. I thought I&#8217;d give that a try. You can also select your PHP version if you want. I selected PHP 7.1.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258181serverpilot-create-app.png\" alt=\"Creating an app on ServerPilot.io\" \/><\/p>\n<h3 id=\"managingyourserver-1\">Managing Your Server<\/h3>\n<p>From registration to deploying a server and getting it up and running, the experience was really good and fast. You get a server running in no time at all.<\/p>\n<p>When WordPress is an install option, I was hoping to see other PHP tools like Joomla and Concrete5 to be available as well. Unfortunately, they are not present, and ServerPilot.io also does not give the option to set where your web root should be other than <code>\/public<\/code>. <\/p>\n<p>Another thing that I was hoping to see is a way to deploy my application from GitHub. I can&#8217;t find that. And I found out from the documentation that if I want to deploy my script via Git, I would still have to do it via SSH.<\/p>\n<p>This is also the case with scheduling or crontab. If you familiar with CPanel, you would hope to have scheduling built into the web panel of ServerPilot. Unfortunately, that is not the case. You can still manage your own crontab via SSH though.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258188serverpilot-app-settings.png\" alt=\"Application settings in ServerPilot.io\" \/><\/p>\n<h2 id=\"laravelforgehttpsforgelaravelcom\"><a href=\"https:\/\/forge.laravel.com\">Laravel Forge<\/a><\/h2>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258230laravel-forge.png\" alt=\"Laravel Forge\" \/><\/p>\n<p>Unfortunately if you just want to try this out, there is no free-level account. Price starts at $15\/mo for the Growth account, and $39\/mo for the Business account. The good thing is, that is for unlimited number of server deployments. However, there is a 5-day free trial for whatever account you choose to get. And if you subscribe for an annual subscription, you get a $40 discount off the Growth account, and $69 off the Business account.<\/p>\n<p>The difference between these two is mainly about adding team members into your account to help you with your server administrations. The Growth account is mostly for personal users while the Business account allows you to add team members to help you out.<\/p>\n<h3 id=\"connectingaserver-1\">Connecting a Server<\/h3>\n<p>Unlike ServerPilot and RunCloud, Laravel Forge will connect to your cloud hosting provider via API and deploy servers there on your behalf. With this, you don&#8217;t have to deploy your server in the cloud hosting provider first, and later enter details into Laravel Forge. Laravel Forge will create them for you. For now, Laravel Forge supports Digital Ocean, AWS and Linode.<\/p>\n<p>For any  cloud hosting providers that are not currently supported, you can still add those into Laravel Forge under the Custom VPS option. There it works pretty much like Server Pilot and RunCloud. You will need a fresh Ubuntu 16.04 64-bit VPS, and later initiate the connect procedure in Laravel Forge. Just like RunCloud, you will need to enter the install script command via SSH.<\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258243forge-connect-provider.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<p><img src=\"https:\/\/www.sitepoint.com\/wp-content\/uploads\/2017\/09\/1506258238forge-custom-vps.png\" alt=\"Connecting a Server on Laravel Forge\" \/><\/p>\n<h3 id=\"managingyourserver-2\">Managing Your Server<\/h3>\n<p>Laravel Forge has a lot covered when it comes to managing your server. When your server is ready, you create a Site (virtual host). Since Laravel Forge is created by a PHP developer, Git is actually the main method for how you deploy your files. Or, you can get started by installing WordPress.<\/p>\n<p>When creating your site, you are presented with the option to add your domain name. And you can set whether to have the wildcard sub-domain option enabled. However, there is no option for multiple domain names for a single site.<\/p>\n<p>There is also Scheduling, MySQL database management and others. You can also integrate your server with Blackfire.io for application performance monitoring and Papertrail (https:\/\/papertrailapp.com\/) for log analysis.<\/p>\n",
      "protected": false
    },
    "author": 72586,
    "featured_media": 160046,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5903,
      7887,
      192,
      7889,
      402,
      7891,
      7890,
      37
    ],
    "tags": [
      5946,
      413,
      9420,
      11554,
      1862,
      11555
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160054"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/72586"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160054"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160054\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160046"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160054"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160054"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160054"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160008,
    "date": "2017-09-22T11:00:38",
    "date_gmt": "2017-09-22T18:00:38",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=160008"
    },
    "modified": "2017-09-25T23:10:46",
    "modified_gmt": "2017-09-26T06:10:46",
    "slug": "redux-not-art-structuring-state-react-apps",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/redux-not-art-structuring-state-react-apps\/",
    "title": {
      "rendered": "To Redux or Not: the Art of Structuring State in React Apps"
    },
    "content": {
      "rendered": "<p class=\"wp-special\">For a high-quality, in-depth introduction to React, you can&#8217;t go past Canadian full-stack developer Wes Bos. <a href=\"https:\/\/ReactForBeginners.com\/friend\/SITEPOINT\">Try his course here<\/a>, and use the code<strong> SITEPOINT<\/strong> to get <strong>25% off <\/strong>and to help support SitePoint.<\/p>\n<p><strong>One common trend I find among most Redux developers is a hatred towards <code>setState()<\/code>. A lot of us (yes, I&#8217;ve fallen into this trap many times before) flinch at the sight of <code>setState()<\/code> and try to keep all the data in our Redux store. But, as the complexity of your application grows, this poses several challenges.<\/strong><\/p>\n<p>In this post, I&#8217;ll walk you through various strategies to model your state, and dive into when each of them can be used.<\/p>\n<h2 id=\"gettingstarted\">Getting Started<\/h2>\n\n<p>Redux works with the principle of being the single source of truth for your application state. A new Game of Thrones season is airing now, and I&#8217;m sure everyone&#8217;s excited to know how this is going to unfold. Let&#8217;s build a fun Game of Thrones fan listing page, to understand these concepts in detail.<\/p>\n<p><em>Note: I&#8217;ll be using <code>yarn<\/code> to run the app. If you don&#8217;t have <a href=\"https:\/\/www.sitepoint.com\/yarn-vs-npm\/\">yarn<\/a> set up, replace yarn with <code>npm<\/code>.<\/em><\/p>\n<p>Before we dive in, download the basic skeleton from <a href=\"https:\/\/github.com\/skmvasu\/redux-state-vs-local-state-sp\">the repo<\/a> and run:<\/p>\n<pre><code class=\"bash language-bash\">yarn install\r\nyarn run start\r\n<\/code><\/pre>\n<p>You should see a basic list page with some of your favorite GoT characters listed.<\/p>\n<p><em>Note: We&#8217;ll be using the <a href=\"https:\/\/github.com\/erikras\/ducks-modular-redux\">ducks pattern<\/a> to write our application. It reduces unnecessary module imports and cuts down on a lot of boilerplate.<\/em><\/p>\n<h2 id=\"introtoredux\">Intro to Redux<\/h2>\n<p>The scope of this article is to help you structure your Redux apps. It assumes a basic knowledge of the library. I&#8217;ll give a brief overview of Redux concepts that will help you follow the rest of the article better. If you&#8217;re familiar with how these works, feel free to skip this section.<\/p>\n<p>All Redux apps make use of four important constructs: actions, reducers, a store, and containers.<\/p>\n<h3 id=\"actions\">Actions<\/h3>\n<p>An <strong>action<\/strong> is an intent to update the state. It could be triggered by a network call, or a user clicking a button. Actions have two parts:<\/p>\n<ol>\n<li><strong>Action type<\/strong>. A unique identifier representing an action.<\/li>\n<li><strong>Payload<\/strong>. Any metadata that&#8217;s associated with the action. For instance, if we make a network request to fetch a list of movies, the response from the server is the payload.<\/li>\n<\/ol>\n<p>For this example, we&#8217;ll be using a library called <code>redux-actions<\/code> to create actions.<\/p>\n<h3 id=\"reducers\">Reducers<\/h3>\n<p>A <strong>reducer<\/strong> is a function that listens for an action and returns a new state representation.<\/p>\n<h3 id=\"store\">Store<\/h3>\n<p>An application can be divided into many reducers, representing various parts of the page. A <strong>store<\/strong> brings all these together and keeps the app state intact.<\/p>\n<h3 id=\"containers\">Containers<\/h3>\n<p><strong>Containers<\/strong> connect your app state and actions with the component, passing them down as props.<\/p>\n<p>To get a deep understanding of how this works, I&#8217;d encourage you to first look at the <a href=\"https:\/\/egghead.io\/courses\/getting-started-with-redux\">free introduction series by Dan Abramov<\/a>. <\/p>\n<p><!-- Replace with link to SP into to Redux --><\/p>\n<h2 id=\"splitappdataanduistate\">Split App Data and UI State<\/h2>\n<p>The list page is nice, but the names don&#8217;t give any context to people who are new to the GoT universe. Let&#8217;s extend the component to render the character description as well:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/GoTCharacter.js\r\n\r\nexport const CharacterRow = ({character}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;\r\n\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>While this solves the problem, our designers feel that the page looks clumsy, and it&#8217;s a better idea to collapse this information till users want it. There are three different approaches we can take to solve this problem.<\/p>\n<h3 id=\"thesetstateapproach\">The <code>setState<\/code> approach<\/h3>\n<p>The simplest way to achieve this in React is using <code>setState()<\/code> to store the data within the component itself:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/GoTCharacter.js\r\n\r\nexport class StatefulCharacterRow extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show_description: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {character} = this.props;\r\n    return (&lt;div className=\"row\"&gt;\r\n      &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n      &lt;a href=\"#\" onClick={() =&gt; this.setState({\r\n        show_description: !this.state.show_description})} &gt;\r\n        {this.state.show_description ? 'collapse' : 'expand'}\r\n      &lt;\/a&gt;\r\n      {this.state.show_description &amp;&amp;\r\n        &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n    &lt;\/div&gt;);\r\n  }\r\n};\r\n<\/code><\/pre>\n<h3 id=\"thereduxapproach\">The Redux approach<\/h3>\n<p>Using <code>setState()<\/code> is fine as long as the state we&#8217;re dealing with is only local to the component. If, for instance, we want to put in place an &#8220;expand all&#8221; function, it will be difficult to handle this with just React.<\/p>\n<p>Let&#8217;s see how we can move this to Redux:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\r\n\/\/ \u2026\r\nexport const toggleCharacterDescription = createAction(\r\n  FlixActions.TOGGLE_CHARACTER_DESCRIPTION, (character) =&gt; ({character})\r\n);\r\n\r\nexport default (current_state, action) =&gt; {\r\n  const state = current_state || default_state;\r\n\r\n  switch (action.type) {\r\n    case FlixActions.TOGGLE_CHARACTER_DESCRIPTION:\r\n      return {...state, characters: state.characters.map(char =&gt; {\r\n        if (char.id === action.payload.character.id) {\r\n          return {...char,show_description: !char.show_description};\r\n        }\r\n\r\n        return char;\r\n      })}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ GoTCharactersContainer.js\r\n\r\nimport { connect } from 'react-redux';\r\nimport GoTCharacters from '.\/GoTCharacters';\r\nimport {toggleCharacterDescription} from '.\/FlickDuck';\r\n\r\nconst mapStateToProps = (state) =&gt; ({\r\n  ...state.flick\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =&gt; ({\r\n  toggleCharacterDescription : (data) =&gt; dispatch(toggleCharacterDescription(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoTCharacters);\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ GoTCharacters.js\r\n\r\nconst GoTCharacters = ({characters,toggleCharacterDescription}) =&gt; {\r\n  return (\r\n    &lt;div className=\"characters-list\"&gt;\r\n      {characters.map(char =&gt; (\r\n        &lt;CharacterRow\r\n          character={char}\r\n          toggleCharacterDescription={toggleCharacterDescription}\r\n          key={char.id}\/&gt;\r\n      ))}\r\n    &lt;\/div&gt;\r\n  );\r\n};\r\n\r\nexport const CharacterRow = ({character, toggleCharacterDescription}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;a href=\"#\" onClick={toggleCharacterDescription.bind(null, character)} &gt;\r\n      {character.show_description ? 'collapse' : 'expand'}\r\n    &lt;\/a&gt;\r\n    {character.show_description &amp;&amp;\r\n      &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>We&#8217;re storing the state of the description field inside the character object. Our state will look like this now:<\/p>\n<pre><code class=\"jsx language-jsx\">state = {\r\n  characters: [{\r\n    id: 1,\r\n    name: \"Eddard Ned Stark\",\r\n    house: \"stark\",\r\n    description: \"Lord of Winterfell - Warden of the North - Hand of the King - Married to Catelyn (Tully) Stark\",\r\n    imageSuffix: \"eddard-stark\",\r\n    wikiSuffix: \"Eddard_Stark\",\r\n    show_description: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Benjen Stark\",\r\n    house: \"stark\",\r\n    description: \"Brother of Eddard Stark - First ranger of the Night's Watch\",\r\n    imageSuffix: \"benjen-stark\",\r\n    wikiSuffix: \"Benjen_Stark\",\r\n    show_description: false\r\n  }]\r\n}\r\n<\/code><\/pre>\n<p>This is a general pattern a lot of developers follow when they&#8217;re starting out with Redux. There&#8217;s nothing wrong with this approach, and it works great for smaller apps.<\/p>\n<p>So far, we&#8217;ve been dealing with the characters from the first chapter of GoT, and the universe is about to get a whole lot bigger. When it does, our app will become slow. Imagine looping through 1000 characters to update one row.<\/p>\n<p>Let&#8217;s see how to scale this for a larger dataset:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\r\n\/\/ \u2026\r\ncase FlixActions.TOGGLE_CHARACTER_DESCRIPTION:\r\n  const {character} = action.payload;\r\n  return {\r\n    ...state,\r\n    character_show_description: {\r\n      ...state.character_show_description,\r\n      [character.id]: !state.character_show_description[character.id]\r\n    }\r\n  }\r\n\/\/ \u2026\r\n<\/code><\/pre>\n<p>And in <code>GoTCharacters.js<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">export const CharacterRow = ({character, character_show_description, toggleCharacterDescription}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;a href=\"#\" onClick={toggleCharacterDescription.bind(null, character)} &gt;\r\n      {character_show_description[character.id] ? 'collapse' : 'expand'}\r\n    &lt;\/a&gt;\r\n    {character_show_description[character.id] &amp;&amp;\r\n      &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>When the user clicks on the <strong>expand<\/strong> link, we update the <code>character_show_description<\/code> with the current character id. The state looks like this now:<\/p>\n<pre><code class=\"jsx language-jsx\">state = {\r\n  characters: [...],\r\n  character_show_description: {\r\n    1: true,\r\n    2: false\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Now we can update the UI state without looping over all the characters.<\/p>\n<h2 id=\"managingformstateinredux\">Managing Form State in Redux<\/h2>\n<p>Managing form state is a tricky business. In a typical application, we&#8217;ll serialize the form data once during submit and, if it&#8217;s valid, submit it. Otherwise, we&#8217;ll show an error message. Easy-peasy, right?<\/p>\n<p>But, in the real world, we&#8217;ll have some complex interactions involving forms. When there is a validation error on a form, we may have to show the errors at top of the page. We may even need to disable some elements in the other part of the page, depending on the UX. This is usually achieved by passing random callbacks from your parents&#8217; parents&#8217; parent, or even manipulating the DOM with every validation.<\/p>\n<p>Let&#8217;s see how we can implement this with Redux:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\/\/ ============\r\n\r\nconst FlixActions = km({\r\n  FETCH_CHARACTERS: null,\r\n  TOGGLE_CHARACTER_DESCRIPTION: null,\r\n  TOGGLE_CHARACTER_EDIT: null,\r\n  SYNC_CHARACTER_EDIT_DATA: null,\r\n  SAVE_CHARACTER_EDIT: null\r\n});\r\n\r\nconst default_state = {\r\n  characters: characters,\r\n  character_show_description: {},\r\n  show_character_edit: {},\r\n  character_edit_form_data: {}\r\n};\r\n\r\n\r\nexport const toggleEdit = createAction(\r\n  FlixActions.TOGGLE_CHARACTER_EDIT, (character) =&gt; ({character})\r\n);\r\n\r\nexport const syncCharacterEditData = createAction(\r\n  FlixActions.SYNC_CHARACTER_EDIT_DATA, (character, form_data) =&gt; ({character, form_data})\r\n);\r\nexport const editCharacterDetails = createAction(\r\n  FlixActions.SAVE_CHARACTER_EDIT, (character) =&gt; ({character})\r\n);\r\n\r\nexport default (current_state, action) =&gt; {\r\n  \/\/ \u2026\r\n\r\n  switch (action.type) {\r\n    \/\/ \u2026\r\n\r\n    case FlixActions.TOGGLE_CHARACTER_EDIT:\r\n      character =  action.payload.character;\r\n      const show_character_edit = !state.show_character_edit[character.id];\r\n      return {\r\n        ...state,\r\n        show_character_edit: {\r\n          ...state.show_character_edit,\r\n          [character.id]: show_character_edit\r\n        }, character_edit_form_data : {\r\n          ...state.character_edit_form_data,\r\n          [character.id]: show_character_edit ? {...character} : {}\r\n        }\r\n      }\r\n\r\n    case FlixActions.SYNC_CHARACTER_EDIT_DATA:\r\n      character =  action.payload.character;\r\n      const {form_data} = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        character_edit_form_data: {\r\n          ...state.character_edit_form_data,\r\n          [character.id]: {...form_data}\r\n        }\r\n      }\r\n\r\n    case FlixActions.SAVE_CHARACTER_EDIT:\r\n      character =  action.payload.character;\r\n      const edit_form_data = state.character_edit_form_data[character.id];\r\n      const characters = state.characters.map(char =&gt; {\r\n        if (char.id === character.id) return {...char, name:edit_form_data.name, description: edit_form_data.description}\r\n\r\n        return char;\r\n      });\r\n\r\n    return {\r\n      ...state,\r\n      characters,\r\n      show_character_edit: {\r\n        ...state.show_character_edit,\r\n        [character.id]: false\r\n      }\r\n    }\r\n\r\n    \/\/ \u2026\r\n  }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ GotCharacters.js\r\n\r\n\r\nexport const CharacterRow = ({character, character_show_description, character_edit_form_data, show_character_edit, toggleCharacterDescription, toggleEdit, syncCharacterEditData, editCharacterDetails}) =&gt; {\r\n  const toggleEditPartial = toggleEdit.bind(null, character);\r\n  return (&lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;a href=\"#\" onClick={toggleCharacterDescription.bind(null, character)} &gt;\r\n      {character_show_description[character.id] ? 'collapse' : 'expand'}\r\n    &lt;\/a&gt;\r\n    {!character_show_description[character.id] &amp;&amp; &lt;a href=\"#\" onClick={toggleEditPartial} &gt;\r\n      edit\r\n    &lt;\/a&gt;}\r\n    {character_show_description[character.id] &amp;&amp;\r\n      &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n    {show_character_edit[character.id] &amp;&amp;\r\n      &lt;EditCharacterDetails character={character}\r\n        cancelEdit={toggleEditPartial}\r\n        syncCharacterEditData={syncCharacterEditData}\r\n        editCharacterDetails={editCharacterDetails}\r\n        edit_data={character_edit_form_data[character.id]}\/&gt;\r\n    }\r\n  &lt;\/div&gt;);\r\n}\r\n\r\nexport const EditCharacterDetails = ({character, edit_data, syncCharacterEditData, editCharacterDetails, cancelEdit}) =&gt;  {\r\n  const syncFormData = (key, e) =&gt; {\r\n    const {value} = e.currentTarget;\r\n    syncCharacterEditData(character, {\r\n      ...edit_data,\r\n      [key]: value\r\n    });\r\n  };\r\n\r\n  const saveForm = (e) =&gt; {\r\n    e.preventDefault();\r\n    editCharacterDetails(character);\r\n  };\r\n\r\n  return (\r\n    &lt;form onSubmit={saveForm}&gt;\r\n      &lt;label&gt;Name: &lt;\/label&gt;\r\n      &lt;input name='name' value={edit_data.name} onChange={syncFormData.bind(null, 'name')}\/&gt;\r\n\r\n      &lt;label&gt;Description:&lt;\/label&gt;\r\n      &lt;textarea name='description' value={edit_data.description} onChange={syncFormData.bind(null, 'description')}\/&gt;\r\n\r\n      &lt;button type=\"reset\" onClick={cancelEdit}&gt; Cancel &lt;\/button&gt;\r\n      &lt;button type=\"submit\"&gt; Submit &lt;\/button&gt;\r\n    &lt;\/form&gt;\r\n  );\r\n};\r\n<\/code><\/pre>\n<p>Let&#8217;s extend this to handle validations:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\/\/ ============\r\n\r\nexport const editCharacterDetails = createAction(\r\n  FlixActions.VALIDATE_AND_SAVE_CHARACTER_EDIT, (dispatch, character, edit_form_data) =&gt; {\r\n    const errors = validateCharacterForm(edit_form_data);\r\n    if (Object.keys(errors).length) {\r\n      return dispatch(showErrorMessage(character, errors));\r\n    }\r\n\r\n    return dispatch(saveCharacterEdit(character));\r\n  }\r\n);\r\n\r\nexport const showErrorMessage = createAction(\r\n  FlixActions.VALIDATE_CHARACTER_EDIT, (character, errors) =&gt; ({character, errors, hasError: true})\r\n);\r\n\r\nexport const saveCharacterEdit = createAction(\r\n  FlixActions.SAVE_CHARACTER_EDIT, (character) =&gt; ({character})\r\n);\r\n\r\nswitch (action.type) {\r\n  \/\/ \u2026\r\n\r\n  case FlixActions.VALIDATE_CHARACTER_EDIT:\r\n    character =  action.payload.character;\r\n    const {errors, hasError} = action.payload;\r\n\r\n    return {\r\n      ...state,\r\n      character_edit_form_errors: {\r\n        ...state.character_edit_form_errors,\r\n        [character.id]: {errors, hasError}\r\n      }\r\n    }\r\n  \/\/ \u2026\r\n}\r\n<\/code><\/pre>\n<p>Isn&#8217;t this very similar to the example we saw in the previous section? What&#8217;s so special about it in forms?<\/p>\n<p>Before jumping into this, it&#8217;s important to understand how Redux internals work. When your state changes, you don&#8217;t update a single point in the tree. Instead, the entire state tree is replaced by a new one. This tree is passed to your React component and React reconciles all the components to see if the DOM needs updating.<\/p>\n<p>Form state is special, because the state tree changes very quickly. Depending on the users&#8217; typing speed, that could be a problem. Since state changes trigger reconciliation of all nodes, there might be a small lag when users type. It can become very noticeable when dealing with a big page with a few hundred components.<\/p>\n<p>Let&#8217;s see how we can remodel this without making a big change:<\/p>\n<pre><code class=\"jsx language-jsx\">export class StatefulCharacterRow extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.toggleEditForm = this.toggleEditForm.bind(this);\r\n    this.syncCharacterEditData = this.syncCharacterEditData.bind(this);\r\n    this.state = {\r\n      show_description: false,\r\n      show_edit_form: false,\r\n      edit_data: {}\r\n    }\r\n  }\r\n\r\n  toggleEditForm() {\r\n    const {name, description} = this.props.character;\r\n    const show_edit_form = !this.state.show_edit_form;\r\n    const edit_data = show_edit_form ? {name, description} : {};\r\n    this.setState({show_edit_form, edit_data});\r\n  }\r\n\r\n  syncCharacterEditData(character, form_data) {\r\n    this.setState({\r\n      edit_data: {...this.state.edit_data, ...form_data}\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {character} = this.props;\r\n    return (&lt;div className=\"row\"&gt;\r\n      &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n      &lt;a href=\"#\" onClick={() =&gt; this.setState({\r\n        show_description: !this.state.show_description})} &gt;\r\n        {this.state.show_description ? 'collapse' : 'expand'}\r\n      &lt;\/a&gt;\r\n\r\n      {!this.state.show_edit_form &amp;&amp; &lt;a href=\"#\" onClick={this.toggleEditForm} &gt;\r\n        edit\r\n      &lt;\/a&gt;}\r\n      {this.state.show_description &amp;&amp;\r\n        &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n      {this.state.show_edit_form &amp;&amp;\r\n        &lt;EditCharacterDetails character={character}\r\n          cancelEdit={this.toggleEditForm}\r\n          syncCharacterEditData={this.syncCharacterEditData}\r\n          editCharacterDetails={this.props.editCharacterDetails}\r\n          edit_data={this.state.edit_data}\/&gt; }\r\n    &lt;\/div&gt;);\r\n  }\r\n};\r\n<\/code><\/pre>\n<p>The simplest way to handle this is to create a wrapper component around your form (think of it like a container) and store the state there. So, when users input changes, only this node gets updated without shaking the entire tree.<\/p>\n<p>Notice that we&#8217;ve only moved the form state inside React, but the error state still remains outside. This will help reduce unnecessary clutter if we ever want to handle these errors outside of the form scope.<\/p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses<\/h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https:\/\/dab1nmslvvntp.cloudfront.net\/wp-content\/uploads\/2017\/07\/1501203893wesbos.jpg' \/>\n        <\/div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners<\/span><\/a><\/div>\n            <div class='f-large'>Wes Bos<\/div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'<\/strong> at checkout to get <strong>25% off<\/strong>.<\/div>\n          <\/div>\n        <\/div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https:\/\/ReactForBeginners.com\/friend\/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'><\/div>\n            <\/div>\n          <\/a>\n        <\/div>\n      <\/div>\n    \n  \n<h2 id=\"wrappingup\">Wrapping Up<\/h2>\n<p>Before deciding on where to store state when using Redux, it would be helpful to understand the following scenarios:<\/p>\n<h3 id=\"1isthisuistateorapplicationstate\">1. Is this UI state, or application state?<\/h3>\n<p>Character name is application state, whereas tracking whether an action is in progress is UI state. While it&#8217;s tempting to couple them, in the long run it&#8217;ll pay off to keep them separate.<\/p>\n<pre><code class=\"jsx language-jsx\">state = {\r\n  characters: [{\r\n    id: 1,\r\n    name: Jon Snow,\r\n    \u2026\r\n  }],\r\n  ui_state: {\r\n    1: {\r\n      is_edit_in_progress: true,\r\n      show_description: false\r\n    }\r\n  }\r\n}\r\n<\/code><\/pre>\n<h3 id=\"2howtodecidewhatgoesincomponentstateandwhatgoesinredux\">2. How to decide what goes in component state and what goes in Redux<\/h3>\n<p>Usually, app data can be rendered many times on a page. For instance, we can render a list of all characters and show a count of characters grouped by the house they belong to. It makes sense to manage them in Redux.<\/p>\n<p>Store UI state in Redux if there is a global dependency. Otherwise, you&#8217;re better off handling it with React&#8217;s local component state.<\/p>\n<p>Redux has helped me structure my thoughts better. With jQuery\/Backbone, my focus was around how to manipulate the DOM to achieve the intended effect. With Redux, it&#8217;s about getting your application state right. Once you nail that, the complexity of your front-end codebase comes down significantly.<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p><strong>One common trend I find among most Redux developers is a hatred towards <code>setState()<\/code>. A lot of us (yes, I&#8217;ve fallen into this trap many times before) flinch at the sight of <code>setState()<\/code> and try to keep all the data in our Redux store. But, as the complexity of your application grows, this poses several challenges.<\/strong><\/p>\n<p>In this post, I&#8217;ll walk you through various strategies to model your state, and dive into when each of them can be used.<\/p>\n<h2 id=\"gettingstarted\">Getting Started<\/h2>\n<p>Redux works with the principle of being the single source of truth for your application state. A new Game of Thrones season is airing now, and I&#8217;m sure everyone&#8217;s excited to know how this is going to unfold. Let&#8217;s build a fun Game of Thrones fan listing page, to understand these concepts in detail.<\/p>\n<p><em>Note: I&#8217;ll be using <code>yarn<\/code> to run the app. If you don&#8217;t have <a href=\"https:\/\/www.sitepoint.com\/yarn-vs-npm\/\">yarn<\/a> set up, replace yarn with <code>npm<\/code>.<\/em><\/p>\n<p>Before we dive in, download the basic skeleton from <a href=\"https:\/\/github.com\/skmvasu\/redux-state-vs-local-state-sp\">the repo<\/a> and run:<\/p>\n<pre><code class=\"bash language-bash\">yarn install\r\nyarn run start\r\n<\/code><\/pre>\n<p>You should see a basic list page with some of your favorite GoT characters listed.<\/p>\n<p><em>Note: We&#8217;ll be using the <a href=\"https:\/\/github.com\/erikras\/ducks-modular-redux\">ducks pattern<\/a> to write our application. It reduces unnecessary module imports and cuts down on a lot of boilerplate.<\/em><\/p>\n<h2 id=\"introtoredux\">Intro to Redux<\/h2>\n<p>The scope of this article is to help you structure your Redux apps. It assumes a basic knowledge of the library. I&#8217;ll give a brief overview of Redux concepts that will help you follow the rest of the article better. If you&#8217;re familiar with how these works, feel free to skip this section.<\/p>\n<p>All Redux apps make use of four important constructs: actions, reducers, a store, and containers.<\/p>\n<h3 id=\"actions\">Actions<\/h3>\n<p>An <strong>action<\/strong> is an intent to update the state. It could be triggered by a network call, or a user clicking a button. Actions have two parts:<\/p>\n<ol>\n<li><strong>Action type<\/strong>. A unique identifier representing an action.<\/li>\n<li><strong>Payload<\/strong>. Any metadata that&#8217;s associated with the action. For instance, if we make a network request to fetch a list of movies, the response from the server is the payload.<\/li>\n<\/ol>\n<p>For this example, we&#8217;ll be using a library called <code>redux-actions<\/code> to create actions.<\/p>\n<h3 id=\"reducers\">Reducers<\/h3>\n<p>A <strong>reducer<\/strong> is a function that listens for an action and returns a new state representation.<\/p>\n<h3 id=\"store\">Store<\/h3>\n<p>An application can be divided into many reducers, representing various parts of the page. A <strong>store<\/strong> brings all these together and keeps the app state intact.<\/p>\n<h3 id=\"containers\">Containers<\/h3>\n<p><strong>Containers<\/strong> connect your app state and actions with the component, passing them down as props.<\/p>\n<p>To get a deep understanding of how this works, I&#8217;d encourage you to first look at the <a href=\"https:\/\/egghead.io\/courses\/getting-started-with-redux\">free introduction series by Dan Abramov<\/a>. <\/p>\n<p><!-- Replace with link to SP into to Redux --><\/p>\n<h2 id=\"splitappdataanduistate\">Split App Data and UI State<\/h2>\n<p>The list page is nice, but the names don&#8217;t give any context to people who are new to the GoT universe. Let&#8217;s extend the component to render the character description as well:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/GoTCharacter.js\r\n\r\nexport const CharacterRow = ({character}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;\r\n\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>While this solves the problem, our designers feel that the page looks clumsy, and it&#8217;s a better idea to collapse this information till users want it. There are three different approaches we can take to solve this problem.<\/p>\n<h3 id=\"thesetstateapproach\">The <code>setState<\/code> approach<\/h3>\n<p>The simplest way to achieve this in React is using <code>setState()<\/code> to store the data within the component itself:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/GoTCharacter.js\r\n\r\nexport class StatefulCharacterRow extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show_description: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {character} = this.props;\r\n    return (&lt;div className=\"row\"&gt;\r\n      &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n      &lt;a href=\"#\" onClick={() =&gt; this.setState({\r\n        show_description: !this.state.show_description})} &gt;\r\n        {this.state.show_description ? 'collapse' : 'expand'}\r\n      &lt;\/a&gt;\r\n      {this.state.show_description &amp;&amp;\r\n        &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n    &lt;\/div&gt;);\r\n  }\r\n};\r\n<\/code><\/pre>\n<h3 id=\"thereduxapproach\">The Redux approach<\/h3>\n<p>Using <code>setState()<\/code> is fine as long as the state we&#8217;re dealing with is only local to the component. If, for instance, we want to put in place an &#8220;expand all&#8221; function, it will be difficult to handle this with just React.<\/p>\n<p>Let&#8217;s see how we can move this to Redux:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\r\n\/\/ \u2026\r\nexport const toggleCharacterDescription = createAction(\r\n  FlixActions.TOGGLE_CHARACTER_DESCRIPTION, (character) =&gt; ({character})\r\n);\r\n\r\nexport default (current_state, action) =&gt; {\r\n  const state = current_state || default_state;\r\n\r\n  switch (action.type) {\r\n    case FlixActions.TOGGLE_CHARACTER_DESCRIPTION:\r\n      return {...state, characters: state.characters.map(char =&gt; {\r\n        if (char.id === action.payload.character.id) {\r\n          return {...char,show_description: !char.show_description};\r\n        }\r\n\r\n        return char;\r\n      })}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ GoTCharactersContainer.js\r\n\r\nimport { connect } from 'react-redux';\r\nimport GoTCharacters from '.\/GoTCharacters';\r\nimport {toggleCharacterDescription} from '.\/FlickDuck';\r\n\r\nconst mapStateToProps = (state) =&gt; ({\r\n  ...state.flick\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =&gt; ({\r\n  toggleCharacterDescription : (data) =&gt; dispatch(toggleCharacterDescription(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoTCharacters);\r\n<\/code><\/pre>\n<pre><code class=\"jsx language-jsx\">\/\/ GoTCharacters.js\r\n\r\nconst GoTCharacters = ({characters,toggleCharacterDescription}) =&gt; {\r\n  return (\r\n    &lt;div className=\"characters-list\"&gt;\r\n      {characters.map(char =&gt; (\r\n        &lt;CharacterRow\r\n          character={char}\r\n          toggleCharacterDescription={toggleCharacterDescription}\r\n          key={char.id}\/&gt;\r\n      ))}\r\n    &lt;\/div&gt;\r\n  );\r\n};\r\n\r\nexport const CharacterRow = ({character, toggleCharacterDescription}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;a href=\"#\" onClick={toggleCharacterDescription.bind(null, character)} &gt;\r\n      {character.show_description ? 'collapse' : 'expand'}\r\n    &lt;\/a&gt;\r\n    {character.show_description &amp;&amp;\r\n      &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>We&#8217;re storing the state of the description field inside the character object. Our state will look like this now:<\/p>\n<pre><code class=\"jsx language-jsx\">state = {\r\n  characters: [{\r\n    id: 1,\r\n    name: \"Eddard Ned Stark\",\r\n    house: \"stark\",\r\n    description: \"Lord of Winterfell - Warden of the North - Hand of the King - Married to Catelyn (Tully) Stark\",\r\n    imageSuffix: \"eddard-stark\",\r\n    wikiSuffix: \"Eddard_Stark\",\r\n    show_description: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Benjen Stark\",\r\n    house: \"stark\",\r\n    description: \"Brother of Eddard Stark - First ranger of the Night's Watch\",\r\n    imageSuffix: \"benjen-stark\",\r\n    wikiSuffix: \"Benjen_Stark\",\r\n    show_description: false\r\n  }]\r\n}\r\n<\/code><\/pre>\n<p>This is a general pattern a lot of developers follow when they&#8217;re starting out with Redux. There&#8217;s nothing wrong with this approach, and it works great for smaller apps.<\/p>\n<p>So far, we&#8217;ve been dealing with the characters from the first chapter of GoT, and the universe is about to get a whole lot bigger. When it does, our app will become slow. Imagine looping through 1000 characters to update one row.<\/p>\n<p>Let&#8217;s see how to scale this for a larger dataset:<\/p>\n<pre><code class=\"jsx language-jsx\">\/\/ FlickDuck.js\r\n\r\n\/\/ \u2026\r\ncase FlixActions.TOGGLE_CHARACTER_DESCRIPTION:\r\n  const {character} = action.payload;\r\n  return {\r\n    ...state,\r\n    character_show_description: {\r\n      ...state.character_show_description,\r\n      [character.id]: !state.character_show_description[character.id]\r\n    }\r\n  }\r\n\/\/ \u2026\r\n<\/code><\/pre>\n<p>And in <code>GoTCharacters.js<\/code>:<\/p>\n<pre><code class=\"jsx language-jsx\">export const CharacterRow = ({character, character_show_description, toggleCharacterDescription}) =&gt; (\r\n  &lt;div className=\"row\"&gt;\r\n    &lt;div className=\"name\"&gt;{character.name}&lt;\/div&gt;\r\n    &lt;a href=\"#\" onClick={toggleCharacterDescription.bind(null, character)} &gt;\r\n      {character_show_description[character.id] ? 'collapse' : 'expand'}\r\n    &lt;\/a&gt;\r\n    {character_show_description[character.id] &amp;&amp;\r\n      &lt;div className=\"description\"&gt;{character.description}&lt;\/div&gt;}\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\n<p>When the user clicks on the <strong>expand<\/strong> link, we update the <code>character_show_description<\/code> with the current character id. The state looks like this now:<\/p>\n<pre><code class=\"jsx language-jsx\">state = {\r\n  characters: [...],\r\n  character_show_description: {\r\n    1: true,\r\n    2: false\r\n  }\r\n}\r\n<\/code><\/pre>\n<p>Now we can update the UI state without looping over all the characters.<\/p>\n",
      "protected": false
    },
    "author": 71428,
    "featured_media": 160009,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      407
    ],
    "tags": [
      9543,
      7829,
      9802,
      10437,
      9122,
      10699
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160008"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/71428"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=160008"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/160008\/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media\/160009"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=160008"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=160008"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=160008"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 159925,
    "date": "2017-09-22T10:00:42",
    "date_gmt": "2017-09-22T17:00:42",
    "guid": {
      "rendered": "https:\/\/www.sitepoint.com\/?p=159925"
    },
    "modified": "2017-09-22T00:49:29",
    "modified_gmt": "2017-09-22T07:49:29",
    "slug": "website-hosting-everything-need-get-started",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/www.sitepoint.com\/website-hosting-everything-need-get-started\/",
    "title": {
      "rendered": "Website Hosting: Everything You Need to Get Started"
    },
    "content": {
      "rendered": "<p>Whether you\u2019re starting a new project or your existing blog has moved beyond the WordPress.com or Medium world, at some point you\u2019re going to want to dive into the world of hosting. This is a one-stop shop that\u2019ll give you the information you need to get started.<\/p>\n<p>Whether you\u2019re deciding whether to take the hosting plunge at all, comparing your options, you\u2019re focused on trying WordPress or you\u2019re looking at more advanced tooling and systems, here are the best written resources we could find.<\/p>\n<h2 id=\"introductions-and-comparisons\">Introductions and Comparisons<\/h2>\n<ul>\n<li>OK, so all you know is you <em>need<\/em> a website, and it needs something called \u201chosting\u201d. <a href=\"https:\/\/www.sitepoint.com\/i-need-a-website-what-do-i-need-to-know-about-hosting\/\">Here\u2019s everything you need to know about \u201chosting\u201d<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/self-hosting-your-website-bad-idea\/\">Why self-hosting your website can be a bad idea<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/cloud-hosting-pros-cons\/\">The pros and cons of cloud-hosting<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/domain-name-www-or-not\/\">To www or not, that is the question<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/the-ultimate-beginners-guide-to-setting-up-running-a-wordpress-site\/\">The ultimate beginners guide to setting up and running a WordPress site<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/siteground-review-shared-hosting-stacks\/\">A review of SiteGround<\/a>, our recommended hosting choice.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/beginners-guide-website-staging\/\">A beginner\u2019s guide to website staging<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/create-disaster-plans-websites\/\">How and why to create disaster plans for your sites<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/hosting-multi-domain-reseller-plans\/\">An intro to multi-domain and reseller plans<\/a>.<\/li>\n<li>Or maybe what you really want is an online store &#8211; <a href=\"https:\/\/www.sitepoint.com\/im-ready-online-store-hosting-choose\/\">here\u2019s how to choose the right hosting to make that a success<\/a>.<\/li>\n<\/ul>\n<h2 id=\"wordpress\">WordPress<\/h2>\n<p>If the project you\u2019re hosting is a blog or portfolio site, chances are you\u2019ll opt for the world\u2019s most popular content management system, WordPress. We have <a href=\"https:\/\/www.sitepoint.com\/wordpress\/\">a whole section on the site that explores WordPress in detail<\/a>, but here are some initial resources to make that experience pleasant and effective.<\/p>\n<ul>\n<li>Already have a WordPress site on WordPress.com, but want to go for the full WordPress experience? <a href=\"https:\/\/www.sitepoint.com\/migrating-from-wordpress-com\/\">Here\u2019s how to migrate from WordPress.com to self-hosted WordPress<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/migrate-wordpress-site-new-hosting-provider\/\">How to migrate a WordPress site to a new hosting provider<\/a>.<\/li>\n<li>If you\u2019re rather not delve into the code yourself, here are <a href=\"https:\/\/www.sitepoint.com\/5-best-wordpress-site-builders-for-the-technically-challenged\/\">5 of the best WordPress site builders<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/synchronize-wordpress-live-development-databases\/\">How to synchronize WordPress live and development databases<\/a>. <\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/essential-wordpress-plugins-for-solopreneurs\/\">Essential WordPress plugins for Solopreneurs<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/optimize-wordpress-sites-performance\/\">How to optimize a WordPress site\u2019s performance<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/why-staging-environments-are-critical-for-wordpress-sites\/\">Why staging environments are critical for WordPress sites<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/7-setup-tips-for-wordpress-beginners\/\">7 tips for setting up WordPress, for beginners<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/the-5-best-wordpress-themes-for-seo-visibility\/\">The 5 best WordPress themes for SEO visibility<\/a>.<\/li>\n<\/ul>\n<h3 id=\"maintenance-and-security\">Maintenance and security<\/h3>\n<ul>\n<li>Once you\u2019ve got a WordPress site you love, you\u2019ll need to keep it safe, sound, and working well: <\/li>\n<li>Here\u2019s <a href=\"https:\/\/www.sitepoint.com\/regular-wordpress-maintenance-checklist\/\">your regular WordPress maintenance checklist<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/ways-to-keep-your-wordpress-site-secure\/\">And here\u2019s how to keep it secure<\/a><\/li>\n<li>And when all else fails: <a href=\"https:\/\/www.sitepoint.com\/backup-wordpress-site\/\">how to back-up your WordPress site<\/a>.<\/li>\n<\/ul>\n<h2 id=\"slightly-more-advanced\">Slightly More Advanced<\/h2>\n<ul>\n<li><a href=\"https:\/\/www.sitepoint.com\/browsers-website-support\/\">Which browsers should your site support?<\/a>.<\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/what-is-http2\/\">Wait, what\u2019s HTTP\/2?<\/a><\/li>\n<li><a href=\"https:\/\/www.sitepoint.com\/lightning-fast-websites-prefetching\/\">How to make your site lightning fast, with prefetching<\/a><\/li>\n<li>If you\u2019re on WordPress, an outline of <a href=\"https:\/\/www.sitepoint.com\/5-time-saving-uses-wp-cli-automation\/\">5 ways WP-CLI automation can save you time<\/a>.<\/li>\n<\/ul>\n<p>With these resources under your belt, you should be able to get your next project up and running and out to your audience with no trouble. But if you still have questions, drop us a line in the comments!<\/p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Whether you\u2019re starting a new project or your existing blog has moved beyond the WordPress.com or Medium world, at some point you\u2019re going to want to dive into the world of hosting. This is a one-stop shop that\u2019ll give you the information you need to get started. Whether you\u2019re deciding whether to take the hosting [&hellip;]<\/p>\n",
      "protected": false
    },
    "author": 71721,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      422,
      5849
    ],
    "tags": [
      1717,
      310,
      5989
    ],
    "_links": {
      "self": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/159925"
        }
      ],
      "collection": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts"
        }
      ],
      "about": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/types\/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/users\/71721"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/comments?post=159925"
        }
      ],
      "version-history": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/posts\/159925\/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/media?parent=159925"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/categories?post=159925"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https:\/\/www.sitepoint.com\/wp-json\/wp\/v2\/tags?post=159925"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https:\/\/api.w.org\/{rel}",
          "templated": true
        }
      ]
    }
  }
]